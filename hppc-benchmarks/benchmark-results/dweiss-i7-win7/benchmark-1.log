Benchmarks suite starting.
Date now: Fri Mar 11 19:04:58 CET 2011


================================================================================
------------------------------ System properties -------------------------------
================================================================================
awt.toolkit: sun.awt.windows.WToolkit
file.encoding: Cp1252
file.encoding.pkg: sun.io
file.separator: \\
java.awt.graphicsenv: sun.awt.Win32GraphicsEnvironment
java.awt.printerjob: sun.awt.windows.WPrinterJob
java.class.path: hppc-benchmarks-0.4.0-SNAPSHOT.jar
java.class.version: 50.0
java.endorsed.dirs: c:\\java\\jdk\\jre\\lib\\endorsed
java.ext.dirs: c:\\java\\jdk\\jre\\lib\\ext;C:\\Windows\\Sun\\Java\\lib\\ext
java.home: c:\\java\\jdk\\jre
java.io.tmpdir: C:\\Users\\dweiss\\AppData\\Local\\Temp\\
java.library.path: c:\\java\\jdk\\bin;.;C:\\Windows\\Sun\\Java\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\MiKTeX 2.8\\miktex\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseSVN\\bin;C:\\tools\\graphviz\\bin;C:\\Program Files (x86)\\GtkSharp\\2.12\\bin;C:\\tools\\doxygen\\bin;C:\\tools\\git\\cmd;D:\\Program Files\\TortoiseHg\\;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\Program Files (x86)\\MiKTeX 2.8\\miktex\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseSVN\\bin;C:\\tools\\graphviz\\bin;C:\\Program Files (x86)\\QuickTime\\QTSystem\\;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseSVN\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseSVN\\bin;c:\\tools\\svn;c:\\java\\jdk\\bin;C:\\tools\\bin-neutral\\ant\\bin;C:\\tools\\bin-neutral\\mvn\\bin;c:\\tools;C:\\tools\\uedit;C:\\tools\\uedit\\;c:\\tools\\git\\cmd;c:\\tools\\gnuplot\\bin;C:\\tools\\jruby\\bin;c:\\tools\\nant\\bin;C:\\Users\\dweiss\\AppData\\Roaming\\MiKTeX\\2.8\\miktex\\bin\\;C:\\tools\\python27\\;c:\\tools\\gpg
java.runtime.name: Java(TM) SE Runtime Environment
java.runtime.version: 1.6.0_20-b02
java.specification.name: Java Platform API Specification
java.specification.vendor: Sun Microsystems Inc.
java.specification.version: 1.6
java.vendor: Sun Microsystems Inc.
java.vendor.url: http://java.sun.com/
java.vendor.url.bug: http://java.sun.com/cgi-bin/bugreport.cgi
java.version: 1.6.0_20
java.vm.info: mixed mode
java.vm.name: Java HotSpot(TM) 64-Bit Server VM
java.vm.specification.name: Java Virtual Machine Specification
java.vm.specification.vendor: Sun Microsystems Inc.
java.vm.specification.version: 1.0
java.vm.vendor: Sun Microsystems Inc.
java.vm.version: 16.3-b01
line.separator: \r\n
os.arch: amd64
os.name: Windows 7
os.version: 6.1
path.separator: ;
sun.arch.data.model: 64
sun.boot.class.path: c:\\java\\jdk\\jre\\lib\\resources.jar;c:\\java\\jdk\\jre\\lib\\rt.jar;c:\\java\\jdk\\jre\\lib\\sunrsasign.jar;c:\\java\\jdk\\jre\\lib\\jsse.jar;c:\\java\\jdk\\jre\\lib\\jce.jar;c:\\java\\jdk\\jre\\lib\\charsets.jar;c:\\java\\jdk\\jre\\classes
sun.boot.library.path: c:\\java\\jdk\\jre\\bin
sun.cpu.endian: little
sun.cpu.isalist: amd64
sun.desktop: windows
sun.io.unicode.encoding: UnicodeLittle
sun.java.launcher: SUN_STANDARD
sun.jnu.encoding: Cp1250
sun.management.compiler: HotSpot 64-Bit Server Compiler
sun.os.patch.level: 
user.country: GB
user.dir: d:\\carrot2\\carrotsearch.labs\\hppc\\hppc-benchmarks\\target\\hppc-benchmarks-0.4.0-SNAPSHOT
user.home: C:\\Users\\dweiss
user.language: en
user.name: dweiss
user.timezone: Europe/Belgrade
user.variant: 

================================================================================
------------------------------------- CPU --------------------------------------
================================================================================
NUMBER_OF_PROCESSORS=8
PROCESSOR_ARCHITECTURE=AMD64
PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 30 Stepping 5, GenuineIntel
PROCESSOR_LEVEL=6
PROCESSOR_REVISION=1e05

================================================================================
------------------------ BenchmarkBigramCounting (1/3) -------------------------
================================================================================
 0% Scenario{vm=java, trial=0, benchmark=Library, library=HPPC} 107515104.22 ns; ?=473746.86 ns @ 3 trials
20% Scenario{vm=java, trial=0, benchmark=Library, library=TROVE} 167618803.20 ns; ?=484864.62 ns @ 3 trials
40% Scenario{vm=java, trial=0, benchmark=Library, library=FASTUTIL_OPEN} 111493540.25 ns; ?=436784.61 ns @ 3 trials
60% Scenario{vm=java, trial=0, benchmark=Library, library=FASTUTIL_LINKED} 110586431.75 ns; ?=252609.74 ns @ 3 trials
80% Scenario{vm=java, trial=0, benchmark=Library, library=MAHOUT} 172791513.38 ns; ?=745516.17 ns @ 3 trials

        library  ms linear runtime
           HPPC 108 ==================
          TROVE 168 =============================
  FASTUTIL_OPEN 111 ===================
FASTUTIL_LINKED 111 ===================
         MAHOUT 173 ==============================

vm: java
trial: 0
benchmark: Library

================================================================================
------------------------ BenchmarkGetWithRemoved (2/3) -------------------------
================================================================================
 0% Scenario{vm=java, trial=0, benchmark=Get, implementation=HPPC, removedKeys=0, size=2000000} 58322517.41 ns; ?=337671.81 ns @ 3 trials
 4% Scenario{vm=java, trial=0, benchmark=Get, implementation=FASTUTIL, removedKeys=0, size=2000000} 52436525.79 ns; ?=283253.45 ns @ 3 trials
 8% Scenario{vm=java, trial=0, benchmark=Get, implementation=JAVA, removedKeys=0, size=2000000} 161151222.50 ns; ?=10779250.77 ns @ 10 trials
12% Scenario{vm=java, trial=0, benchmark=Get, implementation=TROVE, removedKeys=0, size=2000000} 99907130.56 ns; ?=885455.19 ns @ 4 trials
16% Scenario{vm=java, trial=0, benchmark=Get, implementation=MAHOUT, removedKeys=0, size=2000000} 110951781.50 ns; ?=972627.32 ns @ 3 trials
20% Scenario{vm=java, trial=0, benchmark=Get, implementation=HPPC, removedKeys=0.25, size=2000000} 62156820.88 ns; ?=99666.46 ns @ 3 trials
24% Scenario{vm=java, trial=0, benchmark=Get, implementation=FASTUTIL, removedKeys=0.25, size=2000000} 57973104.35 ns; ?=153963.72 ns @ 3 trials
28% Scenario{vm=java, trial=0, benchmark=Get, implementation=JAVA, removedKeys=0.25, size=2000000} 156168544.11 ns; ?=497616.27 ns @ 3 trials
32% Scenario{vm=java, trial=0, benchmark=Get, implementation=TROVE, removedKeys=0.25, size=2000000} 159629212.50 ns; ?=5796040.41 ns @ 10 trials
36% Scenario{vm=java, trial=0, benchmark=Get, implementation=MAHOUT, removedKeys=0.25, size=2000000} 142534650.00 ns; ?=98220.84 ns @ 3 trials
40% Scenario{vm=java, trial=0, benchmark=Get, implementation=HPPC, removedKeys=0.5, size=2000000} 60362769.56 ns; ?=32688.10 ns @ 3 trials
44% Scenario{vm=java, trial=0, benchmark=Get, implementation=FASTUTIL, removedKeys=0.5, size=2000000} 56319016.38 ns; ?=280890.16 ns @ 3 trials
48% Scenario{vm=java, trial=0, benchmark=Get, implementation=JAVA, removedKeys=0.5, size=2000000} 138978011.57 ns; ?=119677.81 ns @ 3 trials
52% Scenario{vm=java, trial=0, benchmark=Get, implementation=TROVE, removedKeys=0.5, size=2000000} 111200057.25 ns; ?=34096.60 ns @ 3 trials
56% Scenario{vm=java, trial=0, benchmark=Get, implementation=MAHOUT, removedKeys=0.5, size=2000000} 163276016.78 ns; ?=229593.71 ns @ 3 trials
60% Scenario{vm=java, trial=0, benchmark=Get, implementation=HPPC, removedKeys=0.75, size=2000000} 49964545.00 ns; ?=150033.83 ns @ 3 trials
64% Scenario{vm=java, trial=0, benchmark=Get, implementation=FASTUTIL, removedKeys=0.75, size=2000000} 43051817.09 ns; ?=46328.86 ns @ 3 trials
68% Scenario{vm=java, trial=0, benchmark=Get, implementation=JAVA, removedKeys=0.75, size=2000000} 104376396.11 ns; ?=487432.87 ns @ 3 trials
72% Scenario{vm=java, trial=0, benchmark=Get, implementation=TROVE, removedKeys=0.75, size=2000000} 109313472.25 ns; ?=182469.70 ns @ 3 trials
76% Scenario{vm=java, trial=0, benchmark=Get, implementation=MAHOUT, removedKeys=0.75, size=2000000} 104722286.50 ns; ?=649379.27 ns @ 3 trials
80% Scenario{vm=java, trial=0, benchmark=Get, implementation=HPPC, removedKeys=1, size=2000000} 12559977.16 ns; ?=34604.18 ns @ 3 trials
84% Scenario{vm=java, trial=0, benchmark=Get, implementation=FASTUTIL, removedKeys=1, size=2000000} 9702780.57 ns; ?=7441.94 ns @ 3 trials
88% Scenario{vm=java, trial=0, benchmark=Get, implementation=JAVA, removedKeys=1, size=2000000} 45629731.03 ns; ?=89460.83 ns @ 3 trials
92% Scenario{vm=java, trial=0, benchmark=Get, implementation=TROVE, removedKeys=1, size=2000000} 9841639.51 ns; ?=26925.57 ns @ 3 trials
96% Scenario{vm=java, trial=0, benchmark=Get, implementation=MAHOUT, removedKeys=1, size=2000000} 16391749.73 ns; ?=53028.83 ns @ 3 trials

removedKeys implementation     ms linear runtime
          0           HPPC  58.32 ==========
          0       FASTUTIL  52.44 =========
          0           JAVA 161.15 =============================
          0          TROVE  99.91 ==================
          0         MAHOUT 110.95 ====================
       0.25           HPPC  62.16 ===========
       0.25       FASTUTIL  57.97 ==========
       0.25           JAVA 156.17 ============================
       0.25          TROVE 159.63 =============================
       0.25         MAHOUT 142.53 ==========================
        0.5           HPPC  60.36 ===========
        0.5       FASTUTIL  56.32 ==========
        0.5           JAVA 138.98 =========================
        0.5          TROVE 111.20 ====================
        0.5         MAHOUT 163.28 ==============================
       0.75           HPPC  49.96 =========
       0.75       FASTUTIL  43.05 =======
       0.75           JAVA 104.38 ===================
       0.75          TROVE 109.31 ====================
       0.75         MAHOUT 104.72 ===================
          1           HPPC  12.56 ==
          1       FASTUTIL   9.70 =
          1           JAVA  45.63 ========
          1          TROVE   9.84 =
          1         MAHOUT  16.39 ===

vm: java
trial: 0
benchmark: Get
size: 2000000

================================================================================
------------------------------ BenchmarkPut (3/3) ------------------------------
================================================================================
 0% Scenario{vm=java, trial=0, benchmark=Put, distribution=RANDOM, implementation=HPPC, size=1000000} 69109691.43 ns; ?=228040.67 ns @ 3 trials
 7% Scenario{vm=java, trial=0, benchmark=Put, distribution=LINEAR, implementation=HPPC, size=1000000} 69640616.95 ns; ?=524261.74 ns @ 3 trials
13% Scenario{vm=java, trial=0, benchmark=Put, distribution=HIGHBITS, implementation=HPPC, size=1000000} 69576035.00 ns; ?=95129.39 ns @ 3 trials
20% Scenario{vm=java, trial=0, benchmark=Put, distribution=RANDOM, implementation=FASTUTIL, size=1000000} 70191489.86 ns; ?=382762.25 ns @ 3 trials
27% Scenario{vm=java, trial=0, benchmark=Put, distribution=LINEAR, implementation=FASTUTIL, size=1000000} 69649835.48 ns; ?=97589.77 ns @ 3 trials
33% Scenario{vm=java, trial=0, benchmark=Put, distribution=HIGHBITS, implementation=FASTUTIL, size=1000000} 69680329.57 ns; ?=284618.33 ns @ 3 trials
40% Scenario{vm=java, trial=0, benchmark=Put, distribution=RANDOM, implementation=JAVA, size=1000000} 240957717.00 ns; ?=887724.02 ns @ 3 trials
47% Scenario{vm=java, trial=0, benchmark=Put, distribution=LINEAR, implementation=JAVA, size=1000000} 77574996.07 ns; ?=2992008.76 ns @ 10 trials
53% Scenario{vm=java, trial=0, benchmark=Put, distribution=HIGHBITS, implementation=JAVA, size=1000000} 183850215.75 ns; ?=1213696.14 ns @ 3 trials
60% Scenario{vm=java, trial=0, benchmark=Put, distribution=RANDOM, implementation=TROVE, size=1000000} 104045321.44 ns; ?=1013825.19 ns @ 5 trials
67% Scenario{vm=java, trial=0, benchmark=Put, distribution=LINEAR, implementation=TROVE, size=1000000} 37811949.73 ns; ?=142595.69 ns @ 3 trials
73% Scenario{vm=java, trial=0, benchmark=Put, distribution=HIGHBITS, implementation=TROVE, size=1000000} 89366884.31 ns; ?=141948.72 ns @ 3 trials
80% Scenario{vm=java, trial=0, benchmark=Put, distribution=RANDOM, implementation=MAHOUT, size=1000000} 88970472.60 ns; ?=115547.43 ns @ 3 trials
87% Scenario{vm=java, trial=0, benchmark=Put, distribution=LINEAR, implementation=MAHOUT, size=1000000} 36951492.20 ns; ?=276221.93 ns @ 3 trials
93% Scenario{vm=java, trial=0, benchmark=Put, distribution=HIGHBITS, implementation=MAHOUT, size=1000000} 77343957.47 ns; ?=313341.00 ns @ 3 trials

distribution implementation    ms linear runtime
      RANDOM           HPPC  69.1 ========
      RANDOM       FASTUTIL  70.2 ========
      RANDOM           JAVA 241.0 ==============================
      RANDOM          TROVE 104.0 ============
      RANDOM         MAHOUT  89.0 ===========
      LINEAR           HPPC  69.6 ========
      LINEAR       FASTUTIL  69.6 ========
      LINEAR           JAVA  77.6 =========
      LINEAR          TROVE  37.8 ====
      LINEAR         MAHOUT  37.0 ====
    HIGHBITS           HPPC  69.6 ========
    HIGHBITS       FASTUTIL  69.7 ========
    HIGHBITS           JAVA 183.9 ======================
    HIGHBITS          TROVE  89.4 ===========
    HIGHBITS         MAHOUT  77.3 =========

vm: java
trial: 0
benchmark: Put
size: 1000000

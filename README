#HPPC-RT: High Performance Primitive Collections "RealTime"

This is a fork of HPPC from CarrotSearch:
see JavaDoc and documentation at: http://labs.carrotsearch.com/hppc.html for more info.
IMPORTANT: Developers - read INSTALL file for proper Eclipse setup!

---------------------------------------

This fork intend to follow the original HPPC as close as possible while 
adding, tweaking, and even modifiying some features, for the goal of improving HPPC realtime behaviour. 
Most of the internal modifications intend to reach zero temporaries Objects creation at runtime.
Another way is to add convenient methods/API that allow filling and reuse pre-existing Objects. 

##For now, the additional features are:

1. Custom HashingStrategy for HashMaps/HashSets, to override the usual equals()/hashCode(). 

2. Faster clear(), resize() and such, using a memcpy-like technique offering 2x speed gain in clear()-like operations
especially noticable for big container sizes. 

3. Pooled Iterators: ability to use iterators the usual way, without creating Iterator instances
dynamically at runtime. 
That means in particular using the enhanced for loop without any dynamic allocation underneath.

4. Some API tweaks:
toArray(existing array) for every conatiner, good for array reuse.

5. Tweaked internal implementation to remove dynamic allocation of temporary Objects

6. TODO:
Creating examples for the new methods/API. 

All these new features are Unit tested, so should work reasonably well.
Pre-built binaries, sources and Javadoc are provided in the 'hppc/binaries' of the '0.6x-RT' branch for convenience.

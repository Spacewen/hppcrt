##HPPC-RT: High Performance Primitive Collections "RealTime"

This is a fork of HPPC from CarrotSearch, see JavaDoc and documentation at: http://labs.carrotsearch.com/hppc.html for more info.

IMPORTANT: Developers - read INSTALL file for proper Eclipse setup!

---------------------------------------

This fork intend to follow the original HPPC as close as possible while 
adding, tweaking, and even modifiying some features, for the goal of improving HPPC realtime behaviour. 
Most of the internal modifications intend to reach zero temporaries Objects creation at runtime.
A way is also to add convenient methods/API that allow filling and reuse of pre-existing Objects. 

###List of changes:
* Tweaked internal implementation to remove dynamic allocation of temporary Objects

* Pooled Iterators: ability to use iterators the usual way, without creating Iterator instances
dynamically at runtime. 
That means in particular using the enhanced for loop without any dynamic allocation underneath.

* Faster clear(), resize() and such, using a memcpy-like technique offering 2x speed gain in clear()-like operations
especially noticable for big container sizes. 

* toArray(existing array) for every container, good for array reuse in RealTime environnement

* Primitive and Objects in-place array sorts, similar to java.util.Arrays with Comparable and Comparator versions.

* [Object|primitives]Arrays as a complement of java.util.Arrays for in-place buffer manipulation : reverse, rotate...etc. 

* Native and optimized in-place sort methods for ArrayLists, LinkedLists, ArrayDeques, Stacks.

* Custom hashing strategies to override the usual equals()/hashCode() in Hash containers, in specific CustomHash containers.

* Identity hash maps and sets, comparing Objects by reference and native hash codes.

* Heaps : Priority queues, and Indexed (a.k.a indirect) priority queues

* Double linked-lists, supporting all operations common to lists and dequeues, with rich bi-derectional iterating methods.

* Custom default values for methods returning default values in some circonstances (see Javadoc)

* Boolean versions of containers when it makes sense: lists, queues, stacks, values in Maps.

and some small other performance and API tweaks....

All these new features are Unit tested, so should work reasonably well.

Stable version is published on Maven:
````
<dependency>
    <groupId>com.github.vsonnier</groupId>
    <artifactId>hppcrt</artifactId>
    <version>0.6.7</version>
</dependency>
````




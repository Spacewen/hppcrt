Hacking HPPC-RT:
----------------
The project as a whole needs Java 7, although the final runtime jars are still Java 5 and Java 6 compatible. To assure such 
antiquated compatibility, some restrictions must be enforced:

* hppcrt (sources) : Runtime sources either templates or hand-coded must use 1.5 API at best, while retaining the 1.6 compiler level for convenience. (ex. @Override allowed on subclasses AND interface implementations)  
The strict 1.5 API compatibility is checked by the animal-sniffer plugin, before start building the runtime jars,
then during the Jar generation phase the 'retrotranslator' generates a Java 5 Jar together with the Java 6 one. 

* hppcrt (tests): templates and hand-coded tests are allowed to be fully 1.6 compatible, including the API.

* hppcrt-template-processor: No particular restriction, the processor classes used for generate sources and tests are Java 7 level.
* hppcrt-benchmarks: No particular restriction, they are Java 7 level.


Maven shortcuts
---------------

# Clean everything
mvn clean

# Generate Eclipse project files (the setup is a bit complex, so use this!)
mvn clean compile eclipse:clean eclipse:eclipse

# Compile 
mvn clean compile

# Compile all, run all unit tests
mvn clean test

# Build sources jar.
mvn source:jar

# Package all JAR files, builds the benchmarks jar, skip the tests execution.
mvn clean package -Pquick

# Compile all, run all unit tests, package all JAR files, builds the benchmarks jar, install packages in a local repository.
mvn clean install

# Compile all, package all JAR files, builds the benchmarks jar, skip the tests execution, install packages in a local repository.
mvn clean install -Pquick

# Compile all, create benchmark JAR only
mvn clean package -Pquicknodoc -am -pl :hppcrt-benchmarks

# List available benchmarks
java -jar hppcrt-benchmarks/target/benchmarks.jar -l

# Try to resolve all dependencies to be able to work off the Net
mvn dependency:go-offline

# Use -Pquick to skip tests execution,
# and replace -Pquick by -Pquicknodoc to also skip Javadoc generation.




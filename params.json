{"name":"Hppc","tagline":"Fork of HPPC, originally from Carrot Search: ","body":"HPPC: High Performance Primitive Collections \"Plus\"\r\n---------------------------------------------------\r\n\r\nThis is a fork of HPPC from CarrotSearch:\r\nsee JavaDoc and documentation at: http://labs.carrotsearch.com/hppc.html for more info.\r\nIMPORTANT: Developers - read INSTALL file for proper Eclipse setup!\r\n-------------------------------------------------\r\n\r\nThis fork intend to follow the original HPPC as close as possible (currently in v0.6 dev) while \r\nadding some features which general goal is improving realtime behaviour, \r\nthat is among others to have ZERO GC at runtime.\r\n\r\nFor now, the additional features are:\r\n*************************************************\r\na) Custom HashingStrategy for HashMaps/HashSets, to override the usual equals()/hashCode(). \r\n\r\nb) Faster clear(), resize() and such, using a memcpy-like technique offering 2x speed gain in clear() like operations\r\nespecially noticable for big container sizes. (Javolution has a similar trick)\r\n\r\nc) Pooled Iterators: ability to use iterators the usual way, without creating Iterator instances\r\ndynamically at runtime. \r\nThat means in particular using the for-each construct without any dynamic allocation below.\r\n\r\nTODO:\r\nExamples for these new features...\r\n************************************************\r\n\r\nAll these new features are Unit tested, so should work reasonably well.\r\nPre-built binaries, sources and Javadoc are provided in the 'hppc/binaries' of the '0.6.x_plus' branch for convenience.\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
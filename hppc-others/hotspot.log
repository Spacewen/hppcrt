<?xml version='1.0' encoding='UTF-8'?>
<hotspot_log version='160 1' process='3012' time_ms='1299260376564'>
<vm_version>
<name>
Java HotSpot(TM) 64-Bit Server VM
</name>
<release>
17.0-b09-fastdebug
</release>
<info>
Java HotSpot(TM) 64-Bit Server VM (17.0-b09-fastdebug) for windows-amd64 JRE (1.7.0-ea-fastdebug-b83), built on Feb 11 2010 04:27:46 by &quot;java_re&quot; with MS VC++ 8.0 (VS2005)
</info>
</vm_version>
<vm_arguments>
<args>
-XX:+PrintOptoAssembly -Dfile.encoding=UTF-8 
</args>
<command>
com.carrotsearch.hppc.caliper.BenchmarkBooleanByte
</command>
<launcher>
SUN_STANDARD
</launcher>
<properties>
java.vm.specification.version=1.0
java.vm.specification.name=Java Virtual Machine Specification
java.vm.specification.vendor=Sun Microsystems Inc.
java.vm.version=17.0-b09-fastdebug
java.vm.name=Java HotSpot(TM) 64-Bit Server VM
java.vm.vendor=Sun Microsystems Inc.
java.vm.info=mixed mode, sharing
java.ext.dirs=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\ext;C:\Windows\Sun\Java\lib\ext
java.endorsed.dirs=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\endorsed
sun.boot.library.path=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\bin
java.library.path=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\bin;.;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\MiKTeX 2.8\miktex\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\tools\graphviz\bin;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\tools\doxygen\bin;C:\tools\git\cmd;D:\Program Files\TortoiseHg\;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Program Files (x86)\MiKTeX 2.8\miktex\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\tools\graphviz\bin;C:\Program Files (x86)\QuickTime\QTSystem\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\TortoiseSVN\bin;c:\tools\svn;c:\java\jdk\bin;C:\tools\bin-neutral\ant\bin;C:\tools\bin-neutral\mvn\bin;c:\tools;C:\tools\uedit;C:\tools\uedit\;c:\tools\git\cmd;c:\tools\gnuplot\bin;C:\tools\jruby\bin;c:\tools\nant\bin;C:\Users\dweiss\AppData\Roaming\MiKTeX\2.8\miktex\bin\;C:\tools\python27\;c:\tools\gpg
java.home=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre
java.class.path=D:\carrot2\carrotsearch.labs\hppc\hppc-others\target\classes;D:\carrot2\carrotsearch.labs\hppc\hppc-core\target\classes;C:\Users\dweiss\.m2\repository\com\carrotsearch\junit-benchmarks\0.2.1\junit-benchmarks-0.2.1.jar;C:\Users\dweiss\.m2\repository\junit\junit\4.7\junit-4.7.jar;C:\Users\dweiss\.m2\repository\commons-io\commons-io\2.0.1\commons-io-2.0.1.jar;C:\Users\dweiss\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\dweiss\.m2\repository\com\h2database\h2\1.2.147\h2-1.2.147.jar;C:\Users\dweiss\.m2\repository\pcj\pcj\1.2\pcj-1.2.jar;C:\Users\dweiss\.m2\repository\trove\trove\3.0.0rc1\trove-3.0.0rc1.jar;C:\Users\dweiss\.m2\repository\it\unimi\dsi\fastutil\6.1.0\fastutil-6.1.0.jar;C:\Users\dweiss\.m2\repository\com\google\code\caliper\caliper\1.0-SNAPSHOT\caliper-1.0-SNAPSHOT.jar;C:\Users\dweiss\.m2\repository\com\google\code\gson\gson\1.7-SNAPSHOT\gson-1.7-SNAPSHOT.jar;C:\Users\dweiss\.m2\repository\com\google\guava\guava\r07\guava-r07.jar;C:\Users\dweiss\.m2\repository\com\google\code\java-allocation-instrumenter\java-allocation-instrumenter\2.0\java-allocation-instrumenter-2.0.jar;C:\Users\dweiss\.m2\repository\org\apache\mahout\mahout-collections\1.0\mahout-collections-1.0.jar;C:\Users\dweiss\.m2\repository\org\apache\ant\ant\1.8.2\ant-1.8.2.jar;C:\Users\dweiss\.m2\repository\org\apache\ant\ant-launcher\1.8.2\ant-launcher-1.8.2.jar
sun.boot.class.path=C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\resources.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\rt.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\sunrsasign.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\jsse.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\jce.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\lib\charsets.jar;C:\java\sun-jdk1.7.0_ea_b83-x86_64-debug\jre\classes
file.encoding=UTF-8
sun.java.launcher=SUN_STANDARD
</properties>
</vm_arguments>
<tty>
<writer thread='3996'/>
<opto_assembly compile_id='2'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0x81000001  public 
 - name:              &apos;charAt&apos;
 - signature:         &apos;(I)C&apos;
 - max stack:         3
 - max locals:        2
 - size of params:    2
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         33
 - code start:        0x000000077ae0f270
 - code end (excl):   0x000000077ae0f291
 - method data:       0x000000077b058ce8
 - checked ex length: 0
 - linenumber start:  0x000000077ae0f291
 - localvar length:   2
 - localvar start:    0x000000077ae0f29e
#
#  char ( java/lang/String:NotNull:exact *, int )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8   : parm 1: int
# -- Old rsp -- Framesize: 48 --
#r089 rsp+44: pad2, in_preserve
#r088 rsp+40: pad2, in_preserve
#r087 rsp+36: pad2, in_preserve
#r086 rsp+32: pad2, in_preserve
#r085 rsp+28: pad2, in_preserve
#r084 rsp+24: return address
#r083 rsp+20: Fixed slot 1
#r082 rsp+16: Fixed slot 0
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N73: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B7 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #32	# Create frame
02c   	testl   R8, R8
02f   	jl,s   B7  P=0.000000 C=7534.000000
02f
031   B2: #	B7 B3 &lt;- B1  Freq: 1
031   	movl    R11, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
035   	cmpl    R8, R11
038   	jge,s   B7  P=0.000000 C=7534.000000
038
03a   B3: #	B8 B4 &lt;- B2  Freq: 0.999999
03a   	addl    R8, [RDX + #16 (8-bit)]	# int
03e   	movl    RBP, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
042   	movl    R10, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
047   	NullCheck RBP
047
047   B4: #	B6 B5 &lt;- B3  Freq: 0.999998
047   	cmpl    R8, R10	# unsigned
04a   	jnb,us  B6  P=0.000001 C=-1.000000
04a
04c   B5: #	N73 &lt;- B4  Freq: 0.999997
04c   	decode_heap_oop_not_null R10,RBP
050   	movzwl  RAX, [R10 + #16 + R8 &lt;&lt; #1]	# ushort/char
056   	addq	rsp, 32	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
061   	ret
061
062   B6: #	N73 &lt;- B4  Freq: 1.01328e-006
062   	movl    RDX, #-28	# int
067   	movl    [rsp + #0], R8	# spill
06b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::charAt @ bci:31  L[0]=_ L[1]=_ STK[0]=RBP STK[1]=rsp + #0
        # OopMap{rbp=NarrowOop off=112}
070   	INT3   ; ShouldNotReachHere
070
071   B7: #	N73 &lt;- B2 B1  Freq: 9.76837e-007
071   	movl    RDX, #7	# int
076   	movl    RBP, R8	# spill
079   	nop 	# 2 bytes pad for loops and calls
07b   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;7&apos;)
        # java.lang.String::charAt @ bci:12  L[0]=_ L[1]=RBP
        # OopMap{off=128}
080   	INT3   ; ShouldNotReachHere
080
081   B8: #	N73 &lt;- B3  Freq: 1.01328e-006
081   	movl    RDX, #-10	# int
086   	movl    RBP, R8	# spill
089   	nop 	# 2 bytes pad for loops and calls
08b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::charAt @ bci:31  L[0]=_ L[1]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=144}
090   	INT3   ; ShouldNotReachHere
090

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='1'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000008  static 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;([CII[CIII)I&apos;
 - max stack:         3
 - max locals:        13
 - size of params:    7
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670fa80
 - compiled entry     0x000000000277d411
 - code size:         166
 - code start:        0x000000077ae117b0
 - code end (excl):   0x000000077ae11856
 - method data:       0x000000077b057e78
 - checked ex length: 0
 - linenumber start:  0x000000077ae11856
 - localvar length:   13
 - localvar start:    0x000000077ae11872
#
#  int ( char[int:&gt;=0]:exact *, int, int, char[int:&gt;=0]:exact *, int, int, int )
#
#r016 rdx:rdx   : parm 0: char[int:&gt;=0]:exact *
#r004 r8   : parm 1: int
#r006 r9   : parm 2: int
#r014 rdi:rdi   : parm 3: char[int:&gt;=0]:exact *
#r018 rsi   : parm 4: int
#r010 rcx   : parm 5: int
#r091 rsp+84: pad0, owned by CALLER
#r090 rsp+80: parm 6: int
# -- Old rsp -- Framesize: 80 --
#r089 rsp+76: pad2, in_preserve
#r088 rsp+72: pad2, in_preserve
#r087 rsp+68: pad2, in_preserve
#r086 rsp+64: pad2, in_preserve
#r085 rsp+60: pad2, in_preserve
#r084 rsp+56: return address
#r083 rsp+52: Fixed slot 1
#r082 rsp+48: Fixed slot 0
#r103 rsp+44: spill
#r102 rsp+40: spill
#r101 rsp+36: spill
#r100 rsp+32: spill
#r099 rsp+28: spill
#r098 rsp+24: spill
#r097 rsp+20: spill
#r096 rsp+16: spill
#r095 rsp+12: spill
#r094 rsp+ 8: spill
#r093 rsp+ 4: spill
#r092 rsp+ 0: spill
#
abababab   N1: #	B1 &lt;- B64 B61 B65 B48 B55 B56 B57  Freq: 1
abababab
000   B1: #	B62 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang
	pushq   rbp
	subq    rsp, #64	# Create frame
00c   	movl    [rsp + #16], R8	# spill
011   	movl    RBP, RSI	# spill
013   	movl    [rsp + #0], R9	# spill
017   	movl    R11, #-1	# int
01d   	movl    RAX, [rsp + #80]	# spill
021   	cmpl    RAX, R9
024   	jge     B62  P=0.000000 C=164.000000
024
02a   B2: #	B63 B3 &lt;- B1  Freq: 1
02a   	testl   RAX, RAX
02c   	jl     B63  P=0.000000 C=164.000000
02c
032   B3: #	B48 B4 &lt;- B63 B2  Freq: 1
032   	testl   RCX, RCX
034   	je     B48  P=0.000000 C=164.000000
034
03a   B4: #	B64 B5 &lt;- B3  Freq: 0.999999
03a   	movq    R14, RDI	# spill
03d   	movl    RDI, [RDI + #12 (8-bit)]	# range
040   	NullCheck RDI
040
040   B5: #	B61 B6 &lt;- B4  Freq: 0.999998
040   	movl    RBX, RSI	# spill
042   	cmpl    RSI, RDI	# unsigned
044   	jnb,u  B61  P=0.000001 C=-1.000000
044
04a   B6: #	B47 B7 &lt;- B5  Freq: 0.999997
04a   	movl    R9, R8	# spill
04d   	addl    R9, RAX	# int
050   	movl    R11, [rsp + #0]	# spill
054   	subl    R11, RCX	# int
057   	addl    R11, R8	# int
05a   	cmpl    R9, R11
05d   	jg     B47  P=0.111736 C=1244.000000
05d
063   B7: #	B65 B8 &lt;- B6  Freq: 0.888261
063   	movzwl  R8, [R14 + #16 + RSI &lt;&lt; #1]	# ushort/char
069   	movl    RSI, [RDX + #12 (8-bit)]	# range
06c   	NullCheck RDX
06c
06c   B8: #	B23 &lt;- B7  Freq: 0.88826
06c   	jmp     B23
06c
071   B9: #	B10 &lt;- B35  Freq: 1.17149
071   	addl    RAX, #2	# int
074
074   B10: #	B14 &lt;- B33 B9  Freq: 2.55426
074   	movl    R9, RAX	# spill
077   	incl    R9	# int
07a   	jmp,s   B14
07a
07c   B11: #	B13 &lt;- B34  Freq: 1.27275
07c   	movl    R9, RAX	# spill
07f   	addl    R9, #2	# int
083   	jmp,s   B13
083
085   B12: #	B13 &lt;- B36  Freq: 1.07828
085   	addl    RAX, #2	# int
088
088   B13: #	B14 &lt;- B11 B12  Freq: 2.35103
088   	incl    RAX	# int
08a
08a   B14: #	B22 B15 &lt;- B54 B46 B10 B13  Freq: 5.79269
08a   	cmpl    RAX, R11
08d   	jg,s   B22  P=0.125678 C=1106.000000
08d
08f   B15: #	B51 B16 &lt;- B45 B14 B50  Freq: 5.79923
08f   	movl    R13, RAX	# spill
092   	addl    R13, RCX	# int
095   	cmpl    R9, R13
098   	jge     B51  P=0.026887 C=967.000000
098
09e   B16: #	B57 B17 &lt;- B15  Freq: 5.6433
09e   	movl    R10, R13	# spill
0a1   	decl    R10	# int
0a4   	cmpl    R10, RSI	# unsigned
0a7   	jnb,u  B57  P=0.000001 C=-1.000000
0a7
0ad   B17: #	B57 B18 &lt;- B16  Freq: 5.6433
0ad   	movl    R10, RBX	# spill
0b0   	subl    R10, R9	# int
0b3   	movl    RBP, R13	# spill
0b6   	addl    RBP, R10	# int
0b9   	cmpl    RBP, RDI	# unsigned
0bb   	jnb,u  B57  P=0.000001 C=-1.000000
0bb
0c1   B18: #	B19 &lt;- B17  Freq: 5.64329
0c1   	movl    RBP, R9	# spill
0c4   	movl    [rsp + #80], RDI	# spill
0c8   	movl    [rsp + #0], RSI	# spill
0c8
0cb   B19: #	B58 B20 &lt;- B18 B58 	Loop: B19-B58 inner stride: not constant  Freq: 5.6433
0cb   	movzwl  RSI, [RDX + #16 + RBP &lt;&lt; #1]	# ushort/char
0d1   	movl    RDI, RBP	# spill
0d3   	addl    RDI, R10	# int
0d6   	movslq  RDI, RDI	# i2l
0d9   	movzwl  RDI, [R14 + #18 + RDI &lt;&lt; #1]	# ushort/char
0df   	cmpl    RSI, RDI
0e1   	je     B58  P=0.000000 C=941.000000
0e1
0e7   B20: #	B52 B21 &lt;- B19  Freq: 5.64329
0e7   	cmpl    RBP, R13
0ea   	je     B52  P=0.026887 C=967.000000
0ea
0f0   B21: #	B22 &lt;- B20  Freq: 5.49156
0f0   	movl    RDI, [rsp + #80]	# spill
0f4   	movl    RSI, [rsp + #0]	# spill
0f4
0f7   B22: #	B47 B23 &lt;- B60 B21 B51 B44 B14 B25 B53  Freq: 6.55392
0f7   	testl   rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # java.lang.String::indexOf @ bci:161  L[0]=RDX L[1]=rsp + #16 L[2]=_ L[3]=R14 L[4]=RBX L[5]=RCX L[6]=_ L[7]=R8 L[8]=R11 L[9]=R9 L[10]=_ L[11]=_ L[12]=_
        # OopMap{rdx=Oop r14=Oop off=247}
0fd   	cmpl    R9, R11
100   	jg     B47  P=0.111736 C=1080.000000
100
106   B23: #	B55 B24 &lt;- B8 B22 	Loop: B23-B22  Freq: 6.70986
106   	cmpl    R9, RSI	# unsigned
109   	jnb,u  B55  P=0.000001 C=-1.000000
109
10f   B24: #	B49 B25 &lt;- B23  Freq: 6.70986
10f   	movzwl  RAX, [RDX + #16 + R9 &lt;&lt; #1]	# ushort/char
115   	movl    RBP, R9	# spill
118   	incl    RBP	# int
11a   	cmpl    RAX, R8
11d   	je     B49  P=0.103167 C=1105.000000
11d
123   B25: #	B22 B26 &lt;- B24  Freq: 6.01762
123   	addl    R9, #2	# int
127   	cmpl    RBP, R11
12a   	jg,s   B22  P=0.012799 C=10860.000000
12a
12c   B26: #	B56 B27 &lt;- B25  Freq: 5.9406
12c   	cmpl    R11, RSI	# unsigned
12f   	jnb,u  B56  P=0.000001 C=-1.000000
12f
135   B27: #	B46 B28 &lt;- B26 B29 	Loop: B27-B29 inner stride: not constant pre of N385 Freq: 11.0055
135   	movzwl  R10, [RDX + #16 + RBP &lt;&lt; #1]	# ushort/char
13b   	movl    RAX, RBP	# spill
13d   	incl    RAX	# int
13f   	cmpl    R10, R8
142   	je     B46  P=0.079563 C=10721.000000
142
148   B28: #	B30 B29 &lt;- B27  Freq: 10.1299
148   	cmpl    RAX, R9
14b   	jge,s   B30	# loop end  P=0.500000 C=9868.000000
14b
14d   B29: #	B27 &lt;- B28  Freq: 5.06495
14d   	movl    RBP, RAX	# spill
14f   	jmp,s   B27
14f
151   B30: #	B33 B31 &lt;- B28  Freq: 5.06495
151   	movl    R13, R11	# spill
154   	subl    R13, RAX	# int
157   	incl    R13	# int
15a   	andl    R13, #-4	# int
15e   	addl    R13, RAX	# int
161   	cmpl    RAX, R13
164   	jl,s   B33  P=0.999999 C=-1.000000
164
166   B31: #	B39 &lt;- B30  Freq: 5.13221e-006
166   	movl    R9, RAX	# spill
169   	movl    RAX, RBP	# spill
16b   	jmp,s   B39
      	nop 	# 3 bytes pad for loops and calls

170   B32: #	B33 &lt;- B37  top-of-loop Freq: 12.3145
170   	movl    RAX, R9	# spill
170
173   B33: #	B10 B34 &lt;- B30 B32 	Loop: B33-B32 inner stride: not constant main of N177 Freq: 17.3794
173   	movzwl  R10, [RDX + #16 + RAX &lt;&lt; #1]	# ushort/char
179   	cmpl    R10, R8
17c   	je     B10  P=0.079563 C=10721.000000
17c
182   B34: #	B11 B35 &lt;- B33  Freq: 15.9967
182   	movslq  RBP, RAX	# i2l
185   	movzwl  R9, [RDX + #18 + RBP &lt;&lt; #1]	# ushort/char
18b   	cmpl    R9, R8
18e   	je     B11  P=0.079563 C=10721.000000
18e
194   B35: #	B9 B36 &lt;- B34  Freq: 14.7239
194   	movzwl  R10, [RDX + #20 + RBP &lt;&lt; #1]	# ushort/char
19a   	cmpl    R10, R8
19d   	je     B9  P=0.079563 C=10721.000000
19d
1a3   B36: #	B12 B37 &lt;- B35  Freq: 13.5524
1a3   	movzwl  R10, [RDX + #22 + RBP &lt;&lt; #1]	# ushort/char
1a9   	movl    R9, RAX	# spill
1ac   	addl    R9, #4	# int
1b0   	cmpl    R10, R8
1b3   	je     B12  P=0.079563 C=10721.000000
1b3
1b9   B37: #	B32 B38 &lt;- B36  Freq: 12.4742
1b9   	cmpl    R9, R13
1bc   	jl,s   B32	# loop end  P=0.987201 C=9868.000000
1bc
1be   B38: #	B39 &lt;- B37  Freq: 0.15966
1be   	addl    RAX, #3	# int
1c1
1c1   B39: #	B42 B40 &lt;- B31 B38  Freq: 0.159665
1c1   	movl    RBP, R11	# spill
1c4   	incl    RBP	# int
1c6   	cmpl    R9, RBP
1c9   	jl,s   B42  P=0.500000 C=-1.000000
1c9
1cb   B40: #	B44 &lt;- B39  Freq: 0.0798326
1cb   	movl    RBP, R9	# spill
1ce   	movl    R9, RAX	# spill
1d1   	movl    RAX, RBP	# spill
1d3   	jmp,s   B44
      	nop 	# 3 bytes pad for loops and calls

1d8   B41: #	B42 &lt;- B43  top-of-loop Freq: 0.0680653
1d8   	movl    R9, RAX	# spill
1d8
1db   B42: #	B54 B43 &lt;- B39 B41 	Loop: B42-B41 inner stride: not constant post of N385 Freq: 0.147898
1db   	movzwl  R10, [RDX + #16 + R9 &lt;&lt; #1]	# ushort/char
1e1   	movl    RAX, R9	# spill
1e4   	incl    RAX	# int
1e6   	cmpl    R10, R8
1e9   	je,s   B54  P=0.079563 C=10721.000000
1e9
1eb   B43: #	B41 B44 &lt;- B42  Freq: 0.136131
1eb   	cmpl    RAX, RBP
1ed   	jl,s   B41	# loop end  P=0.500000 C=9868.000000
1ed
1ef   B44: #	B22 B45 &lt;- B43 B40  Freq: 0.147898
1ef   	addl    R9, #2	# int
1f3   	cmpl    RAX, R11
1f6   	jg     B22  P=0.125678 C=1106.000000
1f6
1fc   B45: #	B15 &lt;- B44  Freq: 0.12931
1fc   	jmp     B15
1fc
201   B46: #	B14 &lt;- B27  Freq: 0.87564
201   	movl    R9, RAX	# spill
204   	movl    RAX, RBP	# spill
206   	jmp     B14
206
20b   B47: #	B48 &lt;- B22 B6  Freq: 0.844047
20b   	movl    RAX, #-1	# int
20b
210   B48: #	N1 &lt;- B62 B3 B52 B47  Freq: 0.999973
210   	addq	rsp, 64	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
21b   	ret
21b
21c   B49: #	B53 B50 &lt;- B24  Freq: 0.692239
21c   	cmpl    R9, R11
21f   	jg,s   B53  P=0.125678 C=1106.000000
21f
221   B50: #	B15 &lt;- B49  Freq: 0.605239
221   	movl    RAX, R9	# spill
224   	movl    R9, RBP	# spill
227   	jmp     B15
227
22c   B51: #	B22 B52 &lt;- B15  Freq: 0.155926
22c   	cmpl    R9, R13
22f   	jne     B22  P=0.973113 C=967.000000
22f
235   B52: #	B48 &lt;- B59 B20 B51  Freq: 0.155925
235   	subl    RAX, [RSP + #16 (32-bit)]	# int
239   	jmp,s   B48
239
23b   B53: #	B22 &lt;- B49  Freq: 0.0869993
23b   	movl    R9, RBP	# spill
23e   	jmp     B22
23e
243   B54: #	B14 &lt;- B42  Freq: 0.0117673
243   	movl    R10, RAX	# spill
246   	movl    RAX, R9	# spill
249   	movl    R9, R10	# spill
24c   	jmp     B14
24c
251   B55: #	N1 &lt;- B23  Freq: 6.79896e-006
251   	movl    [rsp + #80], R8	# spill
256   	movq    [rsp + #8], RDX	# spill
25b   	movl    [rsp + #4], R9	# spill
260   	movq    [rsp + #24], R14	# spill
265   	movl    [rsp + #20], RBX	# spill
269   	movl    [rsp + #32], RCX	# spill
26d   	movl    [rsp + #36], R11	# spill
272   	movl    RDX, #-28	# int
277   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:63  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #36 L[9]=rsp + #4 L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #8 STK[1]=rsp + #4
        # OopMap{[8]=Oop [24]=Oop off=636}
27c   	INT3   ; ShouldNotReachHere
27c
27d   B56: #	N1 &lt;- B26  Freq: 6.01948e-006
27d   	movq    [rsp + #0], RDX	# spill
281   	movl    [rsp + #80], R8	# spill
286   	movq    [rsp + #8], R14	# spill
28b   	movl    [rsp + #20], RBX	# spill
28f   	movl    [rsp + #24], RCX	# spill
293   	movl    [rsp + #28], R11	# spill
298   	movl    RDX, #-122	# int
29d   	nop 	# 2 bytes pad for loops and calls
29f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:79  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #20 L[5]=rsp + #24 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #28 L[9]=RBP L[10]=_ L[11]=_ L[12]=_
        # OopMap{[0]=Oop [8]=Oop off=676}
2a4   	INT3   ; ShouldNotReachHere
2a4
2a5   B57: #	N1 &lt;- B17 B16  Freq: 1.14365e-005
2a5   	movl    RBP, RBX	# spill
2a7   	incl    RBP	# int
2a9   	movq    [rsp + #0], RDX	# spill
2ad   	movl    [rsp + #80], R8	# spill
2b2   	movl    [rsp + #8], RAX	# spill
2b6   	movl    [rsp + #12], R9	# spill
2bb   	movq    [rsp + #24], R14	# spill
2c0   	movl    [rsp + #20], RBX	# spill
2c4   	movl    [rsp + #32], RCX	# spill
2c8   	movl    [rsp + #36], R11	# spill
2cd   	movl    [rsp + #40], R13	# spill
2d2   	movl    RDX, #-122	# int
2d7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:126  L[0]=rsp + #0 L[1]=rsp + #16 L[2]=_ L[3]=rsp + #24 L[4]=rsp + #20 L[5]=rsp + #32 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #36 L[9]=rsp + #8 L[10]=rsp + #12 L[11]=rsp + #40 L[12]=RBP
        # OopMap{[0]=Oop [24]=Oop off=732}
2dc   	INT3   ; ShouldNotReachHere
2dc
2dd   B58: #	B19 B59 &lt;- B19  Freq: 2.69093e-006
2dd   	incl    RBP	# int
2df   	cmpl    RBP, R13
2e2   	jl     B19	# loop end  P=0.973113 C=967.000000
2e2
2e8   B59: #	B52 B60 &lt;- B58  Freq: 7.23519e-008
2e8   	cmpl    RBP, R13
2eb   	je     B52  P=0.026887 C=967.000000
2eb
2f1   B60: #	B22 &lt;- B59  Freq: 7.04066e-008
2f1   	movl    RDI, [rsp + #80]	# spill
2f5   	movl    RSI, [rsp + #0]	# spill
2f8   	jmp     B22
2f8
2fd   B61: #	N1 &lt;- B5  Freq: 1.01328e-006
2fd   	movq    RBP, RDX	# spill
300   	movl    [rsp + #80], RAX	# spill
304   	movl    [rsp + #20], RCX	# spill
308   	movq    [rsp + #24], R14	# spill
30d   	movl    [rsp + #32], RSI	# spill
311   	movl    RDX, #-28	# int
316   	nop 	# 1 bytes pad for loops and calls
317   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:36  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #0 L[3]=rsp + #24 L[4]=rsp + #32 L[5]=rsp + #20 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=rsp + #24 STK[1]=rsp + #32
        # OopMap{rbp=Oop [24]=Oop off=796}
31c   	INT3   ; ShouldNotReachHere
31c
31d   B62: #	B48 &lt;- B1  Freq: 4.76837e-007
31d   	testl   RCX, RCX
31f   	movl    RAX, R9	# spill
322   	cmovlne RAX, R11	# signed, int
326   	jmp     B48
326
32b   B63: #	B3 &lt;- B2  Freq: 4.76837e-007
32b   	xorl    RAX, RAX	# int
32d   	jmp     B3
32d
332   B64: #	N1 &lt;- B4  Freq: 1.01328e-006
332   	movl    RDX, #-10	# int
337   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:36  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ L[12]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=828}
33c   	INT3   ; ShouldNotReachHere
33c
33d   B65: #	N1 &lt;- B7  Freq: 9.00056e-007
33d   	movq    RBP, RDX	# spill
340   	movl    [rsp + #80], R8	# spill
345   	movl    [rsp + #0], R9	# spill
349   	movq    [rsp + #8], R14	# spill
34e   	movl    [rsp + #4], RBX	# spill
352   	movl    [rsp + #20], RCX	# spill
356   	movl    [rsp + #24], R11	# spill
35b   	movl    RDX, #-122	# int
360   	nop 	# 3 bytes pad for loops and calls
363   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:60  L[0]=RBP L[1]=rsp + #16 L[2]=_ L[3]=rsp + #8 L[4]=rsp + #4 L[5]=rsp + #20 L[6]=_ L[7]=rsp + #80 L[8]=rsp + #24 L[9]=rsp + #0 L[10]=_ L[11]=_ L[12]=_
        # OopMap{rbp=Oop [8]=Oop off=872}
368   	INT3   ; ShouldNotReachHere
368

</opto_assembly>
<writer thread='3996'/>
<opto_assembly compile_id='3'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;indexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        7
 - size of params:    3
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670fa28
 - compiled entry     0x000000000277c8f9
 - code size:         151
 - code start:        0x000000077ae11120
 - code end (excl):   0x000000077ae111b7
 - method data:       0x000000077b0a5158
 - checked ex length: 0
 - linenumber start:  0x000000077ae111b7
 - localvar length:   7
 - localvar start:    0x000000077ae111da
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8   : parm 1: int
#r006 r9   : parm 2: int
# -- Old rsp -- Framesize: 64 --
#r089 rsp+60: pad2, in_preserve
#r088 rsp+56: pad2, in_preserve
#r087 rsp+52: pad2, in_preserve
#r086 rsp+48: pad2, in_preserve
#r085 rsp+44: pad2, in_preserve
#r084 rsp+40: return address
#r083 rsp+36: Fixed slot 1
#r082 rsp+32: Fixed slot 0
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N775: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B28 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #48	# Create frame
02c   	movq    RBX, RDX	# spill
02f   	movl    RCX, [RDX + #16 (8-bit)]	# int ! Field java/lang/String.offset
032   	movl    R10, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
036   	movl    R11, R9	# spill
039   	testl   R9, R9
03c   	jl     B28  P=0.000000 C=259.000000
03c
042   B2: #	B21 B3 &lt;- B1  Freq: 1
042   	cmpl    R9, R10
045   	jge     B21  P=0.077220 C=259.000000
045
04b   B3: #	B4 &lt;- B2  Freq: 0.92278
04b   	addl    R11, RCX	# int
04e
04e   B4: #	B29 B5 &lt;- B3 B28  Freq: 0.92278
04e   	movl    RSI, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
052   	movl    R9, RCX	# spill
055   	addl    R9, R10	# int
058   	movl    RDI, R11	# spill
05b   	incl    RDI	# int
05d   	movl    RBP, R9	# spill
060   	decl    RBP	# int
062   	cmpl    R8, #65536
069   	jge     B29  P=0.000000 C=239.000000
069
06f   B5: #	B22 B6 &lt;- B4  Freq: 0.92278
06f   	cmpl    R11, R9
072   	jge     B22  P=0.029315 C=8187.000000
072
078   B6: #	B27 B7 &lt;- B5  Freq: 0.895729
078   	movl    RDX, [R12 + RSI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
07d   	NullCheck RSI
07d
07d   B7: #	B27 B8 &lt;- B6  Freq: 0.895728
07d   	cmpl    RBP, RDX	# unsigned
07f   	jnb,u  B27  P=0.000001 C=-1.000000
07f
085   B8: #	B9 &lt;- B7  Freq: 0.895727
085   	decode_heap_oop_not_null RBX,RSI
089   	movl    R10, #-1	# int
089
08f   B9: #	B26 B10 &lt;- B8 B10 	Loop: B9-B10 inner stride: not constant pre of N393 Freq: 1.79145
08f   	movzwl  RSI, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
095   	cmpl    RSI, R8
098   	je     B26  P=0.000000 C=7947.000000
098
09e   B10: #	B9 B11 &lt;- B9  Freq: 1.79145
09e   	incl    R11	# int
0a1   	cmpl    R11, RDI
0a4   	jl,s   B9	# loop end  P=0.500000 C=7947.000000
0a4
0a6   B11: #	B17 B12 &lt;- B10  Freq: 0.895726
0a6   	movl    RDI, R9	# spill
0a9   	subl    RDI, R11	# int
0ac   	andl    RDI, #-4	# int
0af   	addl    RDI, R11	# int
0b2   	cmpl    R11, RDI
0b5   	jge,s   B17  P=0.000001 C=-1.000000
      	nop 	# 9 bytes pad for loops and calls

0c0   B12: #	B26 B13 &lt;- B11 B16 	Loop: B12-B16 inner stride: not constant main of N101 Freq: 30.5535
0c0   	movzwl  RSI, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
0c6   	cmpl    RSI, R8
0c9   	je     B26  P=0.000000 C=7947.000000
0c9
0cf   B13: #	B24 B14 &lt;- B12  Freq: 30.5535
0cf   	movslq  RDX, R11	# i2l
0d2   	movzwl  RAX, [RBX + #18 + RDX &lt;&lt; #1]	# ushort/char
0d7   	cmpl    RAX, R8
0da   	je,s   B24  P=0.000000 C=7947.000000
0da
0dc   B14: #	B25 B15 &lt;- B13  Freq: 30.5535
0dc   	movzwl  RAX, [RBX + #20 + RDX &lt;&lt; #1]	# ushort/char
0e1   	cmpl    RAX, R8
0e4   	je,s   B25  P=0.000000 C=7947.000000
0e4
0e6   B15: #	B23 B16 &lt;- B14  Freq: 30.5535
0e6   	movzwl  RSI, [RBX + #22 + RDX &lt;&lt; #1]	# ushort/char
0ec   	cmpl    RSI, R8
0ef   	je,s   B23  P=0.000000 C=7947.000000
0ef
0f1   B16: #	B12 B17 &lt;- B15  Freq: 30.5534
0f1   	addl    R11, #4	# int
0f5   	cmpl    R11, RDI
0f8   	jl,s   B12	# loop end  P=0.970685 C=7947.000000
0f8
0fa   B17: #	B20 B18 &lt;- B11 B16  Freq: 0.895668
0fa   	cmpl    R11, R9
0fd   	jge,s   B20  P=0.500000 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

100   B18: #	B26 B19 &lt;- B17 B19 	Loop: B18-B19 inner stride: not constant post of N393 Freq: 0.895667
100   	movzwl  RDX, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
106   	cmpl    RDX, R8
109   	je,s   B26  P=0.000000 C=7947.000000
109
10b   B19: #	B18 B20 &lt;- B18  Freq: 0.895667
10b   	incl    R11	# int
10e   	cmpl    R11, R9
111   	jl,s   B18	# loop end  P=0.500000 C=7947.000000
111
113   B20: #	N775 &lt;- B21 B26 B17 B22 B19 B62 B75 B56 B76 B81 B44 B57 B80 B82 B37 B38  Freq: 0.999998
113   	movl    RAX, R10	# spill
116   	addq	rsp, 48	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
121   	ret
121
122   B21: #	B20 &lt;- B2  Freq: 0.07722
122   	movl    R10, #-1	# int
128   	jmp,s   B20
128
12a   B22: #	B20 &lt;- B5  Freq: 0.0270511
12a   	movl    R10, #-1	# int
130   	jmp,s   B20
130
132   B23: #	B24 &lt;- B15  Freq: 1.4569e-005
132   	addl    R11, #2	# int
136
136   B24: #	B26 &lt;- B13 B23  Freq: 2.91381e-005
136   	incl    R11	# int
139   	jmp,s   B26
139
13b   B25: #	B26 &lt;- B14  Freq: 1.4569e-005
13b   	addl    R11, #2	# int
13f
13f   B26: #	B20 &lt;- B18 B9 B12 B25 B24  Freq: 5.95575e-005
13f   	movl    R10, R11	# spill
142   	subl    R10, RCX	# int
145   	jmp,s   B20
145
147   B27: #	N775 &lt;- B7 B6  Freq: 1.81524e-006
147   	movl    RDX, #-122	# int
14c   	movl    RBP, R8	# spill
14f   	movl    [rsp + #0], R11	# spill
153   	movq    [rsp + #8], RBX	# spill
158   	movl    [rsp + #4], R9	# spill
15d   	movl    [rsp + #16], RSI	# spill
161   	nop 	# 2 bytes pad for loops and calls
163   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:55  L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #4 L[4]=rsp + #16 L[5]=rsp + #0 L[6]=_
        # OopMap{[8]=Oop [16]=NarrowOop off=360}
168   	INT3   ; ShouldNotReachHere
168
169   B28: #	B4 &lt;- B1  Freq: 4.76837e-007
169   	movl    R11, RCX	# spill
16c   	jmp     B4
16c
171   B29: #	B38 B30 &lt;- B4  Freq: 4.40016e-007
171   	cmpl    R8, #1114111
178   	jg     B38  P=0.500000 C=-1.000000
178
17e   B30: #	B88 B31 &lt;- B29  Freq: 2.20008e-007
17e   	movl    [rsp + #20], RDI	# spill
182   	movl    [rsp + #16], R9	# spill
187   	movl    [rsp + #4], RSI	# spill
18b   	movq    [rsp + #8], RDX	# spill
190   	movl    [rsp + #0], R11	# spill
194   	movl    RDX, R8	# spill
197   	call,static  java.lang.Character::toChars
        # java.lang.String::indexOf @ bci:87  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #16 L[4]=rsp + #4 L[5]=rsp + #0 L[6]=_
        # OopMap{[4]=NarrowOop [8]=Oop off=412}
19c
19c   B31: #	B37 B32 &lt;- B30  Freq: 2.20003e-007
        # Block is sole successor of call
19c   	movl    RCX, [rsp + #0]	# spill
19f   	cmpl    RCX, [RSP + #16 (32-bit)]
1a3   	jge,s   B37  P=0.500000 C=-1.000000
1a3
1a5   B32: #	B83 B33 &lt;- B31  Freq: 1.10002e-007
1a5   	movl    R14, [rsp + #4]	# spill
1aa   	movl    RDI, [R12 + R14 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
1af   	NullCheck R14
1af
1af   B33: #	B84 B34 &lt;- B32  Freq: 1.10002e-007
1af   	cmpl    RBP, RDI	# unsigned
1b1   	jnb,u  B84  P=0.000001 C=-1.000000
1b1
1b7   B34: #	B85 B35 &lt;- B33  Freq: 1.10002e-007
1b7   	movq    R13, RAX	# spill
1ba   	movl    R11, [RAX + #12 (8-bit)]	# range
1be   	NullCheck RAX
1be
1be   B35: #	B85 B36 &lt;- B34  Freq: 1.10001e-007
1be   	cmpl    R11, #1	# unsigned
1c2   	jbe,u  B85  P=0.000001 C=-1.000000
1c2
1c8   B36: #	B40 &lt;- B35  Freq: 1.10001e-007
1c8   	movzwl  R9, [RAX + #18 (8-bit)]	# ushort/char
1cd   	movzwl  RBX, [RAX + #16 (8-bit)]	# ushort/char
1d1   	movl    R8, [rsp + #20]	# spill
1d6   	movl    R11, #-1	# int
1dc   	cmpl    R8, R11
1df   	movl    R10, #-1	# int
1e5   	cmovllt R8, R10	# max
1e9   	cmpl    R8, [RSP + #16 (32-bit)]
1ee   	movl    RSI, [rsp + #16]	# spill
1f2   	cmovlgt R8, RSI	# min
1f6   	decode_heap_oop_not_null R11,R14
1fa   	jmp,s   B40
1fa
1fc   B37: #	B20 &lt;- B31  Freq: 1.10002e-007
1fc   	movl    R10, #-1	# int
202   	jmp     B20
202
207   B38: #	B20 &lt;- B29  Freq: 2.20008e-007
207   	movl    R10, #-1	# int
20d   	jmp     B20
      	nop 	# 2 bytes pad for loops and calls

214   B39: #	B40 &lt;- B41  top-of-loop Freq: 8.29377e-007
214   	movl    RCX, RBP	# spill
214
216   B40: #	B44 B41 &lt;- B36 B39 	Loop: B40-B39 inner stride: not constant pre of N379 Freq: 9.39378e-007
216   	movzwl  RDX, [R11 + #16 + RCX &lt;&lt; #1]	# ushort/char
21c   	movl    RBP, RCX	# spill
21e   	incl    RBP	# int
220   	cmpl    RDX, RBX
222   	je,s   B44  P=0.100000 C=-1.000000
222
224   B41: #	B39 B42 &lt;- B46 B40  Freq: 9.2153e-007
224   	cmpl    RBP, R8
227   	jl,s   B39	# loop end  P=0.900000 C=-1.000000
227
229   B42: #	B55 B43 &lt;- B41  Freq: 9.2153e-008
229   	movl    RDX, RDI	# spill
22b   	decl    RDX	# int
22d   	cmpl    RDX, RSI
22f   	cmovlgt RDX, RSI	# min
232   	subl    RDX, RBP	# int
234   	andl    RDX, #-2	# int
237   	movl    R8, RDX	# spill
23a   	incl    R8	# int
23d   	sarl    R8, #31
241   	shrl    R8, #31
245   	addl    R8, RDX	# int
248   	incl    R8	# int
24b   	andl    R8, #-4	# int
24f   	movl    RDX, R8	# spill
252   	addl    RDX, #3	# int
255   	sarl    RDX, #31
258   	shrl    RDX, #30
25b   	addl    RDX, R8	# int
25e   	addl    RDX, #3	# int
261   	andl    RDX, #-4	# int
264   	addl    RDX, RBP	# int
266   	cmpl    RBP, RDX
268   	jge     B55  P=0.000001 C=-1.000000
268
26e   B43: #	B49 &lt;- B42  Freq: 9.21529e-008
26e   	jmp,s   B49
26e
270   B44: #	B20 B45 &lt;- B40  Freq: 9.39378e-008
270   	cmpl    RBP, RSI
272   	je     B20  P=0.100000 C=-1.000000
272
278   B45: #	B86 B46 &lt;- B44  Freq: 8.45441e-008
278   	cmpl    RBP, RDI	# unsigned
27a   	jnb,u  B86  P=0.000001 C=-1.000000
27a
280   B46: #	B41 B47 &lt;- B45  Freq: 8.4544e-008
280   	movslq  RDX, RCX	# i2l
283   	movzwl  RDX, [R11 + #18 + RDX &lt;&lt; #1]	# ushort/char
289   	cmpl    RDX, R9
28c   	jne,s   B41  P=0.900000 C=-1.000000
28c
28e   B47: #	B61 &lt;- B46  Freq: 8.4544e-009
28e   	jmp     B61
      	nop 	# 13 bytes pad for loops and calls

2a0   B48: #	B49 &lt;- B53  top-of-loop Freq: 4.614e-007
2a0   	movl    R10, [rsp + #0]	# spill
2a0
2a4   B49: #	B57 B50 &lt;- B43 B48 	Loop: B49-B48 inner stride: not constant main of N299 Freq: 5.53553e-007
2a4   	movzwl  R8, [R11 + #16 + RBP &lt;&lt; #1]	# ushort/char
2aa   	movslq  RAX, RBP	# i2l
2ad   	movl    RCX, RBP	# spill
2af   	incl    RCX	# int
2b1   	cmpl    R8, RBX
2b4   	je,s   B57  P=0.100000 C=-1.000000
2b4
2b6   B50: #	B63 B51 &lt;- B58 B49  Freq: 5.43036e-007
2b6   	movl    [rsp + #0], R10	# spill
2ba   	movzwl  R8, [R11 + #18 + RAX &lt;&lt; #1]	# ushort/char
2c0   	movl    R10, RBP	# spill
2c3   	addl    R10, #2	# int
2c7   	cmpl    R8, RBX
2ca   	je,s   B63  P=0.100000 C=-1.000000
2ca
2cc   B51: #	B66 B52 &lt;- B64 B50  Freq: 5.32718e-007
2cc   	movzwl  R8, [R11 + #20 + RAX &lt;&lt; #1]	# ushort/char
2d2   	movl    RCX, RBP	# spill
2d4   	addl    RCX, #3	# int
2d7   	cmpl    R8, RBX
2da   	je,s   B66  P=0.100000 C=-1.000000
2da
2dc   B52: #	B69 B53 &lt;- B67 B51  Freq: 5.22597e-007
2dc   	movzwl  R10, [R11 + #22 + RAX &lt;&lt; #1]	# ushort/char
2e2   	addl    RBP, #4	# int
2e5   	cmpl    R10, RBX
2e8   	je     B69  P=0.100000 C=-1.000000
2e8
2ee   B53: #	B48 B54 &lt;- B70 B52  Freq: 5.12667e-007
2ee   	cmpl    RBP, RDX
2f0   	jl,s   B48	# loop end  P=0.900000 C=-1.000000
2f0
2f2   B54: #	B55 &lt;- B53  Freq: 5.12667e-008
2f2   	movl    R10, [rsp + #0]	# spill
2f2
2f6   B55: #	B73 B56 &lt;- B42 B54  Freq: 5.12668e-008
2f6   	cmpl    RBP, RSI
2f8   	jl     B73  P=0.500000 C=-1.000000
2f8
2fe   B56: #	B20 &lt;- B55  Freq: 2.56334e-008
2fe   	jmp     B20
2fe
303   B57: #	B20 B58 &lt;- B49  Freq: 5.53554e-008
303   	cmpl    RCX, RSI
305   	je     B20  P=0.100000 C=-1.000000
305
30b   B58: #	B50 B59 &lt;- B57  Freq: 4.98198e-008
30b   	movzwl  R8, [R11 + #18 + RAX &lt;&lt; #1]	# ushort/char
311   	cmpl    R8, R9
314   	jne,s   B50  P=0.900000 C=-1.000000
314
316   B59: #	B60 &lt;- B58  Freq: 4.98198e-009
316   	movl    R10, RBP	# spill
316
319   B60: #	B61 &lt;- B59 B68  Freq: 9.77645e-009
319   	movl    RCX, R10	# spill
319
31c   B61: #	B62 &lt;- B47 B60 B65 B71  Freq: 2.78215e-008
31c   	movl    RBP, RCX	# spill
31c
31e   B62: #	B20 &lt;- B79 B61  Freq: 2.97917e-008
31e   	movq    R8, [rsp + #8]	# spill
323   	movl    R10, RBP	# spill
326   	subl    R10, [R8 + #16 (8-bit)]	# int
32a   	jmp     B20
32a
32f   B63: #	B80 B64 &lt;- B50  Freq: 5.43036e-008
32f   	cmpl    R10, RSI
332   	je     B80  P=0.100000 C=-1.000000
332
338   B64: #	B51 B65 &lt;- B63  Freq: 4.88732e-008
338   	movzwl  R8, [R11 + #20 + RAX &lt;&lt; #1]	# ushort/char
33e   	cmpl    R8, R9
341   	jne     B51  P=0.900000 C=-1.000000
341
347   B65: #	B61 &lt;- B64  Freq: 4.88732e-009
347   	jmp,s   B61
347
349   B66: #	B81 B67 &lt;- B51  Freq: 5.32718e-008
349   	cmpl    RCX, RSI
34b   	je     B81  P=0.100000 C=-1.000000
34b
351   B67: #	B52 B68 &lt;- B66  Freq: 4.79446e-008
351   	movzwl  R8, [R11 + #22 + RAX &lt;&lt; #1]	# ushort/char
357   	cmpl    R8, R9
35a   	jne     B52  P=0.900000 C=-1.000000
35a
360   B68: #	B60 &lt;- B67  Freq: 4.79447e-009
360   	jmp,s   B60
360
362   B69: #	B82 B70 &lt;- B52  Freq: 5.22597e-008
362   	cmpl    RBP, RSI
364   	je,s   B82  P=0.100000 C=-1.000000
364
366   B70: #	B53 B71 &lt;- B69  Freq: 4.70337e-008
366   	movzwl  R10, [R11 + #24 + RAX &lt;&lt; #1]	# ushort/char
36c   	cmpl    R10, R9
36f   	jne     B53  P=0.900000 C=-1.000000
36f
375   B71: #	B61 &lt;- B70  Freq: 4.70337e-009
375   	jmp,s   B61
      	nop 	# 1 bytes pad for loops and calls

378   B72: #	B73 &lt;- B74  top-of-loop Freq: 1.93268e-007
378   	movl    RBP, RCX	# spill
378
37a   B73: #	B76 B74 &lt;- B55 B72 	Loop: B73-B72 inner stride: not constant post of N379 Freq: 2.18902e-007
37a   	movzwl  R8, [R11 + #16 + RBP &lt;&lt; #1]	# ushort/char
380   	movl    RCX, RBP	# spill
382   	incl    RCX	# int
384   	cmpl    R8, RBX
387   	je,s   B76  P=0.100000 C=-1.000000
387
389   B74: #	B72 B75 &lt;- B78 B73  Freq: 2.14743e-007
389   	cmpl    RCX, RSI
38b   	jl,s   B72	# loop end  P=0.900000 C=-1.000000
38b
38d   B75: #	B20 &lt;- B74  Freq: 2.14743e-008
38d   	jmp     B20
38d
392   B76: #	B20 B77 &lt;- B73  Freq: 2.18902e-008
392   	cmpl    RCX, RSI
394   	je     B20  P=0.100000 C=-1.000000
394
39a   B77: #	B87 B78 &lt;- B76  Freq: 1.97012e-008
39a   	cmpl    RCX, RDI	# unsigned
39c   	jnb,us  B87  P=0.000001 C=-1.000000
39c
39e   B78: #	B74 B79 &lt;- B77  Freq: 1.97011e-008
39e   	movslq  R8, RBP	# i2l
3a1   	movzwl  RDX, [R11 + #18 + R8 &lt;&lt; #1]	# ushort/char
3a7   	cmpl    RDX, R9
3aa   	jne,s   B74  P=0.900000 C=-1.000000
3aa
3ac   B79: #	B62 &lt;- B78  Freq: 1.97011e-009
3ac   	jmp     B62
3ac
3b1   B80: #	B20 &lt;- B63  Freq: 5.43036e-009
3b1   	movl    R10, [rsp + #0]	# spill
3b5   	jmp     B20
3b5
3ba   B81: #	B20 &lt;- B66  Freq: 5.32718e-009
3ba   	movl    R10, [rsp + #0]	# spill
3be   	jmp     B20
3be
3c3   B82: #	B20 &lt;- B69  Freq: 5.22597e-009
3c3   	movl    R10, [rsp + #0]	# spill
3c7   	jmp     B20
3c7
3cc   B83: #	B85 &lt;- B32  Freq: 1.11462e-013
3cc   	movq    R13, RAX	# spill
3cf   	jmp,s   B85
3cf
3d1   B84: #	B85 &lt;- B33  Freq: 1.11462e-013
3d1   	movq    R13, RAX	# spill
3d1
3d4   B85: #	N775 &lt;- B35 B83 B84 B34  Freq: 4.44388e-013
3d4   	movl    RDX, #-122	# int
3d9   	movl    RBP, RCX	# spill
3db   	movq    [rsp + #24], R13	# spill
3e0   	nop 	# 3 bytes pad for loops and calls
3e3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::indexOf @ bci:98  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #16 L[4]=rsp + #4 L[5]=RBP L[6]=rsp + #24
        # OopMap{[4]=NarrowOop [8]=Oop [24]=Oop off=1000}
3e8   	INT3   ; ShouldNotReachHere
3e8
3e9   B86: #	B87 &lt;- B45  Freq: 8.56667e-014
3e9   	movl    R10, RBP	# spill
3ec   	movl    RBP, RCX	# spill
3ee   	movl    RCX, R10	# spill
3ee
3f1   B87: #	N775 &lt;- B77 B86  Freq: 1.05629e-013
3f1   	movl    RDX, #-28	# int
3f6   	movl    [rsp + #0], RSI	# spill
3f9   	movq    [rsp + #16], R13	# spill
3fe   	movl    [rsp + #24], R14	# spill
403   	movl    [rsp + #28], RCX	# spill
407   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::indexOf @ bci:127  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=rsp + #24 L[5]=RBP L[6]=rsp + #16 STK[0]=rsp + #24 STK[1]=rsp + #28
        # OopMap{[8]=Oop [16]=Oop [24]=NarrowOop off=1036}
40c   	INT3   ; ShouldNotReachHere
40c
40d   B88: #	N775 &lt;- B30  Freq: 2.20008e-012
40d   	# exception oop is in rax; no code emitted
40d   	movq    RDX, RAX	# spill
410   	addq	rsp, 48	# Destroy frame
	popq	rbp

415   	jmp     rethrow_stub
415

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='4'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;hashCode&apos;
 - signature:         &apos;()I&apos;
 - max stack:         3
 - max locals:        6
 - size of params:    1
 - method size:       15
 - vtable index:      3
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f450
 - compiled entry     0x000000000276e831
 - code size:         60
 - code start:        0x000000077ae10ee0
 - code end (excl):   0x000000077ae10f1c
 - method data:       0x000000077b058c08
 - checked ex length: 0
 - linenumber start:  0x000000077ae10f1c
 - localvar length:   6
 - localvar start:    0x000000077ae10f2e
#
#  int ( java/lang/String:NotNull:exact * )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
# -- Old rsp -- Framesize: 48 --
#r089 rsp+44: pad2, in_preserve
#r088 rsp+40: pad2, in_preserve
#r087 rsp+36: pad2, in_preserve
#r086 rsp+32: pad2, in_preserve
#r085 rsp+28: pad2, in_preserve
#r084 rsp+24: return address
#r083 rsp+20: Fixed slot 1
#r082 rsp+16: Fixed slot 0
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N234: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B18 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #32	# Create frame
02c   	movq    RDI, RDX	# spill
02f   	movl    RAX, [RDX + #24 (8-bit)]	# int ! Field java/lang/String.hash
032   	testl   RAX, RAX
034   	jne     B18  P=0.460227 C=352.000000
034
03a   B2: #	B19 B3 &lt;- B1  Freq: 0.539773
03a   	movl    R13, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
03e   	xorl    R10, R10	# int
041   	testl   R13, R13
044   	jle     B19  P=0.024119 C=7919.000000
044
04a   B3: #	B20 B4 &lt;- B2  Freq: 0.526754
04a   	movl    R8, [RDX + #16 (8-bit)]	# int ! Field java/lang/String.offset
04e   	movl    RBP, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
052   	movl    R9, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
057   	NullCheck RBP
057
057   B4: #	B20 B5 &lt;- B3  Freq: 0.526753
057   	movl    RBX, R8	# spill
05a   	addl    RBX, R13	# int
05d   	decl    RBX	# int
05f   	cmpl    RBX, R9	# unsigned
062   	jnb,u  B20  P=0.000001 C=-1.000000
062
068   B5: #	B6 &lt;- B4  Freq: 0.526753
068   	decode_heap_oop_not_null RBX,RBP
06c   	xorl    RCX, RCX	# int
06e
06e   B6: #	B8 B7 &lt;- B5 B7 	Loop: B6-B7 inner stride: not constant pre of N156 Freq: 1.05351
06e   	movl    R9, R10	# spill
071   	addl    R9, R8	# int
074   	movzwl  R11, [RBX + #16 + R9 &lt;&lt; #1]	# ushort/char
07a   	addl    RCX, R11	# int
07d   	incl    R10	# int
080   	movl    R9, RCX	# spill
083   	sall    R9, #5
087   	cmpl    R10, #1
08b   	jge,s   B8	# loop end  P=0.500000 C=7728.000000
08b
08d   B7: #	B6 &lt;- B6  Freq: 0.526753
08d   	subl    R9, RCX	# int
090   	movl    RCX, R9	# spill
093   	jmp,s   B6
093
095   B8: #	B15 B9 &lt;- B6  Freq: 0.526753
095   	movl    RSI, R13	# spill
098   	subl    RSI, R10	# int
09b   	andl    RSI, #-4	# int
09e   	addl    RSI, R10	# int
0a1   	cmpl    R10, RSI
0a4   	jge     B15  P=0.000001 C=-1.000000
0a4
0aa   B9: #	B14 &lt;- B8  Freq: 0.526752
0aa   	jmp,s   B14
0aa
0ac   B10: #	B11 &lt;- B11  Freq: 0.263376
0ac   	movl    RCX, RAX	# spill
0ac
0ae   B11: #	B10 B12 &lt;- B15 B10 	Loop: B11-B10 inner stride: not constant post of N156 Freq: 0.526753
0ae   	movl    R11, R10	# spill
0b1   	addl    R11, R8	# int
0b4   	movzwl  R11, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
0ba   	movl    RAX, RCX	# spill
0bc   	sall    RAX, #5
0bf   	subl    RAX, RCX	# int
0c1   	addl    RAX, R11	# int
0c4   	incl    R10	# int
0c7   	cmpl    R10, R13
0ca   	jl,s   B10	# loop end  P=0.500000 C=7728.000000
0ca
0cc   B12: #	B17 &lt;- B11  Freq: 0.263376
0cc   	jmp     B17
0cc
0d1   B13: #	B14 &lt;- B14  top-of-loop Freq: 21.3128
0d1   	movl    R9, RCX	# spill
0d4   	sall    R9, #5
0d8
0d8   B14: #	B13 B15 &lt;- B9 B13 	Loop: B14-B13 inner stride: not constant main of N74 Freq: 21.8395
0d8   	subl    R9, RCX	# int
0db   	movl    R11, R10	# spill
0de   	addl    R11, R8	# int
0e1   	movzwl  RCX, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
0e7   	addl    R9, RCX	# int
0ea   	addl    R10, #4	# int
0ee   	movl    RDX, R9	# spill
0f1   	sall    RDX, #5
0f4   	subl    RDX, R9	# int
0f7   	movl    RAX, R11	# spill
0fa   	addl    RAX, #2	# int
0fd   	movslq  R9, R11	# i2l
100   	movzwl  R11, [RBX + #18 + R9 &lt;&lt; #1]	# ushort/char
106   	movzwl  RCX, [RBX + #20 + R9 &lt;&lt; #1]	# ushort/char
10c   	addl    RDX, R11	# int
10f   	movslq  R11, RAX	# i2l
112   	movzwl  R9, [RBX + #18 + R11 &lt;&lt; #1]	# ushort/char
118   	movl    R11, RDX	# spill
11b   	sall    R11, #5
11f   	subl    R11, RDX	# int
122   	addl    R11, RCX	# int
125   	movl    RCX, R11	# spill
128   	sall    RCX, #5
12b   	subl    RCX, R11	# int
12e   	addl    RCX, R9	# int
131   	cmpl    R10, RSI
134   	jl,s   B13	# loop end  P=0.975881 C=7728.000000
134
136   B15: #	B11 B16 &lt;- B8 B14  Freq: 0.526753
136   	cmpl    R10, R13
139   	jl     B11  P=0.500000 C=-1.000000
139
13f   B16: #	B17 &lt;- B15  Freq: 0.263376
13f   	movl    RAX, RCX	# spill
13f
141   B17: #	B18 &lt;- B12 B16 B19  Freq: 0.539772
141   	movl    [RDI + #24 (8-bit)], RAX	# int ! Field java/lang/String.hash
141
144   B18: #	N234 &lt;- B17 B1  Freq: 0.999999
144   	addq	rsp, 32	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
14f   	ret
14f
150   B19: #	B17 &lt;- B2  Freq: 0.0130189
150   	xorl    RAX, RAX	# int
152   	jmp,s   B17
152
154   B20: #	N234 &lt;- B4 B3  Freq: 1.0675e-006
154   	movl    RDX, #-122	# int
159   	movl    [rsp + #0], R8	# spill
15d   	movq    [rsp + #8], RDI	# spill
162   	movl    [rsp + #4], R13	# spill
167   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::hashCode @ bci:35  L[0]=rsp + #8 L[1]=#0 L[2]=rsp + #0 L[3]=RBP L[4]=rsp + #4 L[5]=#0
        # OopMap{rbp=NarrowOop [8]=Oop off=364}
16c   	INT3   ; ShouldNotReachHere
16c

</opto_assembly>
<writer thread='3996'/>
<opto_assembly compile_id='5'>
{method} 
 - klass: {other class}
 - method holder:     &apos;sun/nio/cs/UTF_8$Encoder&apos;
 - constants:         0x00000000088cffa0constant pool [174] for &apos;sun/nio/cs/UTF_8$Encoder&apos;
 - access:            0xc1000002  private 
 - name:              &apos;encodeArrayLoop&apos;
 - signature:         &apos;(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;&apos;
 - max stack:         5
 - max locals:        12
 - size of params:    3
 - method size:       15
 - vtable index:      18
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f660
 - compiled entry     0x00000000027759f9
 - code size:         489
 - code start:        0x000000077af9cca8
 - code end (excl):   0x000000077af9ce91
 - method data:       0x000000077b0efa00
 - checked ex length: 0
 - linenumber start:  0x000000077af9ce91
 - localvar length:   12
 - localvar start:    0x000000077af9cec6
#
#  java/nio/charset/CoderResult * ( sun/nio/cs/UTF_8$Encoder:NotNull *, java/nio/HeapCharBuffer *, java/nio/ByteBuffer * )
#
#r016 rdx:rdx   : parm 0: sun/nio/cs/UTF_8$Encoder:NotNull *
#r004 r8:r8   : parm 1: java/nio/HeapCharBuffer *
#r006 r9:r9   : parm 2: java/nio/ByteBuffer *
# -- Old rsp -- Framesize: 144 --
#r089 rsp+140: pad2, in_preserve
#r088 rsp+136: pad2, in_preserve
#r087 rsp+132: pad2, in_preserve
#r086 rsp+128: pad2, in_preserve
#r085 rsp+124: pad2, in_preserve
#r084 rsp+120: return address
#r083 rsp+116: Fixed slot 1
#r082 rsp+112: Fixed slot 0
#r117 rsp+108: spill
#r116 rsp+104: spill
#r115 rsp+100: spill
#r114 rsp+96: spill
#r113 rsp+92: spill
#r112 rsp+88: spill
#r111 rsp+84: spill
#r110 rsp+80: spill
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N1184: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B93 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #128	# Create frame
02f   	movq    [rsp + #16], R9	# spill
034   	movq    [rsp + #8], RDX	# spill
039   	movq    R10, R8	# spill
03c   	movl    R11, [R8 + #44 (8-bit)]	# compressed ptr ! Field java/nio/CharBuffer.hb
040   	NullCheck R8
040
040   B2: #	B94 B3 &lt;- B1  Freq: 0.999999
040   	movl    [rsp + #100], R11	# spill
045   	movl    RDI, [R12 + R11 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
04a   	NullCheck R11
04a
04a   B3: #	B52 B4 &lt;- B2  Freq: 0.999998
04a   	movzbl  R11, [R8 + #40 (8-bit)]	# ubyte ! Field java/nio/CharBuffer.isReadOnly
04f   	testl   R11, R11
052   	jne     B52  P=0.000001 C=-1.000000
052
058   B4: #	B95 B5 &lt;- B3  Freq: 0.999997
058   	movl    R8, [R9 + #44 (8-bit)]	# compressed ptr ! Field java/nio/ByteBuffer.hb
05c   	NullCheck R9
05c
05c   B5: #	B96 B6 &lt;- B4  Freq: 0.999996
05c   	movl    [rsp + #104], R8	# spill
061   	movl    RDX, [R10 + #24 (8-bit)]	# int ! Field java/nio/Buffer.position
065   	movl    R9, [R10 + #28 (8-bit)]	# int ! Field java/nio/Buffer.limit
069   	movl    R14, [R10 + #36 (8-bit)]	# int ! Field java/nio/CharBuffer.offset
06d   	movl    R11, R14	# spill
070   	addl    R11, RDX	# int
073   	addl    R14, R9	# int
076   	movl    R13, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
07b   	NullCheck R8
07b
07b   B6: #	B53 B7 &lt;- B5  Freq: 0.999995
07b   	movq    R8, [rsp + #16]	# spill
080   	movzbl  R8, [R8 + #40 (8-bit)]	# ubyte ! Field java/nio/ByteBuffer.isReadOnly
085   	testl   R8, R8
088   	jne     B53  P=0.000001 C=-1.000000
088
08e   B7: #	B39 B8 &lt;- B6  Freq: 0.999994
08e   	movq    R8, [rsp + #16]	# spill
093   	movl    RBX, [R8 + #24 (8-bit)]	# int ! Field java/nio/Buffer.position
097   	movl    R8, [R8 + #28 (8-bit)]	# int ! Field java/nio/Buffer.limit
09b   	subl    R9, RDX	# int
09e   	movl    RDX, R8	# spill
0a1   	subl    RDX, RBX	# int
0a3   	movq    RCX, [rsp + #16]	# spill
0a8   	movl    RAX, [RCX + #36 (8-bit)]	# int ! Field java/nio/ByteBuffer.offset
0ab   	cmpl    R9, RDX
0ae   	cmovll RDX, R9	# signed, int
0b2   	movl    RCX, RAX	# spill
0b4   	addl    RCX, R8	# int
0b7   	addl    RAX, RBX	# int
0b9   	movl    [rsp + #0], RAX	# spill
0bc   	movl    RSI, RAX	# spill
0be   	addl    RSI, RDX	# int
0c0   	movl    R9, [rsp + #100]	# spill
0c5   	decode_heap_oop_not_null RBX,R9
0c9   	movl    R8, [rsp + #104]	# spill
0ce   	decode_heap_oop_not_null R8,R8
0d2   	movq    [rsp + #56], R8	# spill
0d7   	cmpl    RAX, RSI
0d9   	jge     B39  P=0.023335 C=8785.000000
0d9
0df   B8: #	B56 B9 &lt;- B7  Freq: 0.976659
0df   	movl    R8, R11	# spill
0e2   	addl    R8, RDX	# int
0e5   	decl    R8	# int
0e8   	cmpl    R8, RDI	# unsigned
0eb   	jnb,u  B56  P=0.000001 C=-1.000000
0eb
0f1   B9: #	B10 &lt;- B8  Freq: 0.976658
0f1   	subl    R11, RAX	# int
0f4   	incl    RAX	# int
0f6   	xorl    R9, R9	# int
0f9   	cmpl    RAX, R9
0fc   	cmovllt RAX, R9	# max
100   	movq    [rsp + #32], R10	# spill
105   	movl    [rsp + #40], R14	# spill
10a   	movl    [rsp + #44], RCX	# spill
10e   	movl    [rsp + #24], RSI	# spill
112   	movq    R9, RBX	# spill
112
115   B10: #	B58 B11 &lt;- B9 B13 	Loop: B10-B13 inner stride: not constant pre of N1216 Freq: 1.95331
115   	movl    R8, [rsp + #0]	# spill
119   	movl    R10, [rsp + #0]	# spill
11d   	addl    R8, R11	# int
120   	movzwl  RDX, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
126   	cmpl    RDX, #128
12c   	jge     B58  P=0.000000 C=8580.000000
12c
132   B11: #	B47 B12 &lt;- B10  Freq: 1.95331
132   	movl    RCX, [rsp + #0]	# spill
135   	incl    RCX	# int
137   	cmpl    R10, R13	# unsigned
13a   	jnb,u  B47  P=0.000001 C=-1.000000
13a
140   B12: #	B14 B13 &lt;- B11  Freq: 1.95331
140   	movslq  R10, [RSP + #0 (32-bit)]	# int -&gt; long
144   	movq    RBX, [rsp + #56]	# spill
149   	movb    [RBX + #16 + R10], RDX	# byte
14e   	cmpl    RCX, RAX
150   	jge,s   B14	# loop end  P=0.500000 C=8580.000000
150
152   B13: #	B10 &lt;- B12  Freq: 0.976655
152   	movl    [rsp + #0], RCX	# spill
155   	jmp,s   B10
155
157   B14: #	B57 B15 &lt;- B12  Freq: 0.976655
157   	movl    R10, [rsp + #24]	# spill
15c   	cmpl    R10, R13
15f   	movl    RDX, R10	# spill
162   	cmovlgt RDX, R13	# min
166   	subl    RDX, RCX	# int
168   	andl    RDX, #-4	# int
16b   	addl    RDX, RCX	# int
16d   	cmpl    RCX, RDX
16f   	jge     B57  P=0.000001 C=-1.000000
16f
175   B15: #	B16 &lt;- B14  Freq: 0.976654
175   	movl    R14, R10	# spill
      	nop 	# 8 bytes pad for loops and calls

180   B16: #	B40 B17 &lt;- B15 B20 	Loop: B16-B20 inner stride: not constant main of N174 Freq: 41.8499
180   	movl    R8, RCX	# spill
183   	addl    R8, R11	# int
186   	movzwl  R10, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
18c   	cmpl    R10, #128
193   	jge     B40  P=0.000000 C=8580.000000
193
199   B17: #	B43 B18 &lt;- B16  Freq: 41.8499
199   	movslq  RBX, R8	# i2l
19c   	movzwl  RAX, [R9 + #18 + RBX &lt;&lt; #1]	# ushort/char
1a2   	movslq  RSI, RCX	# i2l
1a5   	movq    RBP, [rsp + #56]	# spill
1aa   	movb    [RBP + #16 + RSI], R10	# byte
1af   	cmpl    RAX, #128
1b5   	jge     B43  P=0.000000 C=8580.000000
1b5
1bb   B18: #	B41 B19 &lt;- B17  Freq: 41.8498
1bb   	movl    R10, R11	# spill
1be   	addl    R10, RCX	# int
1c1   	movslq  RSI, RCX	# i2l
1c4   	movb    [RBP + #17 + RSI], RAX	# byte
1c8   	movslq  RAX, R10	# i2l
1cb   	movzwl  RAX, [R9 + #20 + RAX &lt;&lt; #1]	# ushort/char
1d1   	cmpl    RAX, #128
1d7   	jge     B41  P=0.000000 C=8580.000000
1d7
1dd   B19: #	B44 B20 &lt;- B18  Freq: 41.8498
1dd   	movb    [RBP + #18 + RSI], RAX	# byte
1e1   	movzwl  R10, [R9 + #22 + RBX &lt;&lt; #1]	# ushort/char
1e7   	cmpl    R10, #128
1ee   	jge     B44  P=0.000000 C=8580.000000
1ee
1f4   B20: #	B16 B21 &lt;- B19  Freq: 41.8498
1f4   	movb    [RBP + #19 + RSI], R10	# byte
1f9   	addl    RCX, #4	# int
1fc   	cmpl    RCX, RDX
1fe   	jl     B16	# loop end  P=0.976665 C=8580.000000
1fe
204   B21: #	B22 &lt;- B20  Freq: 0.976574
204   	addl    R8, #4	# int
208   	movl    R10, R14	# spill
208
20b   B22: #	B25 B23 &lt;- B57 B21  Freq: 0.976575
20b   	cmpl    RCX, R10
20e   	jl,s   B25  P=0.500000 C=-1.000000
20e
210   B23: #	B29 &lt;- B22  Freq: 0.488288
210   	movl    [rsp + #0], RCX	# spill
213   	jmp,s   B29
213
215   B24: #	B25 &lt;- B27  Freq: 0.488286
215   	movl    R10, [rsp + #24]	# spill
215
21a   B25: #	B46 B26 &lt;- B22 B24 	Loop: B25-B24 inner stride: not constant post of N1216 Freq: 0.976574
21a   	movl    R8, RCX	# spill
21d   	addl    R8, R11	# int
220   	movq    RBX, R9	# spill
223   	movzwl  RDX, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
229   	cmpl    RDX, #128
22f   	jge     B46  P=0.000000 C=8580.000000
22f
235   B26: #	B48 B27 &lt;- B25  Freq: 0.976573
235   	movl    [rsp + #24], R10	# spill
23a   	movl    R10, RCX	# spill
23d   	incl    R10	# int
240   	movl    [rsp + #0], R10	# spill
244   	cmpl    RCX, R13	# unsigned
247   	jnb,u  B48  P=0.000001 C=-1.000000
247
24d   B27: #	B24 B28 &lt;- B26  Freq: 0.976572
24d   	movslq  R10, RCX	# i2l
250   	movq    RCX, [rsp + #56]	# spill
255   	movb    [RCX + #16 + R10], RDX	# byte
25a   	movl    RCX, [rsp + #0]	# spill
25d   	cmpl    RCX, [RSP + #24 (32-bit)]
261   	jl,s   B24	# loop end  P=0.500000 C=8580.000000
261
263   B28: #	B29 &lt;- B27  Freq: 0.488286
263   	incl    R8	# int
266
266   B29: #	B30 &lt;- B28 B23  Freq: 0.976574
266   	movq    R10, [rsp + #32]	# spill
26b   	movl    R14, [rsp + #40]	# spill
270   	movl    RCX, [rsp + #44]	# spill
274   	movq    RBX, R9	# spill
274
277   B30: #	B59 B31 &lt;- B29 B46 B39  Freq: 0.99999
277   	cmpl    R8, R14
27a   	jl     B59  P=0.000000 C=205.000000
27a
280   B31: #	B50 B32 &lt;- B76 B30  Freq: 0.99999
280   	movl    R9, [R10 + #44 (8-bit)]	# compressed ptr ! Field java/nio/CharBuffer.hb
284   	testl   R9, R9	# compressed ptr
287   	je     B50  P=0.000001 C=-1.000000
287
28d   B32: #	B54 B33 &lt;- B31  Freq: 0.999989
28d   	movzbl  R9, [R10 + #40 (8-bit)]	# ubyte ! Field java/nio/CharBuffer.isReadOnly
292   	testl   R9, R9
295   	jne     B54  P=0.000001 C=-1.000000
295
29b   B33: #	B101 B34 &lt;- B32  Freq: 0.999988
29b   	subl    R8, [R10 + #36 (8-bit)]	# int
29f   	movq    RDX, R10	# spill
2a2   	nop 	# 1 bytes pad for loops and calls
2a3   	call,static  java.nio.Buffer::position
        # sun.nio.cs.UTF_8::updatePositions @ bci:7  L[0]=_ L[1]=_ L[2]=rsp + #16 L[3]=rsp + #0
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop off=680}
2a8
2a8   B34: #	B51 B35 &lt;- B33  Freq: 0.999968
        # Block is sole successor of call
2a8   	movq    R10, [rsp + #16]	# spill
2ad   	movl    R10, [R10 + #44 (8-bit)]	# compressed ptr ! Field java/nio/ByteBuffer.hb
2b1   	testl   R10, R10	# compressed ptr
2b4   	je     B51  P=0.000001 C=-1.000000
2b4
2ba   B35: #	B55 B36 &lt;- B34  Freq: 0.999967
2ba   	movq    R10, [rsp + #16]	# spill
2bf   	movzbl  R10, [R10 + #40 (8-bit)]	# ubyte ! Field java/nio/ByteBuffer.isReadOnly
2c4   	testl   R10, R10
2c7   	jne     B55  P=0.000001 C=-1.000000
2c7
2cd   B36: #	B102 B37 &lt;- B35  Freq: 0.999966
2cd   	movl    R8, [rsp + #0]	# spill
2d1   	movq    R10, [rsp + #16]	# spill
2d6   	subl    R8, [R10 + #36 (8-bit)]	# int
2da   	movq    RDX, [rsp + #16]	# spill
2df   	call,static  java.nio.Buffer::position
        # sun.nio.cs.UTF_8::updatePositions @ bci:18  L[0]=_ L[1]=_ L[2]=_ L[3]=_
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=740}
2e4
2e4   B37: #	B38 &lt;- B36  Freq: 0.999946
        # Block is sole successor of call
2e4   	movq    R10, precise klass java/nio/charset/CoderResult: 0x0000000007e24128:Constant:exact *	# ptr
2ee   	movl    R11, [R10 + #660 (32-bit)]	# compressed ptr ! Field java/nio/charset/CoderResult.UNDERFLOW
2f5   	decode_heap_oop_not_null RAX,R11
2f5
2f9   B38: #	N1184 &lt;- B79 B72 B85 B37  Freq: 0.999946
2f9   	addq	rsp, 128	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
307   	ret
307
308   B39: #	B30 &lt;- B7  Freq: 0.0233351
308   	movl    R8, R11	# spill
30b   	jmp     B30
30b
310   B40: #	B42 &lt;- B16  Freq: 1.99556e-005
310   	movl    R10, R8	# spill
313   	jmp,s   B42
313
315   B41: #	B42 &lt;- B18  Freq: 1.99556e-005
315   	addl    R10, #2	# int
319   	addl    RCX, #2	# int
31c
31c   B42: #	B45 &lt;- B40 B41  Freq: 3.99111e-005
31c   	movl    R8, R10	# spill
31f   	jmp,s   B45
31f
321   B43: #	B45 &lt;- B17  Freq: 1.99556e-005
321   	incl    R8	# int
324   	incl    RCX	# int
326   	jmp,s   B45
326
328   B44: #	B45 &lt;- B19  Freq: 1.99555e-005
328   	addl    R8, #3	# int
32c   	addl    RCX, #3	# int
32f
32f   B45: #	B46 &lt;- B58 B42 B43 B44  Freq: 8.07537e-005
32f   	movq    RBX, R9	# spill
32f
332   B46: #	B30 &lt;- B25 B45  Freq: 8.12193e-005
332   	movq    R10, [rsp + #32]	# spill
337   	movl    R14, [rsp + #40]	# spill
33c   	movl    [rsp + #0], RCX	# spill
33f   	movl    RCX, [rsp + #44]	# spill
343   	jmp     B30
343
348   B47: #	B49 &lt;- B11  Freq: 1.97925e-006
348   	movl    R11, R8	# spill
34b   	incl    R11	# int
34e   	movl    [rsp + #0], RCX	# spill
351   	movl    RCX, R10	# spill
354   	jmp,s   B49
354
356   B48: #	B49 &lt;- B26  Freq: 9.89541e-007
356   	movl    R11, R8	# spill
359   	incl    R11	# int
35c
35c   B49: #	N1184 &lt;- B48 B47  Freq: 2.96879e-006
35c   	movsbl  RBP, RDX	# i2b
35f   	movl    RDX, #-28	# int
364   	movl    [rsp + #4], RCX	# spill
368   	movl    [rsp + #28], R11	# spill
36d   	nop 	# 2 bytes pad for loops and calls
36f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:105  L[0]=rsp + #8 L[1]=rsp + #32 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=rsp + #28 L[5]=rsp + #40 L[6]=rsp + #104 L[7]=rsp + #0 L[8]=rsp + #44 L[9]=rsp + #24 L[10]=_ L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #4 STK[2]=RBP
        # OopMap{[8]=Oop [16]=Oop [32]=Oop [100]=NarrowOop [104]=NarrowOop off=884}
374   	INT3   ; ShouldNotReachHere
374
375   B50: #	N1184 &lt;- B31  Freq: 1.01327e-006
375   	movl    RDX, #36	# int
37a   	movl    RBP, [rsp + #0]	# spill
37d   	movl    [rsp + #0], R8	# spill
381   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
389   	movq    [rsp + #16], R10	# spill
38e   	nop 	# 1 bytes pad for loops and calls
38f   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;36&apos;)
        # java.nio.CharBuffer::arrayOffset @ bci:7  L[0]=_
        # sun.nio.cs.UTF_8::updatePositions @ bci:3  L[0]=_ L[1]=_ L[2]=rsp + #8 L[3]=RBP STK[0]=rsp + #16 STK[1]=rsp + #0
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop off=916}
394   	INT3   ; ShouldNotReachHere
394
395   B51: #	N1184 &lt;- B34  Freq: 1.01325e-006
395   	movl    RDX, #30	# int
39a   	movl    RBP, [rsp + #0]	# spill
39d   	nop 	# 2 bytes pad for loops and calls
39f   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;30&apos;)
        # java.nio.ByteBuffer::arrayOffset @ bci:7  L[0]=_
        # sun.nio.cs.UTF_8::updatePositions @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop off=932}
3a4   	INT3   ; ShouldNotReachHere
3a4
3a5   B52: #	N1184 &lt;- B3  Freq: 9.99998e-007
3a5   	movl    RDX, #38	# int
3aa   	movq    RBP, R8	# spill
3ad   	nop 	# 2 bytes pad for loops and calls
3af   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;38&apos;)
        # java.nio.CharBuffer::array @ bci:22  L[0]=_
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:1  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=948}
3b4   	INT3   ; ShouldNotReachHere
3b4
3b5   B53: #	N1184 &lt;- B6  Freq: 9.99995e-007
3b5   	movl    RDX, #32	# int
3ba   	movl    RBP, R11	# spill
3bd   	movq    [rsp + #0], R10	# spill
3c1   	movl    [rsp + #28], R14	# spill
3c6   	nop 	# 1 bytes pad for loops and calls
3c7   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;32&apos;)
        # java.nio.ByteBuffer::array @ bci:22  L[0]=_
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:28  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=RBP L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [100]=NarrowOop off=972}
3cc   	INT3   ; ShouldNotReachHere
3cc
3cd   B54: #	N1184 &lt;- B32  Freq: 9.99989e-007
3cd   	movl    RDX, #38	# int
3d2   	movl    RBP, [rsp + #0]	# spill
3d5   	movl    [rsp + #0], R8	# spill
3d9   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #8]
3e1   	movq    [rsp + #16], R10	# spill
3e6   	nop 	# 1 bytes pad for loops and calls
3e7   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;38&apos;)
        # java.nio.CharBuffer::arrayOffset @ bci:22  L[0]=_
        # sun.nio.cs.UTF_8::updatePositions @ bci:3  L[0]=_ L[1]=_ L[2]=rsp + #8 L[3]=RBP STK[0]=rsp + #16 STK[1]=rsp + #0
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop off=1004}
3ec   	INT3   ; ShouldNotReachHere
3ec
3ed   B55: #	N1184 &lt;- B35  Freq: 9.99967e-007
3ed   	movl    RDX, #32	# int
3f2   	movl    RBP, [rsp + #0]	# spill
3f5   	nop 	# 2 bytes pad for loops and calls
3f7   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;32&apos;)
        # java.nio.ByteBuffer::arrayOffset @ bci:22  L[0]=_
        # sun.nio.cs.UTF_8::updatePositions @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=rsp + #16 STK[1]=RBP
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:482  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[16]=Oop off=1020}
3fc   	INT3   ; ShouldNotReachHere
3fc
3fd   B56: #	N1184 &lt;- B8  Freq: 9.89628e-007
3fd   	movl    RDX, #-122	# int
402   	movl    RBP, R11	# spill
405   	movq    [rsp + #24], R10	# spill
40a   	movl    [rsp + #32], R14	# spill
40f   	movl    [rsp + #40], RCX	# spill
413   	movl    [rsp + #44], RSI	# spill
417   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:80  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=RBP L[5]=rsp + #32 L[6]=rsp + #104 L[7]=rsp + #0 L[8]=rsp + #40 L[9]=rsp + #44 L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1052}
41c   	INT3   ; ShouldNotReachHere
41c
41d   B57: #	B22 &lt;- B14  Freq: 9.89624e-007
41d   	incl    R8	# int
420   	jmp     B22
420
425   B58: #	B45 &lt;- B10  Freq: 9.31412e-007
425   	movl    RCX, [rsp + #0]	# spill
428   	jmp     B45
428
42d   B59: #	B86 B60 &lt;- B30  Freq: 4.76832e-007
42d   	movl    R11, R14	# spill
430   	decl    R11	# int
433   	cmpl    R11, RDI	# unsigned
436   	jnb,u  B86  P=0.000001 C=-1.000000
436
43c   B60: #	B61 &lt;- B59  Freq: 4.76832e-007
43c   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #0]
	movl    [rsp + #96], rax
	movq    rax, [rsp - #8]
44d   	movl    R11, R8	# spill
44d
450   B61: #	B73 B62 &lt;- B60 B77 	Loop: B61-B77 inner stride: not constant  Freq: 4.76833e-007
450   	movl    R9, R11	# spill
453   	movzwl  R8, [RBX + #16 + R11 &lt;&lt; #1]	# ushort/char
459   	movslq  RAX, [RSP + #96 (32-bit)]	# int -&gt; long
45e   	movl    RDI, [rsp + #96]	# spill
462   	incl    RDI	# int
464   	cmpl    R8, #128
46b   	jl     B73  P=0.500000 C=-1.000000
46b
471   B62: #	B67 B63 &lt;- B61  Freq: 2.38417e-007
471   	movl    R11, RCX	# spill
474   	subl    R11, [RSP + #96 (32-bit)]	# int
479   	movl    RDX, R8	# spill
47c   	andl    RDX, #63	# int
47f   	movslq  RBP, [RSP + #96 (32-bit)]	# int -&gt; long
484   	orl     RDX, #128	# int
48a   	movl    RSI, [rsp + #96]	# spill
48e   	addl    RSI, #2	# int
491   	movl    [rsp + #0], RSI	# spill
494   	cmpl    R8, #2048
49b   	jl,s   B67  P=0.500000 C=-1.000000
49b
49d   B63: #	B99 B64 &lt;- B62  Freq: 1.19208e-007
49d   	movq    [rsp + #88], RBP	# spill
4a2   	movl    [rsp + #84], RDX	# spill
4a6   	movl    [rsp + #80], R11	# spill
4ab   	movl    [rsp + #68], RDI	# spill
4af   	movq    [rsp + #72], RAX	# spill
4b4   	movl    [rsp + #64], R8	# spill
4b9   	movl    [rsp + #44], R9	# spill
4be   	movq    [rsp + #48], RBX	# spill
4c3   	movl    [rsp + #40], RCX	# spill
4c7   	movl    RBP, R13	# spill
4ca   	movl    [rsp + #36], R14	# spill
4cf   	pushq   [rsp + #16]	# 64-bit mem-mem spill
	popq    [rsp + #24]
4d7   	movq    [rsp + #16], R10	# spill
4dc   	movl    RDX, R8	# spill
4df   	call,static  java.lang.Character::isSurrogate
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:229  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #48 L[4]=rsp + #44 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #96 L[8]=rsp + #40 L[9]=_ L[10]=rsp + #64 L[11]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [48]=Oop [56]=Oop [100]=NarrowOop [104]=NarrowOop off=1252}
4e4
4e4   B64: #	B80 B65 &lt;- B63  Freq: 1.19206e-007
        # Block is sole successor of call
4e4   	testl   RAX, RAX
4e6   	je     B80  P=0.100000 C=-1.000000
4e6
4ec   B65: #	B88 B66 &lt;- B64  Freq: 1.07285e-007
4ec   	movq    R10, [rsp + #8]	# spill
4f1   	movl    RBP, [R10 + #44 (8-bit)]	# compressed ptr ! Field sun/nio/cs/UTF_8$Encoder.sgp
4f5   	testl   RBP, RBP	# compressed ptr
4f7   	je     B88  P=0.000001 C=-1.000000
4f7
4fd   B66: #	N1184 &lt;- B65  Freq: 1.07285e-007
4fd   	movl    RDX, #-20	# int
502   	nop 	# 1 bytes pad for loops and calls
503   	call,static  wrapper for: uncommon_trap(reason=&apos;null_assert&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:239  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #100 L[4]=rsp + #44 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #96 L[8]=rsp + #40 L[9]=_ L[10]=rsp + #64 L[11]=_ STK[0]=RBP
        # OopMap{rbp=NarrowOop [8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1288}
508   	INT3   ; ShouldNotReachHere
508
509   B67: #	B71 B68 &lt;- B62  Freq: 1.19208e-007
509   	cmpl    R11, #2
50d   	jl,s   B71  P=0.500000 C=-1.000000
50d
50f   B68: #	B89 B69 &lt;- B67  Freq: 5.96042e-008
50f   	movl    R11, R8	# spill
512   	sarl    R11, #6
516   	orl     R11, #192	# int
51d   	movl    RSI, [rsp + #96]	# spill
521   	cmpl    RSI, R13	# unsigned
524   	jnb,u  B89  P=0.000001 C=-1.000000
524
52a   B69: #	B90 B70 &lt;- B68  Freq: 5.96041e-008
52a   	movq    R8, [rsp + #56]	# spill
52f   	movb    [R8 + #16 + RAX], R11	# byte
534   	cmpl    RDI, R13	# unsigned
537   	jnb,u  B90  P=0.000001 C=-1.000000
537
53d   B70: #	B76 &lt;- B69  Freq: 5.9604e-008
53d   	movq    R11, [rsp + #56]	# spill
542   	movb    [R11 + #17 + RBP], RDX	# byte
547   	jmp,s   B76
547
549   B71: #	B98 B72 &lt;- B67  Freq: 5.96042e-008
549   	movq    RDX, R10	# spill
54c   	movl    R8, R9	# spill
54f   	movq    R9, [rsp + #16]	# spill
554   	movl    RDI, [rsp + #96]	# spill
558   	nop 	# 3 bytes pad for loops and calls
55b   	call,static  sun.nio.cs.UTF_8$Encoder::overflow
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:184  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1376}
560
560   B72: #	B38 &lt;- B71  Freq: 5.9603e-008
        # Block is sole successor of call
560   	jmp     B38
560
565   B73: #	B78 B74 &lt;- B61  Freq: 2.38417e-007
565   	movl    R11, [rsp + #96]	# spill
56a   	cmpl    R11, RCX
56d   	jge,s   B78  P=0.500000 C=-1.000000
56d
56f   B74: #	B87 B75 &lt;- B73  Freq: 1.19208e-007
56f   	cmpl    R11, R13	# unsigned
572   	jnb,u  B87  P=0.000001 C=-1.000000
572
578   B75: #	B76 &lt;- B74  Freq: 1.19208e-007
578   	movq    R11, [rsp + #56]	# spill
57d   	movb    [R11 + #16 + RAX], R8	# byte
582   	movl    [rsp + #0], RDI	# spill
582
585   B76: #	B31 B77 &lt;- B83 B70 B75  Freq: 1.84773e-007
585   	movl    R8, R9	# spill
588   	incl    R8	# int
58b   	cmpl    R8, R14
58e   	jge     B31	# loop end  P=1.000000 C=205.000000
58e
594   B77: #	B61 &lt;- B76  Freq: 8.81064e-014
594   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #0]
	movl    [rsp + #96], rax
	movq    rax, [rsp - #8]
5a5   	movl    R11, R8	# spill
5a8   	jmp     B61
5a8
5ad   B78: #	B100 B79 &lt;- B73  Freq: 1.19208e-007
5ad   	movq    RDX, R10	# spill
5b0   	movl    R8, R9	# spill
5b3   	movq    R9, [rsp + #16]	# spill
5b8   	movl    RDI, [rsp + #96]	# spill
5bc   	nop 	# 3 bytes pad for loops and calls
5bf   	call,static  sun.nio.cs.UTF_8$Encoder::overflow
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:143  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1476}
5c4
5c4   B79: #	B38 &lt;- B78  Freq: 1.19206e-007
        # Block is sole successor of call
5c4   	jmp     B38
5c4
5c9   B80: #	B84 B81 &lt;- B64  Freq: 1.19206e-008
5c9   	movl    R11, [rsp + #80]	# spill
5ce   	cmpl    R11, #3
5d2   	jl     B84  P=0.500000 C=-1.000000
5d2
5d8   B81: #	B91 B82 &lt;- B80  Freq: 5.9603e-009
5d8   	movl    R11, [rsp + #64]	# spill
5dd   	sarl    R11, #12
5e1   	orl     R11, #224	# int
5e8   	movl    R8, [rsp + #96]	# spill
5ed   	cmpl    R8, RBP	# unsigned
5f0   	jnb,u  B91  P=0.000001 C=-1.000000
5f0
5f6   B82: #	B92 B83 &lt;- B81  Freq: 5.96029e-009
5f6   	movq    R10, [rsp + #72]	# spill
5fb   	movq    R9, [rsp + #56]	# spill
600   	movb    [R9 + #16 + R10], R11	# byte
605   	movl    R10, [rsp + #64]	# spill
60a   	shrl    R10, #6
60e   	andl    R10, #63	# int
612   	orl     R10, #128	# int
619   	movl    R11, [rsp + #0]	# spill
61d   	cmpl    R11, RBP	# unsigned
620   	jnb,u  B92  P=0.000001 C=-1.000000
620
626   B83: #	B76 &lt;- B82  Freq: 5.96029e-009
626   	movq    R11, [rsp + #88]	# spill
62b   	movb    [R9 + #17 + R11], R10	# byte
630   	movl    R9, [rsp + #84]	# spill
635   	movq    R10, [rsp + #56]	# spill
63a   	movb    [R10 + #18 + R11], R9	# byte
63f   	movl    R10, [rsp + #96]	# spill
644   	addl    R10, #3	# int
648   	movl    [rsp + #0], R10	# spill
64c   	movq    R10, [rsp + #16]	# spill
651   	pushq   [rsp + #24]	# 64-bit mem-mem spill
	popq    [rsp + #16]
659   	movl    R14, [rsp + #36]	# spill
65e   	movl    R13, RBP	# spill
661   	movl    RCX, [rsp + #40]	# spill
665   	movq    RBX, [rsp + #48]	# spill
66a   	movl    R9, [rsp + #44]	# spill
66f   	jmp     B76
66f
674   B84: #	B97 B85 &lt;- B80  Freq: 5.9603e-009
674   	movq    RDX, [rsp + #16]	# spill
679   	movl    R8, [rsp + #44]	# spill
67e   	movq    R9, [rsp + #24]	# spill
683   	movl    RDI, [rsp + #96]	# spill
687   	call,static  sun.nio.cs.UTF_8$Encoder::overflow
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:409  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{off=1676}
68c
68c   B85: #	B38 &lt;- B84  Freq: 5.96018e-009
        # Block is sole successor of call
68c   	jmp     B38
68c
691   B86: #	N1184 &lt;- B59  Freq: 4.83164e-013
691   	movl    RDX, #-122	# int
696   	movl    RBP, R8	# spill
699   	movq    [rsp + #24], R10	# spill
69e   	movl    [rsp + #32], R14	# spill
6a3   	movl    [rsp + #40], RCX	# spill
6a7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:116  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=RBP L[5]=rsp + #32 L[6]=rsp + #104 L[7]=rsp + #0 L[8]=rsp + #40 L[9]=_ L[10]=_ L[11]=_
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1708}
6ac   	INT3   ; ShouldNotReachHere
6ac
6ad   B87: #	N1184 &lt;- B74  Freq: 1.20791e-013
6ad   	movsbl  RBP, R8	# i2b
6b1   	movl    RDX, #-28	# int
6b6   	movq    [rsp + #0], R10	# spill
6ba   	movl    [rsp + #28], R9	# spill
6bf   	movl    [rsp + #32], R14	# spill
6c4   	movl    [rsp + #40], RDI	# spill
6c8   	movl    [rsp + #44], RCX	# spill
6cc   	nop 	# 3 bytes pad for loops and calls
6cf   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:157  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=rsp + #28 L[5]=rsp + #32 L[6]=rsp + #104 L[7]=rsp + #40 L[8]=rsp + #44 L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #96 STK[2]=RBP
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [100]=NarrowOop [104]=NarrowOop off=1748}
6d4   	INT3   ; ShouldNotReachHere
6d4
6d5   B88: #	N1184 &lt;- B65  Freq: 1.0871e-013
6d5   	movl    RDX, #21	# int
6da   	movq    RBP, R10	# spill
6dd   	nop 	# 2 bytes pad for loops and calls
6df   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;21&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:243  L[0]=RBP L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #100 L[4]=rsp + #44 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #96 L[8]=rsp + #40 L[9]=_ L[10]=rsp + #64 L[11]=_ STK[0]=RBP
        # OopMap{rbp=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1764}
6e4   	INT3   ; ShouldNotReachHere
6e4
6e5   B89: #	N1184 &lt;- B68  Freq: 6.03956e-014
6e5   	movsbl  RBP, R11	# i2b
6e9   	movl    RDX, #-28	# int
6ee   	movq    [rsp + #0], R10	# spill
6f2   	movl    [rsp + #28], R9	# spill
6f7   	movl    [rsp + #32], R14	# spill
6fc   	movl    [rsp + #40], RDI	# spill
700   	movl    [rsp + #44], RCX	# spill
704   	movl    [rsp + #48], R8	# spill
709   	nop 	# 2 bytes pad for loops and calls
70b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:205  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=rsp + #28 L[5]=rsp + #32 L[6]=rsp + #104 L[7]=rsp + #40 L[8]=rsp + #44 L[9]=_ L[10]=rsp + #48 L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #96 STK[2]=RBP
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [100]=NarrowOop [104]=NarrowOop off=1808}
710   	INT3   ; ShouldNotReachHere
710
711   B90: #	N1184 &lt;- B69  Freq: 6.03956e-014
711   	movsbl  RBP, RDX	# i2b
714   	movl    RDX, #-28	# int
719   	movq    [rsp + #24], R10	# spill
71e   	movl    [rsp + #32], R9	# spill
723   	movl    [rsp + #36], R14	# spill
728   	movl    [rsp + #44], RCX	# spill
72c   	movl    [rsp + #52], RDI	# spill
730   	nop 	# 3 bytes pad for loops and calls
733   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:223  L[0]=rsp + #8 L[1]=rsp + #24 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=rsp + #32 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #0 L[8]=rsp + #44 L[9]=_ L[10]=_ L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #52 STK[2]=RBP
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1848}
738   	INT3   ; ShouldNotReachHere
738
739   B91: #	N1184 &lt;- B81  Freq: 6.03944e-015
739   	movsbl  RBP, R11	# i2b
73d   	movl    RDX, #-28	# int
742   	nop 	# 1 bytes pad for loops and calls
743   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:430  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #100 L[4]=rsp + #44 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #68 L[8]=rsp + #40 L[9]=_ L[10]=rsp + #64 L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #96 STK[2]=RBP
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1864}
748   	INT3   ; ShouldNotReachHere
748
749   B92: #	N1184 &lt;- B82  Freq: 6.03944e-015
749   	movsbl  RBP, R10	# i2b
74d   	movl    RDX, #-28	# int
752   	nop 	# 1 bytes pad for loops and calls
753   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:451  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #100 L[4]=rsp + #44 L[5]=rsp + #36 L[6]=rsp + #104 L[7]=rsp + #0 L[8]=rsp + #40 L[9]=_ L[10]=rsp + #64 L[11]=_ STK[0]=rsp + #104 STK[1]=rsp + #68 STK[2]=RBP
        # OopMap{[8]=Oop [16]=Oop [24]=Oop [100]=NarrowOop [104]=NarrowOop off=1880}
758   	INT3   ; ShouldNotReachHere
758
759   B93: #	N1184 &lt;- B1  Freq: 1.01328e-006
759   	movl    RDX, #-10	# int
75e   	nop 	# 1 bytes pad for loops and calls
75f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1892}
764   	INT3   ; ShouldNotReachHere
764
765   B94: #	N1184 &lt;- B2  Freq: 1.01328e-006
765   	movl    RDX, #36	# int
76a   	movq    RBP, R8	# spill
76d   	nop 	# 2 bytes pad for loops and calls
76f   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;36&apos;)
        # java.nio.CharBuffer::array @ bci:7  L[0]=_
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:1  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #16 L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{rbp=Oop [8]=Oop [16]=Oop off=1908}
774   	INT3   ; ShouldNotReachHere
774
775   B95: #	N1184 &lt;- B4  Freq: 1.01328e-006
775   	movl    RDX, #-10	# int
77a   	nop 	# 1 bytes pad for loops and calls
77b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:28  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_ STK[0]=#NULL
        # OopMap{off=1920}
780   	INT3   ; ShouldNotReachHere
780
781   B96: #	N1184 &lt;- B5  Freq: 1.01327e-006
781   	movl    RDX, #30	# int
786   	movl    RBP, R11	# spill
789   	movq    [rsp + #0], R10	# spill
78d   	movl    [rsp + #28], R14	# spill
792   	nop 	# 1 bytes pad for loops and calls
793   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;30&apos;)
        # java.nio.ByteBuffer::array @ bci:7  L[0]=_
        # sun.nio.cs.UTF_8$Encoder::encodeArrayLoop @ bci:28  L[0]=rsp + #8 L[1]=rsp + #0 L[2]=rsp + #16 L[3]=rsp + #100 L[4]=RBP L[5]=rsp + #28 L[6]=_ L[7]=_ L[8]=_ L[9]=_ L[10]=_ L[11]=_
        # OopMap{[0]=Oop [8]=Oop [16]=Oop [100]=NarrowOop off=1944}
798   	INT3   ; ShouldNotReachHere
798
799   B97: #	B103 &lt;- B84  Freq: 5.9603e-014
799   	# exception oop is in rax; no code emitted
799   	movq    RDX, RAX	# spill
79c   	jmp,s   B103
79c
79e   B98: #	B103 &lt;- B71  Freq: 5.96042e-013
79e   	# exception oop is in rax; no code emitted
79e   	movq    RDX, RAX	# spill
7a1   	jmp,s   B103
7a1
7a3   B99: #	B103 &lt;- B63  Freq: 1.19208e-012
7a3   	# exception oop is in rax; no code emitted
7a3   	movq    RDX, RAX	# spill
7a6   	jmp,s   B103
7a6
7a8   B100: #	B103 &lt;- B78  Freq: 1.19208e-012
7a8   	# exception oop is in rax; no code emitted
7a8   	movq    RDX, RAX	# spill
7ab   	jmp,s   B103
7ab
7ad   B101: #	B103 &lt;- B33  Freq: 9.99988e-006
7ad   	# exception oop is in rax; no code emitted
7ad   	movq    RDX, RAX	# spill
7b0   	jmp,s   B103
7b0
7b2   B102: #	B103 &lt;- B36  Freq: 9.99966e-006
7b2   	# exception oop is in rax; no code emitted
7b2   	movq    RDX, RAX	# spill
7b2
7b5   B103: #	N1184 &lt;- B100 B98 B99 B97 B101 B102  Freq: 1.99995e-005
7b5   	addq	rsp, 128	# Destroy frame
	popq	rbp

7bd   	jmp     rethrow_stub
7bd

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='6'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;replace&apos;
 - signature:         &apos;(CC)Ljava/lang/String;&apos;
 - max stack:         5
 - max locals:        9
 - size of params:    3
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670fa28
 - compiled entry     0x000000000277c8f9
 - code size:         142
 - code start:        0x000000077ae12258
 - code end (excl):   0x000000077ae122e6
 - method data:       0x000000077b0ee000
 - checked ex length: 0
 - linenumber start:  0x000000077ae122e6
 - localvar length:   10
 - localvar start:    0x000000077ae12306
#
#  java/lang/String:exact * ( java/lang/String:NotNull:exact *, char, char )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8   : parm 1: char
#r006 r9   : parm 2: char
# -- Old rsp -- Framesize: 80 --
#r089 rsp+76: pad2, in_preserve
#r088 rsp+72: pad2, in_preserve
#r087 rsp+68: pad2, in_preserve
#r086 rsp+64: pad2, in_preserve
#r085 rsp+60: pad2, in_preserve
#r084 rsp+56: return address
#r083 rsp+52: Fixed slot 1
#r082 rsp+48: Fixed slot 0
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N991: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B51 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #64	# Create frame
02c   	movl    [rsp + #4], R9	# spill
031   	movl    R10, R8	# spill
034   	cmpl    R8, R9
037   	je     B51  P=0.000000 C=203.000000
037
03d   B2: #	B56 B3 &lt;- B1  Freq: 1
03d   	movq    RSI, RDX	# spill
040   	movl    R8, [RDX + #16 (8-bit)]	# int ! Field java/lang/String.offset
044   	movl    R14, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
048   	movl    R11, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
04c   	movl    RBP, R11	# spill
04f   	addl    RBP, R8	# int
052   	decl    RBP	# int
054   	testl   R11, R11
057   	jle     B56  P=0.035004 C=2514.000000
057
05d   B3: #	B63 B4 &lt;- B2  Freq: 0.964996
05d   	movl    RCX, [R12 + R14 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
062   	NullCheck R14
062
062   B4: #	B63 B5 &lt;- B3  Freq: 0.964995
062   	cmpl    RBP, RCX	# unsigned
064   	jnb,u  B63  P=0.000001 C=-1.000000
064
06a   B5: #	B6 &lt;- B4  Freq: 0.964994
06a   	decode_heap_oop_not_null RDX,R14
06e   	xorl    RBX, RBX	# int
070
070   B6: #	B19 B7 &lt;- B5 B7 	Loop: B6-B7 inner stride: not constant pre of N504 Freq: 1.84192
070   	movl    RCX, RBX	# spill
072   	addl    RCX, R8	# int
075   	movzwl  RCX, [RDX + #16 + RCX &lt;&lt; #1]	# ushort/char
07a   	cmpl    RCX, R10
07d   	je     B19  P=0.047815 C=2426.000000
07d
083   B7: #	B6 B8 &lt;- B6  Freq: 1.75384
083   	incl    RBX	# int
085   	cmpl    RBX, #1
088   	jl,s   B6	# loop end  P=0.500000 C=2514.000000
088
08a   B8: #	B14 B9 &lt;- B7  Freq: 0.876922
08a   	movl    R9, R11	# spill
08d   	subl    R9, RBX	# int
090   	andl    R9, #-4	# int
094   	addl    R9, RBX	# int
097   	cmpl    RBX, R9
09a   	jge,s   B14  P=0.000001 C=-1.000000
      	nop 	# 4 bytes pad for loops and calls

0a0   B9: #	B19 B10 &lt;- B8 B13 	Loop: B9-B13 inner stride: not constant main of N181 Freq: 4.24146
0a0   	movl    RDI, RBX	# spill
0a2   	addl    RDI, R8	# int
0a5   	movzwl  RCX, [RDX + #16 + RDI &lt;&lt; #1]	# ushort/char
0aa   	cmpl    RCX, R10
0ad   	je,s   B19  P=0.047815 C=2426.000000
0ad
0af   B10: #	B18 B11 &lt;- B9  Freq: 4.03866
0af   	movslq  RAX, RDI	# i2l
0b2   	movzwl  RDI, [RDX + #18 + RAX &lt;&lt; #1]	# ushort/char
0b8   	cmpl    RDI, R10
0bb   	je,s   B18  P=0.047815 C=2426.000000
0bb
0bd   B11: #	B54 B12 &lt;- B10  Freq: 3.84555
0bd   	movzwl  RCX, [RDX + #20 + RAX &lt;&lt; #1]	# ushort/char
0c2   	cmpl    RCX, R10
0c5   	je     B54  P=0.047815 C=2426.000000
0c5
0cb   B12: #	B55 B13 &lt;- B11  Freq: 3.66167
0cb   	movzwl  RDI, [RDX + #22 + RAX &lt;&lt; #1]	# ushort/char
0d1   	cmpl    RDI, R10
0d4   	je     B55  P=0.047815 C=2426.000000
0d4
0da   B13: #	B9 B14 &lt;- B12  Freq: 3.48659
0da   	addl    RBX, #4	# int
0dd   	cmpl    RBX, R9
0e0   	jl,s   B9	# loop end  P=0.964996 C=2514.000000
0e0
0e2   B14: #	B19 B15 &lt;- B8 B13  Freq: 0.122045
0e2   	cmpl    RBX, R11
0e5   	jge,s   B19  P=0.500000 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

0e8   B15: #	B19 B16 &lt;- B14 B16 	Loop: B15-B16 inner stride: not constant post of N504 Freq: 0.116476
0e8   	movl    R9, RBX	# spill
0eb   	addl    R9, R8	# int
0ee   	movzwl  RCX, [RDX + #16 + R9 &lt;&lt; #1]	# ushort/char
0f4   	cmpl    RCX, R10
0f7   	je,s   B19  P=0.047815 C=2426.000000
0f7
0f9   B16: #	B15 B17 &lt;- B15  Freq: 0.110907
0f9   	incl    RBX	# int
0fb   	cmpl    RBX, R11
0fe   	jl,s   B15	# loop end  P=0.500000 C=2514.000000
0fe
100   B17: #	B19 &lt;- B16  Freq: 0.0554533
100   	jmp,s   B19
100
102   B18: #	B19 &lt;- B10  Freq: 0.19311
102   	incl    RBX	# int
104
104   B19: #	B52 B20 &lt;- B17 B14 B15 B6 B9 B54 B18 B55 B56  Freq: 0.999998
104   	cmpl    RBX, R11
107   	jge     B52  P=0.431373 C=204.000000
107
10d   B20: #	B57 B21 &lt;- B19  Freq: 0.568626
10d   	cmpl    R11, #524288	# unsigned
114   	jnbe,u  B57  P=0.000001 C=-1.000000
114
11a   B21: #	B57 B22 &lt;- B20  Freq: 0.568626
11a   	# TLS is in R15
11a   	movq    R9, [R15 + #112 (8-bit)]	# ptr
11e   	movslq  RCX, R11	# i2l
121   	salq    RCX, #1
124   	addq    RCX, #23	# long
128   	movq    RDI, RCX	# spill
12b   	andq    RDI, #-8	# long
12f   	movq    RDX, R9	# spill
132   	addq    RDX, RDI	# ptr
135   	# TLS is in R15
135   	cmpq    RDX, [R15 + #128 (32-bit)]	# raw ptr
13c   	jnb,u  B57  P=0.000100 C=-1.000000
13c
142   B22: #	B23 &lt;- B21  Freq: 0.568569
142   	# TLS is in R15
142   	movq    [R15 + #112 (8-bit)], RDX	# ptr
146   	PREFETCHNTA [RDX + #256 (32-bit)]	# Prefetch to non-temporal cache for write
14d   	movq    [R9], 0x0000000000000001	# ptr
154   	PREFETCHNTA [RDX + #320 (32-bit)]	# Prefetch to non-temporal cache for write
15b   	movl    [R9 + #8 (8-bit)], narrowoop: precise klass [C: 0x000000000678d778:Constant:exact *	# compressed ptr
163   	movl    [R9 + #12 (8-bit)], R11	# int
167   	PREFETCHNTA [RDX + #384 (32-bit)]	# Prefetch to non-temporal cache for write
16e   	movq    RDI, R9	# spill
171   	addq    RDI, #16	# ptr
175   	shrq    RCX, #3
179   	addq    RCX, #-2	# long
17d   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
182
182   B23: #	B36 B24 &lt;- B58 B22  Freq: 0.568626
182   	
182   	# checkcastPP of R9
182   	testl   RBX, RBX
184   	jle     B36  P=0.256637 C=452.000000
184
18a   B24: #	B67 B25 &lt;- B23  Freq: 0.422696
18a   	movl    RDI, [R12 + R14 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
18f   	NullCheck R14
18f
18f   B25: #	B67 B26 &lt;- B24  Freq: 0.422695
18f   	movl    RCX, RBX	# spill
191   	addl    RCX, R8	# int
194   	decl    RCX	# int
196   	cmpl    RCX, RDI	# unsigned
198   	jnb,u  B67  P=0.000001 C=-1.000000
198
19e   B26: #	B27 &lt;- B25  Freq: 0.422695
19e   	decode_heap_oop_not_null RAX,R14
1a2   	xorl    RDI, RDI	# int
1a4
1a4   B27: #	B64 B28 &lt;- B26 B28 	Loop: B27-B28 inner stride: not constant pre of N517 Freq: 0.845389
1a4   	movl    RCX, RDI	# spill
1a6   	addl    RCX, R8	# int
1a9   	movzwl  RSI, [RAX + #16 + RCX &lt;&lt; #1]	# ushort/char
1af   	cmpl    RDI, R11	# unsigned
1b2   	jnb,u  B64  P=0.000001 C=-1.000000
1b2
1b8   B28: #	B27 B29 &lt;- B27  Freq: 0.845388
1b8   	movw    [R9 + #16 + RDI &lt;&lt; #1], RSI	# char/short
1be   	incl    RDI	# int
1c0   	cmpl    RDI, #1
1c3   	jl,s   B27	# loop end  P=0.500000 C=336.000000
1c3
1c5   B29: #	B32 B30 &lt;- B28  Freq: 0.422694
1c5   	cmpl    R11, RBX
1c8   	movl    RSI, R11	# spill
1cb   	cmovlgt RSI, RBX	# min
1ce   	subl    RSI, RDI	# int
1d0   	andl    RSI, #-2	# int
1d3   	addl    RSI, RDI	# int
1d5   	cmpl    RDI, RSI
1d7   	jl,s   B32  P=0.999999 C=-1.000000
1d7
1d9   B30: #	B33 &lt;- B29  Freq: 4.28307e-007
1d9   	movl    RCX, RDI	# spill
1db   	jmp,s   B33
      	nop 	# 3 bytes pad for loops and calls

1e0   B31: #	B32 &lt;- B32  top-of-loop Freq: 1.22435
1e0   	movl    RDI, RCX	# spill
1e0
1e2   B32: #	B31 B33 &lt;- B29 B31 	Loop: B32-B31 inner stride: not constant main of N280 Freq: 1.64705
1e2   	movl    RDX, RDI	# spill
1e4   	addl    RDX, R8	# int
1e7   	movzwl  RCX, [RAX + #16 + RDX &lt;&lt; #1]	# ushort/char
1ec   	movw    [R9 + #16 + RDI &lt;&lt; #1], RCX	# char/short
1f2   	movl    RCX, RDI	# spill
1f4   	addl    RCX, #2	# int
1f7   	movslq  RDX, RDX	# i2l
1fa   	movzwl  RDX, [RAX + #18 + RDX &lt;&lt; #1]	# ushort/char
1ff   	movslq  RDI, RDI	# i2l
202   	movw    [R9 + #18 + RDI &lt;&lt; #1], RDX	# char/short
208   	cmpl    RCX, RSI
20a   	jl,s   B31	# loop end  P=0.743363 C=336.000000
20a
20c   B33: #	B36 B34 &lt;- B30 B32  Freq: 0.422694
20c   	cmpl    RCX, RBX
20e   	jge,s   B36  P=0.500000 C=-1.000000
20e
210   B34: #	B65 B35 &lt;- B33 B35 	Loop: B34-B35 inner stride: not constant post of N517 Freq: 0.422693
210   	movl    RDX, RCX	# spill
212   	addl    RDX, R8	# int
215   	movzwl  RSI, [RAX + #16 + RDX &lt;&lt; #1]	# ushort/char
21b   	cmpl    RCX, R11	# unsigned
21e   	jnb,u  B65  P=0.000001 C=-1.000000
21e
224   B35: #	B34 B36 &lt;- B34  Freq: 0.422693
224   	movw    [R9 + #16 + RCX &lt;&lt; #1], RSI	# char/short
22a   	incl    RCX	# int
22c   	cmpl    RCX, RBX
22e   	jl,s   B34	# loop end  P=0.500000 C=336.000000
22e
230   B36: #	B66 B37 &lt;- B35 B33 B23  Freq: 0.568624
230   	movl    RDI, [R12 + R14 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
235   	NullCheck R14
235
235   B37: #	B66 B38 &lt;- B36  Freq: 0.568623
235   	cmpl    RBP, RDI	# unsigned
237   	jnb,u  B66  P=0.000001 C=-1.000000
237
23d   B38: #	B39 &lt;- B37  Freq: 0.568623
23d   	decode_heap_oop_not_null RAX,R14
241   	movl    RCX, RBX	# spill
243   	incl    RCX	# int
245   	xorl    RDI, RDI	# int
247   	xorl    RSI, RSI	# int
249   	cmpl    RCX, RDI
24b   	cmovllt RCX, RSI	# max
24b
24e   B39: #	B61 B40 &lt;- B38 B40 	Loop: B39-B40 inner stride: not constant pre of N529 Freq: 1.13724
24e   	movl    RDI, RBX	# spill
250   	addl    RDI, R8	# int
253   	movzwl  RDI, [RAX + #16 + RDI &lt;&lt; #1]	# ushort/char
259   	cmpl    RDI, R10
25c   	movl    RBP, [rsp + #4]	# spill
260   	cmovlne RBP, RDI	# signed, int
263   	cmpl    RBX, R11	# unsigned
266   	jnb,u  B61  P=0.000001 C=-1.000000
266
26c   B40: #	B39 B41 &lt;- B39  Freq: 1.13724
26c   	movw    [R9 + #16 + RBX &lt;&lt; #1], RBP	# char/short
272   	incl    RBX	# int
274   	cmpl    RBX, RCX
276   	jl,s   B39	# loop end  P=0.500000 C=3987.000000
276
278   B41: #	B44 B42 &lt;- B40  Freq: 0.568622
278   	movl    RBP, R11	# spill
27b   	subl    RBP, RBX	# int
27d   	andl    RBP, #-4	# int
280   	addl    RBP, RBX	# int
282   	cmpl    RBX, RBP
284   	jl,s   B44  P=0.999999 C=-1.000000
284
286   B42: #	B45 &lt;- B41  Freq: 5.76172e-007
286   	movl    RCX, RBX	# spill
288   	jmp,s   B45
      	nop 	# 6 bytes pad for loops and calls

290   B43: #	B44 &lt;- B44  top-of-loop Freq: 19.5439
290   	movl    RBX, RCX	# spill
290
292   B44: #	B43 B45 &lt;- B41 B43 	Loop: B44-B43 inner stride: not constant main of N306 Freq: 20.1125
292   	movl    RDX, RBX	# spill
294   	addl    RDX, R8	# int
297   	movzwl  RDI, [RAX + #16 + RDX &lt;&lt; #1]	# ushort/char
29d   	cmpl    RDI, R10
2a0   	movl    RCX, [rsp + #4]	# spill
2a4   	cmovlne RCX, RDI	# signed, int
2a7   	movw    [R9 + #16 + RBX &lt;&lt; #1], RCX	# char/short
2ad   	movl    RCX, RBX	# spill
2af   	addl    RCX, #4	# int
2b2   	movslq  RSI, RDX	# i2l
2b5   	movzwl  RDI, [RAX + #18 + RSI &lt;&lt; #1]	# ushort/char
2bb   	cmpl    RDI, R10
2be   	movl    RDX, [rsp + #4]	# spill
2c2   	cmovlne RDX, RDI	# signed, int
2c5   	movslq  RBX, RBX	# i2l
2c8   	movw    [R9 + #18 + RBX &lt;&lt; #1], RDX	# char/short
2ce   	movzwl  RDX, [RAX + #20 + RSI &lt;&lt; #1]	# ushort/char
2d3   	cmpl    RDX, R10
2d6   	movl    RDI, [rsp + #4]	# spill
2da   	cmovlne RDI, RDX	# signed, int
2dd   	movw    [R9 + #20 + RBX &lt;&lt; #1], RDI	# char/short
2e3   	movzwl  RDX, [RAX + #22 + RSI &lt;&lt; #1]	# ushort/char
2e8   	cmpl    RDX, R10
2eb   	movl    RDI, [rsp + #4]	# spill
2ef   	cmovlne RDI, RDX	# signed, int
2f2   	movw    [R9 + #22 + RBX &lt;&lt; #1], RDI	# char/short
2f8   	cmpl    RCX, RBP
2fa   	jl,s   B43	# loop end  P=0.971728 C=3987.000000
2fa
2fc   B45: #	B48 B46 &lt;- B42 B44  Freq: 0.568622
2fc   	cmpl    RCX, R11
2ff   	jge,s   B48  P=0.500000 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

304   B46: #	B62 B47 &lt;- B45 B47 	Loop: B46-B47 inner stride: not constant post of N529 Freq: 0.568621
304   	movl    RDI, RCX	# spill
306   	addl    RDI, R8	# int
309   	movzwl  RDI, [RAX + #16 + RDI &lt;&lt; #1]	# ushort/char
30f   	cmpl    RDI, R10
312   	movl    RBP, [rsp + #4]	# spill
316   	cmovlne RBP, RDI	# signed, int
319   	cmpl    RCX, R11	# unsigned
31c   	jnb,u  B62  P=0.000001 C=-1.000000
31c
322   B47: #	B46 B48 &lt;- B46  Freq: 0.568621
322   	movw    [R9 + #16 + RCX &lt;&lt; #1], RBP	# char/short
328   	incl    RCX	# int
32a   	cmpl    RCX, R11
32d   	jl,s   B46	# loop end  P=0.500000 C=3987.000000
32d
32f   B48: #	B59 B49 &lt;- B47 B45  Freq: 0.568621
32f   	# TLS is in R15
32f   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
333   	movq    R10, RAX	# spill
336   	addq    R10, #32	# ptr
33a   	# TLS is in R15
33a   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
341   	jnb,u  B59  P=0.000100 C=-1.000000
341
347   B49: #	B50 &lt;- B48  Freq: 0.568564
347   	# TLS is in R15
347   	movq    [R15 + #112 (8-bit)], R10	# ptr
34b   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch to non-temporal cache for write
353   	movl    R10, narrowoop: precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# compressed ptr
359   	movq    R10, [R12 + R10 &lt;&lt; 3 + #176] (compressed oop addressing)	# ptr
361   	movq    [RAX], R10	# ptr
364   	movl    [RAX + #8 (8-bit)], narrowoop: precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# compressed ptr
36b   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
36f   	movl    [RAX + #16 (8-bit)], R12	# int (R12_heapbase==0)
373   	movq    [RAX + #24 (8-bit)], R12	# long (R12_heapbase==0)
373
377   B50: #	B53 &lt;- B60 B49  Freq: 0.568621
377   	movl    [RAX + #20 (8-bit)], R11	# int
37b   	
37b   	# checkcastPP of RAX
37b   	encode_heap_oop_not_null R11,R9
402   	movl    [RAX + #12 (8-bit)], R11	# compressed ptr ! Field java/lang/String.value
406   	movq    R10, RAX	# ptr -&gt; long
409   	shrq    R10, #9
40d   	movl    R11, 0x0000000001b89000	# ptr (positive 32-bit)
413   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
417   	MEMBAR-release ! (empty encoding)
417   	jmp,s   B53
417
419   B51: #	B52 &lt;- B1  Freq: 4.76837e-007
419   	movq    RSI, RDX	# spill
419
41c   B52: #	B53 &lt;- B19 B51  Freq: 0.431372
41c   	movq    RAX, RSI	# spill
41c
41f   B53: #	N991 &lt;- B50 B52  Freq: 0.999993
41f   	addq	rsp, 64	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
42a   	ret
42a
42b   B54: #	B19 &lt;- B11  Freq: 0.183876
42b   	addl    RBX, #2	# int
42e   	jmp     B19
42e
433   B55: #	B19 &lt;- B12  Freq: 0.175084
433   	addl    RBX, #3	# int
436   	jmp     B19
436
43b   B56: #	B19 &lt;- B2  Freq: 0.035004
43b   	xorl    RBX, RBX	# int
43d   	jmp     B19
43d
442   B57: #	B68 B58 &lt;- B20 B21  Freq: 5.74482e-005
442   	movl    [rsp + #20], RBX	# spill
446   	movl    [rsp + #16], RBP	# spill
44a   	movl    [rsp + #12], R11	# spill
44f   	movl    [rsp + #8], R14	# spill
454   	movl    [rsp + #0], R8	# spill
458   	movl    RBP, R10	# spill
45b   	movq    RDX, precise klass [C: 0x000000000678d778:Constant:exact *	# ptr
465   	movl    R8, R11	# spill
468   	nop 	# 3 bytes pad for loops and calls
46b   	call,static  wrapper for: _new_array_Java
        # java.lang.String::replace @ bci:56  L[0]=_ L[1]=RBP L[2]=rsp + #4 L[3]=rsp + #12 L[4]=rsp + #20 L[5]=rsp + #8 L[6]=rsp + #0 L[7]=_ L[8]=_
        # OopMap{[8]=NarrowOop off=1136}
470
470   B58: #	B23 &lt;- B57  Freq: 5.7447e-005
        # Block is sole successor of call
470   	movl    R10, RBP	# spill
473   	movl    R8, [rsp + #0]	# spill
477   	movl    R14, [rsp + #8]	# spill
47c   	movl    R9, [rsp + #12]	# spill
481   	movl    RBP, [rsp + #16]	# spill
485   	movl    RBX, [rsp + #20]	# spill
489   	movl    R11, R9	# spill
48c   	movq    R9, RAX	# spill
48f   	jmp     B23
48f
494   B59: #	B69 B60 &lt;- B48  Freq: 5.68716e-005
494   	movq    RDX, precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# ptr
49e   	movl    [rsp + #8], R11	# spill
4a3   	movq    [rsp + #16], R9	# spill
4a8   	nop 	# 3 bytes pad for loops and calls
4ab   	call,static  wrapper for: _new_instance_Java
        # java.lang.String::replace @ bci:128  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #8 L[4]=_ L[5]=_ L[6]=_ L[7]=rsp + #16 L[8]=_
        # OopMap{[16]=Oop off=1200}
4b0
4b0   B60: #	B50 &lt;- B59  Freq: 5.68704e-005
        # Block is sole successor of call
4b0   	movl    R11, [rsp + #8]	# spill
4b5   	movq    R9, [rsp + #16]	# spill
4ba   	jmp     B50
4ba
4bf   B61: #	B62 &lt;- B39  Freq: 1.15235e-006
4bf   	movl    RCX, RBX	# spill
4bf
4c1   B62: #	N991 &lt;- B46 B61  Freq: 1.72852e-006
4c1   	movl    RDX, #-28	# int
4c6   	movl    [rsp + #0], R10	# spill
4ca   	movl    [rsp + #12], R8	# spill
4cf   	movq    [rsp + #24], R9	# spill
4d4   	movl    [rsp + #32], RCX	# spill
4d8   	movl    [rsp + #36], R11	# spill
4dd   	movl    [rsp + #40], R14	# spill
4e2   	nop 	# 1 bytes pad for loops and calls
4e3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::replace @ bci:121  L[0]=_ L[1]=rsp + #0 L[2]=rsp + #4 L[3]=rsp + #36 L[4]=rsp + #32 L[5]=rsp + #40 L[6]=rsp + #12 L[7]=rsp + #24 L[8]=_ STK[0]=rsp + #24 STK[1]=rsp + #32 STK[2]=RBP
        # OopMap{[24]=Oop [40]=NarrowOop off=1256}
4e8   	INT3   ; ShouldNotReachHere
4e8
4e9   B63: #	N991 &lt;- B4 B3  Freq: 1.95562e-006
4e9   	movl    RDX, #-122	# int
4ee   	movl    RBP, R10	# spill
4f1   	movl    [rsp + #0], R9	# spill
4f5   	movl    [rsp + #4], R8	# spill
4fa   	movq    [rsp + #8], RSI	# spill
4ff   	movl    [rsp + #16], R11	# spill
504   	movl    [rsp + #20], R14	# spill
509   	nop 	# 2 bytes pad for loops and calls
50b   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:34  L[0]=rsp + #8 L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #16 L[4]=#0 L[5]=rsp + #20 L[6]=rsp + #4 L[7]=_ L[8]=_
        # OopMap{[8]=Oop [20]=NarrowOop off=1296}
510   	INT3   ; ShouldNotReachHere
510
511   B64: #	B65 &lt;- B27  Freq: 8.56614e-007
511   	movl    RCX, RDI	# spill
511
513   B65: #	N991 &lt;- B34 B64  Freq: 1.28492e-006
513   	movl    RDX, #-28	# int
518   	movl    RBP, R10	# spill
51b   	movl    R10, [rsp + #4]	# spill
520   	movl    [rsp + #0], R10	# spill
524   	movl    [rsp + #4], RBX	# spill
528   	movl    [rsp + #8], R8	# spill
52d   	movq    [rsp + #24], R9	# spill
532   	movl    [rsp + #12], R11	# spill
537   	movl    [rsp + #32], R14	# spill
53c   	movl    [rsp + #40], RCX	# spill
540   	movl    [rsp + #44], RSI	# spill
544   	nop 	# 3 bytes pad for loops and calls
547   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::replace @ bci:82  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #12 L[4]=rsp + #4 L[5]=rsp + #32 L[6]=rsp + #8 L[7]=rsp + #24 L[8]=rsp + #40 STK[0]=rsp + #24 STK[1]=rsp + #40 STK[2]=rsp + #44
        # OopMap{[24]=Oop [32]=NarrowOop off=1356}
54c   	INT3   ; ShouldNotReachHere
54c
54d   B66: #	N991 &lt;- B37 B36  Freq: 1.15235e-006
54d   	movl    RDX, #-122	# int
552   	movl    RBP, R10	# spill
555   	movl    RCX, [rsp + #4]	# spill
559   	movl    [rsp + #0], RCX	# spill
55c   	movl    [rsp + #4], RBX	# spill
560   	movl    [rsp + #8], R8	# spill
565   	movq    [rsp + #16], R9	# spill
56a   	movl    [rsp + #12], R11	# spill
56f   	movl    [rsp + #24], R14	# spill
574   	nop 	# 3 bytes pad for loops and calls
577   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:95  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #12 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=_
        # OopMap{[16]=Oop [24]=NarrowOop off=1404}
57c   	INT3   ; ShouldNotReachHere
57c
57d   B67: #	N991 &lt;- B25 B24  Freq: 8.56617e-007
57d   	movl    RDX, #-122	# int
582   	movl    RBP, R10	# spill
585   	movl    RCX, [rsp + #4]	# spill
589   	movl    [rsp + #0], RCX	# spill
58c   	movl    [rsp + #4], RBX	# spill
590   	movl    [rsp + #8], R8	# spill
595   	movq    [rsp + #16], R9	# spill
59a   	movl    [rsp + #12], R11	# spill
59f   	movl    [rsp + #24], R14	# spill
5a4   	nop 	# 3 bytes pad for loops and calls
5a7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::replace @ bci:70  L[0]=_ L[1]=RBP L[2]=rsp + #0 L[3]=rsp + #12 L[4]=rsp + #4 L[5]=rsp + #24 L[6]=rsp + #8 L[7]=rsp + #16 L[8]=#0
        # OopMap{[16]=Oop [24]=NarrowOop off=1452}
5ac   	INT3   ; ShouldNotReachHere
5ac
5ad   B68: #	B70 &lt;- B57  Freq: 5.74482e-010
5ad   	# exception oop is in rax; no code emitted
5ad   	movq    RDX, RAX	# spill
5b0   	jmp,s   B70
5b0
5b2   B69: #	B70 &lt;- B59  Freq: 5.68716e-010
5b2   	# exception oop is in rax; no code emitted
5b2   	movq    RDX, RAX	# spill
5b2
5b5   B70: #	N991 &lt;- B68 B69  Freq: 1.1432e-009
5b5   	addq	rsp, 64	# Destroy frame
	popq	rbp

5ba   	jmp     rethrow_stub
5ba

</opto_assembly>
<writer thread='3996'/>
<opto_assembly compile_id='7'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;lastIndexOf&apos;
 - signature:         &apos;(II)I&apos;
 - max stack:         3
 - max locals:        8
 - size of params:    3
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670fa28
 - compiled entry     0x000000000277c8f9
 - code size:         156
 - code start:        0x000000077ae113e0
 - code end (excl):   0x000000077ae1147c
 - method data:       0x000000077b0ec8b8
 - checked ex length: 0
 - linenumber start:  0x000000077ae1147c
 - localvar length:   8
 - localvar start:    0x000000077ae1149e
#
#  int ( java/lang/String:NotNull:exact *, int, int )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8   : parm 1: int
#r006 r9   : parm 2: int
# -- Old rsp -- Framesize: 80 --
#r089 rsp+76: pad2, in_preserve
#r088 rsp+72: pad2, in_preserve
#r087 rsp+68: pad2, in_preserve
#r086 rsp+64: pad2, in_preserve
#r085 rsp+60: pad2, in_preserve
#r084 rsp+56: return address
#r083 rsp+52: Fixed slot 1
#r082 rsp+48: Fixed slot 0
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N770: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B26 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #64	# Create frame
02c   	movq    RCX, RDX	# spill
02f   	movl    RSI, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
033   	movl    R11, [RDX + #16 (8-bit)]	# int ! Field java/lang/String.offset
037   	movl    RAX, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
03a   	movl    RDI, R11	# spill
03d   	decl    RDI	# int
03f   	movl    RBX, RAX	# spill
041   	decl    RBX	# int
043   	cmpl    R9, RAX
046   	cmovll RBX, R9	# signed, int
04a   	addl    RBX, R11	# int
04d   	movl    RBP, RBX	# spill
04f   	decl    RBP	# int
051   	movl    R10, R8	# spill
054   	cmpl    R8, #65536
05b   	jge     B26  P=0.000000 C=414.000000
05b
061   B2: #	B17 B3 &lt;- B1  Freq: 1
061   	cmpl    RBX, R11
064   	jl     B17  P=0.004299 C=10235.000000
064
06a   B3: #	B25 B4 &lt;- B2  Freq: 0.995701
06a   	movl    R9, [R12 + RSI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
06f   	NullCheck RSI
06f
06f   B4: #	B25 B5 &lt;- B3  Freq: 0.9957
06f   	cmpl    RBX, R9	# unsigned
072   	jnb,u  B25  P=0.000001 C=-1.000000
072
078   B5: #	B6 &lt;- B4  Freq: 0.995699
078   	decode_heap_oop_not_null R8,RSI
078
07c   B6: #	B23 B7 &lt;- B5 B7 	Loop: B6-B7 inner stride: not constant pre of N425 Freq: 1.92145
07c   	movzwl  RCX, [R8 + #16 + RBX &lt;&lt; #1]	# ushort/char
082   	cmpl    RCX, R10
085   	je     B23  P=0.036405 C=10191.000000
085
08b   B7: #	B6 B8 &lt;- B6  Freq: 1.8515
08b   	decl    RBX	# int
08d   	cmpl    RBX, RBP
08f   	jg,s   B6	# loop end  P=0.500000 C=9820.000000
08f
091   B8: #	B14 B9 &lt;- B7  Freq: 0.925749
091   	movl    RCX, RBX	# spill
093   	subl    RCX, R11	# int
096   	incl    RCX	# int
098   	andl    RCX, #-2	# int
09b   	movl    RDX, RCX	# spill
09d   	negl    RDX	# int
09f   	sarl    RDX, #31
0a2   	shrl    RDX, #31
0a5   	subl    RDX, RCX	# int
0a7   	sarl    RDX, #1
0a9   	negl    RDX	# int
0ab   	andl    RDX, #-2	# int
0ae   	sall    RDX, #1
0b0   	movl    R9, RBX	# spill
0b3   	subl    R9, RDX	# int
0b6   	cmpl    RBX, R9
0b9   	jle,s   B14  P=0.000001 C=-1.000000
      	nop 	# 5 bytes pad for loops and calls

0c0   B9: #	B20 B10 &lt;- B8 B13 	Loop: B9-B13 inner stride: not constant main of N109 Freq: 6.53941
0c0   	movzwl  RDX, [R8 + #16 + RBX &lt;&lt; #1]	# ushort/char
0c6   	cmpl    RDX, R10
0c9   	je,s   B20  P=0.036405 C=10191.000000
0c9
0cb   B10: #	B18 B11 &lt;- B9  Freq: 6.30134
0cb   	movzwl  RDX, [R8 + #14 + RBX &lt;&lt; #1]	# ushort/char
0d1   	cmpl    RDX, R10
0d4   	je,s   B18  P=0.036405 C=10191.000000
0d4
0d6   B11: #	B21 B12 &lt;- B10  Freq: 6.07195
0d6   	movl    RAX, RBX	# spill
0d8   	addl    RAX, #-2	# int
0db   	movzwl  RCX, [R8 + #16 + RAX &lt;&lt; #1]	# ushort/char
0e1   	cmpl    RCX, R10
0e4   	je,s   B21  P=0.036405 C=10191.000000
0e4
0e6   B12: #	B19 B13 &lt;- B11  Freq: 5.8509
0e6   	movzwl  RCX, [R8 + #14 + RAX &lt;&lt; #1]	# ushort/char
0ec   	cmpl    RCX, R10
0ef   	je,s   B19  P=0.036405 C=10191.000000
0ef
0f1   B13: #	B9 B14 &lt;- B12  Freq: 5.6379
0f1   	addl    RBX, #-4	# int
0f4   	cmpl    RBX, R9
0f7   	jg,s   B9	# loop end  P=0.995701 C=9820.000000
0f7
0f9   B14: #	B17 B15 &lt;- B8 B13  Freq: 0.0242382
0f9   	cmpl    RBX, RDI
0fb   	jle,s   B17  P=0.500000 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

100   B15: #	B24 B16 &lt;- B14 B16 	Loop: B15-B16 inner stride: not constant post of N425 Freq: 0.0233868
100   	movzwl  R9, [R8 + #16 + RBX &lt;&lt; #1]	# ushort/char
106   	cmpl    R9, R10
109   	je,s   B24  P=0.036405 C=10191.000000
109
10b   B16: #	B15 B17 &lt;- B15  Freq: 0.0225354
10b   	decl    RBX	# int
10d   	cmpl    RBX, RDI
10f   	jg,s   B15	# loop end  P=0.500000 C=9820.000000
10f
111   B17: #	B22 &lt;- B14 B2 B16  Freq: 0.0276858
111   	movl    RAX, #-1	# int
116   	jmp,s   B22
116
118   B18: #	B19 &lt;- B10  Freq: 0.229398
118   	movl    RAX, RBX	# spill
118
11a   B19: #	B21 &lt;- B18 B12  Freq: 0.442398
11a   	decl    RAX	# int
11c   	jmp,s   B21
11c
11e   B20: #	B21 &lt;- B9  Freq: 0.238065
11e   	movl    RAX, RBX	# spill
11e
120   B21: #	B22 &lt;- B24 B23 B20 B11 B19  Freq: 0.972312
120   	subl    RAX, R11	# int
123
123   B22: #	N770 &lt;- B21 B17 B54 B45  Freq: 0.999998
123   	addq	rsp, 64	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
12e   	ret
12e
12f   B23: #	B21 &lt;- B6  Freq: 0.0699497
12f   	movl    RAX, RBX	# spill
131   	jmp,s   B21
131
133   B24: #	B21 &lt;- B15  Freq: 0.000851388
133   	movl    RAX, RBX	# spill
135   	jmp,s   B21
135
137   B25: #	N770 &lt;- B4 B3  Freq: 2.01784e-006
137   	movl    RDX, #-122	# int
13c   	movl    RBP, R8	# spill
13f   	movl    [rsp + #0], RBX	# spill
142   	movq    [rsp + #8], RCX	# spill
147   	movl    [rsp + #4], R11	# spill
14c   	movl    [rsp + #16], RSI	# spill
150   	nop 	# 3 bytes pad for loops and calls
153   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:48  L[0]=rsp + #8 L[1]=RBP L[2]=_ L[3]=rsp + #4 L[4]=rsp + #16 L[5]=rsp + #0 L[6]=_ L[7]=_
        # OopMap{[8]=Oop [16]=NarrowOop off=344}
158   	INT3   ; ShouldNotReachHere
158
159   B26: #	B45 B27 &lt;- B1  Freq: 4.76837e-007
159   	cmpl    R8, #1114111
160   	jg     B45  P=0.500000 C=-1.000000
160
166   B27: #	B72 B28 &lt;- B26  Freq: 2.38419e-007
166   	movl    [rsp + #20], RBX	# spill
16a   	movl    [rsp + #16], RDI	# spill
16e   	movl    [rsp + #0], RSI	# spill
171   	movq    [rsp + #8], RDX	# spill
176   	movl    [rsp + #4], R11	# spill
17b   	addl    R11, RAX	# int
17e   	movl    [rsp + #24], R11	# spill
183   	movl    RDX, R10	# spill
186   	nop 	# 1 bytes pad for loops and calls
187   	call,static  java.lang.Character::toChars
        # java.lang.String::lastIndexOf @ bci:91  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #4 L[4]=rsp + #0 L[5]=rsp + #20 L[6]=rsp + #24 L[7]=_
        # OopMap{[0]=NarrowOop [8]=Oop off=396}
18c
18c   B28: #	B45 B29 &lt;- B27  Freq: 2.38414e-007
        # Block is sole successor of call
18c   	movq    R10, RAX	# spill
18f   	movl    RCX, [rsp + #20]	# spill
193   	cmpl    RCX, [RSP + #4 (32-bit)]
197   	jl     B45  P=0.500000 C=-1.000000
197
19d   B29: #	B68 B30 &lt;- B28  Freq: 1.19207e-007
19d   	movl    RSI, [rsp + #0]	# spill
1a0   	movl    R8, [R12 + RSI &lt;&lt; 3 + #12] (compressed oop addressing)	# range
1a5   	NullCheck RSI
1a5
1a5   B30: #	B69 B31 &lt;- B29  Freq: 1.19207e-007
1a5   	cmpl    RCX, R8	# unsigned
1a8   	jnb,u  B69  P=0.000001 C=-1.000000
1a8
1ae   B31: #	B70 B32 &lt;- B30  Freq: 1.19207e-007
1ae   	movq    RDI, RAX	# spill
1b1   	movl    R11, [RAX + #12 (8-bit)]	# range
1b5   	NullCheck RAX
1b5
1b5   B32: #	B70 B33 &lt;- B31  Freq: 1.19207e-007
1b5   	cmpl    R11, #1	# unsigned
1b9   	jbe,u  B70  P=0.000001 C=-1.000000
1b9
1bf   B33: #	B34 &lt;- B32  Freq: 1.19206e-007
1bf   	movzwl  RAX, [RAX + #18 (8-bit)]	# ushort/char
1c3   	movzwl  RBX, [R10 + #16 (8-bit)]	# ushort/char
1c8   	decode_heap_oop_not_null R10,RSI
1cc   	movl    R9, R8	# spill
1cf   	addl    R9, #-2	# int
1d3   	cmpl    R9, RBP
1d6   	cmovlgt R9, RBP	# min
1da   	cmpl    R9, [RSP + #16 (32-bit)]
1df   	movl    RDX, [rsp + #16]	# spill
1e3   	cmovllt R9, RDX	# max
      	nop 	# 1 bytes pad for loops and calls

1e8   B34: #	B46 B35 &lt;- B33 B35 	Loop: B34-B35 inner stride: not constant pre of N395 Freq: 1.01799e-006
1e8   	movzwl  R11, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
1ee   	cmpl    R11, RBX
1f1   	je     B46  P=0.100000 C=-1.000000
1f1
1f7   B35: #	B34 B36 &lt;- B48 B34  Freq: 9.98645e-007
1f7   	decl    RCX	# int
1f9   	cmpl    RCX, R9
1fc   	jg,s   B34	# loop end  P=0.900000 C=-1.000000
1fc
1fe   B36: #	B42 B37 &lt;- B35  Freq: 9.98646e-008
1fe   	movl    RBP, #-3	# int
203   	movl    R11, #-2	# int
209   	cmpl    RDX, R11
20c   	movl    R9, RDX	# spill
20f   	cmovllt R9, R11	# max
213   	movl    R13, RCX	# spill
216   	subl    R13, R9	# int
219   	andl    R13, #-2	# int
21d   	movl    R11, #-1	# int
223   	subl    R11, R13	# int
226   	movl    R13, R11	# spill
229   	sarl    R13, #31
22d   	shrl    R13, #31
231   	addl    R13, R11	# int
234   	sarl    R13, #1
237   	negl    R13	# int
23a   	sall    R13, #1
23d   	movl    R11, R13	# spill
240   	negl    R11	# int
243   	sarl    R11, #31
247   	shrl    R11, #31
24b   	subl    R11, R13	# int
24e   	sarl    R11, #1
251   	negl    R11	# int
254   	andl    R11, #-2	# int
258   	sall    R11, #1
25b   	subl    RBP, R11	# int
25e   	movl    R11, RBP	# spill
261   	sarl    R11, #31
265   	shrl    R11, #30
269   	addl    R11, RBP	# int
26c   	sarl    R11, #2
270   	negl    R11	# int
273   	sall    R11, #2
277   	movl    RBP, RCX	# spill
279   	subl    RBP, R11	# int
27c   	cmpl    RCX, RBP
27e   	jle,s   B42  P=0.000001 C=-1.000000
27e
280   B37: #	B50 B38 &lt;- B36 B41 	Loop: B37-B41 inner stride: not constant main of N338 Freq: 5.99876e-007
280   	movzwl  R9, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
286   	cmpl    R9, RBX
289   	je     B50  P=0.100000 C=-1.000000
289
28f   B38: #	B55 B39 &lt;- B51 B37  Freq: 5.88478e-007
28f   	movzwl  R9, [R10 + #14 + RCX &lt;&lt; #1]	# ushort/char
295   	movl    R11, RCX	# spill
298   	decl    R11	# int
29b   	cmpl    R9, RBX
29e   	je     B55  P=0.100000 C=-1.000000
29e
2a4   B39: #	B58 B40 &lt;- B56 B38  Freq: 5.77297e-007
2a4   	movl    R9, RCX	# spill
2a7   	addl    R9, #-2	# int
2ab   	movzwl  R13, [R10 + #16 + R9 &lt;&lt; #1]	# ushort/char
2b1   	cmpl    R13, RBX
2b4   	je     B58  P=0.100000 C=-1.000000
2b4
2ba   B40: #	B61 B41 &lt;- B59 B39  Freq: 5.66328e-007
2ba   	movzwl  R13, [R10 + #14 + R9 &lt;&lt; #1]	# ushort/char
2c0   	cmpl    R13, RBX
2c3   	je     B61  P=0.100000 C=-1.000000
2c3
2c9   B41: #	B37 B42 &lt;- B62 B40  Freq: 5.55568e-007
2c9   	addl    RCX, #-4	# int
2cc   	cmpl    RCX, RBP
2ce   	jg,s   B37	# loop end  P=0.900000 C=-1.000000
2ce
2d0   B42: #	B45 B43 &lt;- B36 B41  Freq: 5.55569e-008
2d0   	cmpl    RCX, RDX
2d2   	jle,s   B45  P=0.500000 C=-1.000000
2d2
2d4   B43: #	B64 B44 &lt;- B42 B44 	Loop: B43-B44 inner stride: not constant post of N395 Freq: 2.3722e-007
2d4   	movzwl  R11, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
2da   	cmpl    R11, RBX
2dd   	je     B64  P=0.100000 C=-1.000000
2dd
2e3   B44: #	B43 B45 &lt;- B66 B43  Freq: 2.32713e-007
2e3   	decl    RCX	# int
2e5   	cmpl    RCX, RDX
2e7   	jg,s   B43	# loop end  P=0.900000 C=-1.000000
2e7
2e9   B45: #	B22 &lt;- B44 B42 B64 B58 B46 B50 B55 B61 B28 B26  Freq: 4.44547e-007
2e9   	movl    RAX, #-1	# int
2ee   	jmp     B22
2ee
2f3   B46: #	B45 B47 &lt;- B34  Freq: 1.01799e-007
2f3   	movl    RBP, RCX	# spill
2f5   	incl    RBP	# int
2f7   	cmpl    RBP, [RSP + #24 (32-bit)]
2fb   	je,s   B45  P=0.100000 C=-1.000000
2fb
2fd   B47: #	B71 B48 &lt;- B46  Freq: 9.16189e-008
2fd   	cmpl    RBP, R8	# unsigned
300   	jnb,u  B71  P=0.000001 C=-1.000000
300
306   B48: #	B35 B49 &lt;- B47  Freq: 9.16188e-008
306   	movslq  R11, RCX	# i2l
309   	movzwl  R11, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
30f   	cmpl    R11, RAX
312   	jne     B35  P=0.900000 C=-1.000000
312
318   B49: #	B54 &lt;- B48  Freq: 9.16188e-009
318   	jmp,s   B54
318
31a   B50: #	B45 B51 &lt;- B37  Freq: 5.99876e-008
31a   	movl    R9, RCX	# spill
31d   	incl    R9	# int
320   	cmpl    R9, [RSP + #24 (32-bit)]
325   	je,s   B45  P=0.100000 C=-1.000000
325
327   B51: #	B38 B52 &lt;- B50  Freq: 5.39888e-008
327   	movslq  R11, RCX	# i2l
32a   	movzwl  R11, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
330   	cmpl    R11, RAX
333   	jne     B38  P=0.900000 C=-1.000000
333
339   B52: #	B53 &lt;- B51  Freq: 5.39889e-009
339   	movl    R9, RCX	# spill
339
33c   B53: #	B54 &lt;- B52 B60  Freq: 1.05946e-008
33c   	movl    RCX, R9	# spill
33c
33f   B54: #	B22 &lt;- B67 B49 B53 B57 B63  Freq: 3.22847e-008
33f   	movl    RAX, RCX	# spill
341   	movq    R10, [rsp + #8]	# spill
346   	subl    RAX, [R10 + #16 (8-bit)]	# int
34a   	jmp     B22
34a
34f   B55: #	B45 B56 &lt;- B38  Freq: 5.88478e-008
34f   	cmpl    RCX, [RSP + #24 (32-bit)]
353   	je,s   B45  P=0.100000 C=-1.000000
353
355   B56: #	B39 B57 &lt;- B55  Freq: 5.2963e-008
355   	movzwl  R9, [R10 + #16 + RCX &lt;&lt; #1]	# ushort/char
35b   	cmpl    R9, RAX
35e   	jne     B39  P=0.900000 C=-1.000000
35e
364   B57: #	B54 &lt;- B56  Freq: 5.29631e-009
364   	movl    RCX, R11	# spill
367   	jmp,s   B54
367
369   B58: #	B45 B59 &lt;- B39  Freq: 5.77297e-008
369   	cmpl    R11, [RSP + #24 (32-bit)]
36e   	je     B45  P=0.100000 C=-1.000000
36e
374   B59: #	B40 B60 &lt;- B58  Freq: 5.19568e-008
374   	movzwl  R13, [R10 + #14 + RCX &lt;&lt; #1]	# ushort/char
37a   	cmpl    R13, RAX
37d   	jne     B40  P=0.900000 C=-1.000000
37d
383   B60: #	B53 &lt;- B59  Freq: 5.19568e-009
383   	jmp,s   B53
383
385   B61: #	B45 B62 &lt;- B40  Freq: 5.66329e-008
385   	cmpl    R9, [RSP + #24 (32-bit)]
38a   	je     B45  P=0.100000 C=-1.000000
38a
390   B62: #	B41 B63 &lt;- B61  Freq: 5.09696e-008
390   	movzwl  R11, [R10 + #16 + R9 &lt;&lt; #1]	# ushort/char
396   	cmpl    R11, RAX
399   	jne     B41  P=0.900000 C=-1.000000
399
39f   B63: #	B54 &lt;- B62  Freq: 5.09696e-009
39f   	addl    RCX, #-3	# int
3a2   	jmp,s   B54
3a2
3a4   B64: #	B45 B65 &lt;- B43  Freq: 2.3722e-008
3a4   	movl    RBP, RCX	# spill
3a6   	incl    RBP	# int
3a8   	cmpl    RBP, [RSP + #24 (32-bit)]
3ac   	je     B45  P=0.100000 C=-1.000000
3ac
3b2   B65: #	B71 B66 &lt;- B64  Freq: 2.13498e-008
3b2   	cmpl    RBP, R8	# unsigned
3b5   	jnb,us  B71  P=0.000001 C=-1.000000
3b5
3b7   B66: #	B44 B67 &lt;- B65  Freq: 2.13498e-008
3b7   	movslq  R11, RCX	# i2l
3ba   	movzwl  R9, [R10 + #18 + R11 &lt;&lt; #1]	# ushort/char
3c0   	cmpl    R9, RAX
3c3   	jne     B44  P=0.900000 C=-1.000000
3c3
3c9   B67: #	B54 &lt;- B66  Freq: 2.13498e-009
3c9   	jmp     B54
3c9
3ce   B68: #	B70 &lt;- B29  Freq: 1.2079e-013
3ce   	movq    RDI, RAX	# spill
3d1   	jmp,s   B70
3d1
3d3   B69: #	B70 &lt;- B30  Freq: 1.2079e-013
3d3   	movq    RDI, RAX	# spill
3d3
3d6   B70: #	N770 &lt;- B32 B68 B69 B31  Freq: 4.81576e-013
3d6   	movl    RDX, #-122	# int
3db   	movl    RBP, RCX	# spill
3dd   	movq    [rsp + #16], RDI	# spill
3e2   	nop 	# 1 bytes pad for loops and calls
3e3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::lastIndexOf @ bci:102  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #4 L[4]=rsp + #0 L[5]=RBP L[6]=rsp + #24 L[7]=rsp + #16
        # OopMap{[0]=NarrowOop [8]=Oop [16]=Oop off=1000}
3e8   	INT3   ; ShouldNotReachHere
3e8
3e9   B71: #	N770 &lt;- B65 B47  Freq: 1.14469e-013
3e9   	movl    RDX, #-28	# int
3ee   	movl    [rsp + #0], RCX	# spill
3f1   	movq    [rsp + #32], RDI	# spill
3f6   	movl    [rsp + #20], RSI	# spill
3fa   	nop 	# 1 bytes pad for loops and calls
3fb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.lang.String::lastIndexOf @ bci:132  L[0]=rsp + #8 L[1]=_ L[2]=_ L[3]=rsp + #4 L[4]=rsp + #20 L[5]=rsp + #0 L[6]=rsp + #24 L[7]=rsp + #32 STK[0]=rsp + #20 STK[1]=RBP
        # OopMap{[8]=Oop [20]=NarrowOop [32]=Oop off=1024}
400   	INT3   ; ShouldNotReachHere
400
401   B72: #	N770 &lt;- B27  Freq: 2.38419e-012
401   	# exception oop is in rax; no code emitted
401   	movq    RDX, RAX	# spill
404   	addq	rsp, 64	# Destroy frame
	popq	rbp

409   	jmp     rethrow_stub
409

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='8'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/google/common/base/CharMatcher$LookupTable&apos;
 - constants:         0x00000000088cffa0constant pool [37] for &apos;com/google/common/base/CharMatcher$LookupTable&apos;
 - access:            0x81000000  
 - name:              &apos;set&apos;
 - signature:         &apos;(C)V&apos;
 - max stack:         5
 - max locals:        2
 - size of params:    2
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         15
 - code start:        0x000000077b147b00
 - code end (excl):   0x000000077b147b0f
 - method data:       0x000000077b14a7b8
 - checked ex length: 0
 - linenumber start:  0x000000077b147b0f
 - localvar length:   2
 - localvar start:    0x000000077b147b16
#
#  void ( com/google/common/base/CharMatcher$LookupTable:NotNull:exact *, char )
#
#r016 rdx:rdx   : parm 0: com/google/common/base/CharMatcher$LookupTable:NotNull:exact *
#r004 r8   : parm 1: char
# -- Old rsp -- Framesize: 48 --
#r089 rsp+44: pad2, in_preserve
#r088 rsp+40: pad2, in_preserve
#r087 rsp+36: pad2, in_preserve
#r086 rsp+32: pad2, in_preserve
#r085 rsp+28: pad2, in_preserve
#r084 rsp+24: return address
#r083 rsp+20: Fixed slot 1
#r082 rsp+16: Fixed slot 0
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N62: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B5 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #32	# Create frame
02c   	movl    R10, [RDX + #12 (8-bit)]	# compressed ptr ! Field com/google/common/base/CharMatcher$LookupTable.data
030   	movl    R11, R8	# spill
033   	sarl    R11, #5
037   	movl    R9, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
03c   	NullCheck R10
03c
03c   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
03c   	cmpl    R11, R9	# unsigned
03f   	jnb,us  B4  P=0.000001 C=-1.000000
03f
041   B3: #	N62 &lt;- B2  Freq: 0.999998
041   	decode_heap_oop_not_null R10,R10
045   	movl    R9, #1	# int
04b   	movl    RCX, R8	# spill
04e   	sall    R9, RCX
051   	orl     [R10 + #16 + R11 &lt;&lt; #2], R9	# int
056   	addq	rsp, 32	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
061   	ret
061
062   B4: #	N62 &lt;- B2  Freq: 1.01328e-006
062   	movl    RDX, #-28	# int
067   	movl    RBP, R8	# spill
06a   	movl    [rsp + #8], R10	# spill
06f   	movl    [rsp + #12], R11	# spill
074   	nop 	# 3 bytes pad for loops and calls
077   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.google.common.base.CharMatcher$LookupTable::set @ bci:8  L[0]=_ L[1]=RBP STK[0]=rsp + #8 STK[1]=rsp + #12 STK[2]=rsp + #8 STK[3]=rsp + #12
        # OopMap{[8]=NarrowOop off=124}
07c   	INT3   ; ShouldNotReachHere
07c
07d   B5: #	N62 &lt;- B1  Freq: 1.01328e-006
07d   	movl    RDX, #-10	# int
082   	movl    RBP, R11	# spill
085   	nop 	# 2 bytes pad for loops and calls
087   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.google.common.base.CharMatcher$LookupTable::set @ bci:8  L[0]=_ L[1]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=140}
08c   	INT3   ; ShouldNotReachHere
08c

</opto_assembly>
<writer thread='3996'/>
<opto_assembly compile_id='9'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/google/common/base/CharMatcher$12&apos;
 - constants:         0x00000000088cffa0constant pool [55] for &apos;com/google/common/base/CharMatcher$12&apos;
 - access:            0xc1000000  
 - name:              &apos;setBits&apos;
 - signature:         &apos;(Lcom/google/common/base/CharMatcher$LookupTable;)V&apos;
 - max stack:         3
 - max locals:        3
 - size of params:    2
 - method size:       15
 - vtable index:      11
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f500
 - compiled entry     0x000000000276e475
 - code size:         27
 - code start:        0x000000077b134e88
 - code end (excl):   0x000000077b134ea3
 - method data:       0x000000077b14a848
 - checked ex length: 0
 - linenumber start:  0x000000077b134ea3
 - localvar length:   3
 - localvar start:    0x000000077b134eb2
#
#  void ( com/google/common/base/CharMatcher$12:NotNull:exact *, com/google/common/base/CharMatcher$LookupTable:exact * )
#
#r016 rdx:rdx   : parm 0: com/google/common/base/CharMatcher$12:NotNull:exact *
#r004 r8:r8   : parm 1: com/google/common/base/CharMatcher$LookupTable:exact *
# -- Old rsp -- Framesize: 64 --
#r089 rsp+60: pad2, in_preserve
#r088 rsp+56: pad2, in_preserve
#r087 rsp+52: pad2, in_preserve
#r086 rsp+48: pad2, in_preserve
#r085 rsp+44: pad2, in_preserve
#r084 rsp+40: return address
#r083 rsp+36: Fixed slot 1
#r082 rsp+32: Fixed slot 0
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N145: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B12 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #48	# Create frame
02c   	movq    R10, RDX	# spill
02f   	movzwl  RCX, [RDX + #12 (8-bit)]	# ushort/char ! Field com/google/common/base/CharMatcher$12.val$startInclusive
033   	movl    RBX, [R8 + #12 (8-bit)]	# compressed ptr ! Field com/google/common/base/CharMatcher$LookupTable.data
037   	NullCheck R8
037
037   B2: #	B13 B3 &lt;- B1  Freq: 0.999999
037   	movl    RBP, RCX	# spill
039   	sarl    RBP, #5
03c   	movl    RDX, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
041   	NullCheck RBX
041
041   B3: #	B11 B4 &lt;- B2  Freq: 0.999998
041   	cmpl    RBP, RDX	# unsigned
043   	jnb,u  B11  P=0.000001 C=-1.000000
043
049   B4: #	B9 B5 &lt;- B3  Freq: 0.999997
049   	movzwl  RDI, [R10 + #14 (8-bit)]	# ushort/char ! Field com/google/common/base/CharMatcher$12.val$endInclusive
04e   	decode_heap_oop_not_null R11,RBX
052   	movl    RSI, #1	# int
057   	sall    RSI, RCX
059   	orl     [R11 + #16 + RBP &lt;&lt; #2], RSI	# int
05e   	cmpl    RCX, RDI
060   	je,s   B9  P=0.001216 C=9046.000000
060
062   B5: #	B7 &lt;- B4  Freq: 0.998781
062   	incl    RCX	# int
064   	movzwl  RCX, RCX	# int &amp; 0xFFFF
067   	jmp,s   B7
      	nop 	# 7 bytes pad for loops and calls

070   B6: #	B7 &lt;- B8  top-of-loop Freq: 819.688
070   	movl    RCX, RSI	# spill
070
072   B7: #	B10 B8 &lt;- B5 B6 	Loop: B7-B6 inner  Freq: 820.687
072   	movl    R9, RCX	# spill
075   	sarl    R9, #5
079   	cmpl    R9, RDX	# unsigned
07c   	jnb,us  B10  P=0.000001 C=-1.000000
07c
07e   B8: #	B6 B9 &lt;- B7  Freq: 820.686
07e   	movl    RSI, #1	# int
083   	sall    RSI, RCX
085   	orl     [R11 + #16 + R9 &lt;&lt; #2], RSI	# int
08a   	movl    RSI, RCX	# spill
08c   	incl    RSI	# int
08e   	movzwl  RSI, RSI	# int &amp; 0xFFFF
091   	testl   rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC        # com.google.common.base.CharMatcher$12::setBits @ bci:20  L[0]=R10 L[1]=R8 L[2]=RSI STK[0]=RCX STK[1]=RDI
        # OopMap{r10=Oop r11=Oop r8=Oop rbx=NarrowOop off=145}
097   	cmpl    RCX, RDI
099   	jne,s   B6  P=0.998784 C=9046.000000
099
09b   B9: #	N145 &lt;- B8 B4  Freq: 0.999165
09b   	addq	rsp, 48	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
0a6   	ret
0a6
0a7   B10: #	N145 &lt;- B7  Freq: 0.000831585
0a7   	movl    RDX, #-28	# int
0ac   	movq    RBP, R10	# spill
0af   	movq    [rsp + #0], R8	# spill
0b3   	movl    [rsp + #12], RCX	# spill
0b7   	movl    [rsp + #20], R9	# spill
0bc   	movl    [rsp + #28], RBX	# spill
0c0   	nop 	# 3 bytes pad for loops and calls
0c3   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.google.common.base.CharMatcher$LookupTable::set @ bci:8  L[0]=_ L[1]=rsp + #12 STK[0]=rsp + #28 STK[1]=rsp + #20 STK[2]=rsp + #28 STK[3]=rsp + #20
        # com.google.common.base.CharMatcher$12::setBits @ bci:7  L[0]=RBP L[1]=rsp + #0 L[2]=rsp + #12
        # OopMap{rbp=Oop [0]=Oop [28]=NarrowOop off=200}
0c8   	INT3   ; ShouldNotReachHere
0c8
0c9   B11: #	N145 &lt;- B3  Freq: 1.01328e-006
0c9   	movl    RDX, #-28	# int
0ce   	movq    [rsp + #0], R10	# spill
0d2   	movq    [rsp + #8], R8	# spill
0d7   	movl    [rsp + #20], RCX	# spill
0db   	movl    [rsp + #28], RBX	# spill
0df   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.google.common.base.CharMatcher$LookupTable::set @ bci:8  L[0]=_ L[1]=rsp + #20 STK[0]=rsp + #28 STK[1]=RBP STK[2]=rsp + #28 STK[3]=RBP
        # com.google.common.base.CharMatcher$12::setBits @ bci:7  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #20
        # OopMap{[0]=Oop [8]=Oop [28]=NarrowOop off=228}
0e4   	INT3   ; ShouldNotReachHere
0e4
0e5   B12: #	N145 &lt;- B1  Freq: 1.01328e-006
0e5   	movl    RDX, #-10	# int
0ea   	movl    RBP, RCX	# spill
0ec   	nop 	# 3 bytes pad for loops and calls
0ef   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.google.common.base.CharMatcher$12::setBits @ bci:7  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=244}
0f4   	INT3   ; ShouldNotReachHere
0f4
0f5   B13: #	N145 &lt;- B2  Freq: 1.01328e-006
0f5   	movl    RDX, #-10	# int
0fa   	nop 	# 1 bytes pad for loops and calls
0fb   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.google.common.base.CharMatcher$LookupTable::set @ bci:8  L[0]=_ L[1]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # com.google.common.base.CharMatcher$12::setBits @ bci:7  L[0]=_ L[1]=_ L[2]=_
        # OopMap{off=256}
100   	INT3   ; ShouldNotReachHere
100

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='10'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;startsWith&apos;
 - signature:         &apos;(Ljava/lang/String;I)Z&apos;
 - max stack:         3
 - max locals:        8
 - size of params:    3
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f710
 - compiled entry     0x0000000002775e79
 - code size:         78
 - code start:        0x000000077ae10b88
 - code end (excl):   0x000000077ae10bd6
 - method data:       0x000000077b128840
 - checked ex length: 0
 - linenumber start:  0x000000077ae10bd6
 - localvar length:   8
 - localvar start:    0x000000077ae10be6
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/String:exact *, int )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8:r8   : parm 1: java/lang/String:exact *
#r006 r9   : parm 2: int
# -- Old rsp -- Framesize: 48 --
#r089 rsp+44: pad2, in_preserve
#r088 rsp+40: pad2, in_preserve
#r087 rsp+36: pad2, in_preserve
#r086 rsp+32: pad2, in_preserve
#r085 rsp+28: pad2, in_preserve
#r084 rsp+24: return address
#r083 rsp+20: Fixed slot 1
#r082 rsp+16: Fixed slot 0
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N299: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B26 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #32	# Create frame
02c   	movl    RCX, [R8 + #20 (8-bit)]	# int ! Field java/lang/String.count
030   	NullCheck R8
030
030   B2: #	B24 B3 &lt;- B1  Freq: 0.999999
030   	movl    RDI, R9	# spill
033   	testl   R9, R9
036   	jl     B24  P=0.000000 C=1356.000000
036
03c   B3: #	B24 B4 &lt;- B2  Freq: 0.999999
03c   	movl    R11, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
040   	subl    R11, RCX	# int
043   	cmpl    R9, R11
046   	jg     B24  P=0.024336 C=1356.000000
046
04c   B4: #	B22 B5 &lt;- B3  Freq: 0.975662
04c   	movl    R10, RCX	# spill
04f   	decl    R10	# int
052   	testl   R10, R10
055   	jl     B22  P=0.053767 C=6677.000000
055
05b   B5: #	B25 B6 &lt;- B4  Freq: 0.923204
05b   	addl    RDI, [RDX + #16 (8-bit)]	# int
05e   	movl    RBX, [R8 + #16 (8-bit)]	# int ! Field java/lang/String.offset
062   	movl    R13, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
066   	movl    RBP, [R8 + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
06a   	movl    R8, [R12 + R13 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
06f   	NullCheck R13
06f
06f   B6: #	B25 B7 &lt;- B5  Freq: 0.923203
06f   	movl    R14, RDI	# spill
072   	addl    R14, RCX	# int
075   	movl    RAX, R14	# spill
078   	decl    RAX	# int
07a   	cmpl    RAX, R8	# unsigned
07d   	jnb,u  B25  P=0.000001 C=-1.000000
07d
083   B7: #	B25 B8 &lt;- B6  Freq: 0.923202
083   	movl    R8, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# range
088   	NullCheck RBP
088
088   B8: #	B25 B9 &lt;- B7  Freq: 0.923201
088   	movl    RDX, RBX	# spill
08a   	addl    RDX, RCX	# int
08c   	movl    RSI, RDX	# spill
08e   	decl    RSI	# int
090   	cmpl    RSI, R8	# unsigned
093   	jnb,u  B25  P=0.000001 C=-1.000000
093
099   B9: #	B10 &lt;- B8  Freq: 0.9232
099   	decode_heap_oop_not_null R11,RBP
09d   	decode_heap_oop_not_null R9,R13
0a1   	addl    RCX, #-2	# int
0a4   	xorl    RBP, RBP	# int
0a6
0a6   B10: #	B23 B11 &lt;- B9 B12 	Loop: B10-B12 inner stride: not constant pre of N221 Freq: 1.60175
0a6   	movl    R8, RSI	# spill
0a9   	subl    R8, R10	# int
0ac   	movzwl  RBX, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
0b2   	movl    R8, RAX	# spill
0b5   	subl    R8, R10	# int
0b8   	movzwl  RDI, [R9 + #16 + R8 &lt;&lt; #1]	# ushort/char
0be   	cmpl    RDI, RBX
0c0   	jne     B23  P=0.152738 C=6318.000000
0c0
0c6   B11: #	B13 B12 &lt;- B10  Freq: 1.3571
0c6   	movl    RDI, R10	# spill
0c9   	decl    RDI	# int
0cb   	cmpl    RDI, RCX
0cd   	jle,s   B13	# loop end  P=0.500000 C=6677.000000
0cd
0cf   B12: #	B10 &lt;- B11  Freq: 0.678552
0cf   	movl    R10, RDI	# spill
0d2   	jmp,s   B10
0d2
0d4   B13: #	B19 B14 &lt;- B11  Freq: 0.678552
0d4   	andl    R10, #-2	# int
0d8   	movl    R8, R10	# spill
0db   	negl    R8	# int
0de   	sarl    R8, #31
0e2   	shrl    R8, #31
0e6   	subl    R8, R10	# int
0e9   	sarl    R8, #1
0ec   	negl    R8	# int
0ef   	andl    R8, #-2	# int
0f3   	sall    R8, #1
0f6   	movl    RCX, RDI	# spill
0f8   	subl    RCX, R8	# int
0fb   	cmpl    RDI, RCX
0fd   	jle,s   B19  P=0.000001 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

100   B14: #	B23 B15 &lt;- B13 B18 	Loop: B14-B18 inner stride: not constant main of N143 Freq: 1.32427
100   	movl    RBX, RDX	# spill
102   	subl    RBX, RDI	# int
104   	movzwl  R10, [R11 + #14 + RBX &lt;&lt; #1]	# ushort/char
10a   	movl    R13, R14	# spill
10d   	subl    R13, RDI	# int
110   	movzwl  R8, [R9 + #14 + R13 &lt;&lt; #1]	# ushort/char
116   	cmpl    R8, R10
119   	jne     B23  P=0.152738 C=6318.000000
119
11f   B15: #	B23 B16 &lt;- B14  Freq: 1.12201
11f   	movzwl  R10, [R11 + #16 + RBX &lt;&lt; #1]	# ushort/char
125   	movzwl  R8, [R9 + #16 + R13 &lt;&lt; #1]	# ushort/char
12b   	cmpl    R8, R10
12e   	jne,s   B23  P=0.152738 C=6318.000000
12e
130   B16: #	B23 B17 &lt;- B15  Freq: 0.950634
130   	movslq  R8, RBX	# i2l
133   	movzwl  RBX, [R11 + #18 + R8 &lt;&lt; #1]	# ushort/char
139   	movslq  R13, R13	# i2l
13c   	movzwl  R10, [R9 + #18 + R13 &lt;&lt; #1]	# ushort/char
142   	cmpl    R10, RBX
145   	jne,s   B23  P=0.152738 C=6318.000000
145
147   B17: #	B23 B18 &lt;- B16  Freq: 0.805436
147   	movzwl  R10, [R11 + #20 + R8 &lt;&lt; #1]	# ushort/char
14d   	movzwl  R8, [R9 + #20 + R13 &lt;&lt; #1]	# ushort/char
153   	cmpl    R8, R10
156   	jne,s   B23  P=0.152738 C=6318.000000
156
158   B18: #	B14 B19 &lt;- B17  Freq: 0.682415
158   	addl    RDI, #-4	# int
15b   	cmpl    RDI, RCX
15d   	jg,s   B14	# loop end  P=0.946233 C=6677.000000
15d
15f   B19: #	B22 B20 &lt;- B13 B18  Freq: 0.0366919
15f   	cmpl    RDI, #-1
162   	jle,s   B22  P=0.500000 C=-1.000000
162
164   B20: #	B23 B21 &lt;- B19 B21 	Loop: B20-B21 inner stride: not constant post of N221 Freq: 0.0318302
164   	movl    R8, RSI	# spill
167   	subl    R8, RDI	# int
16a   	movzwl  R8, [R11 + #16 + R8 &lt;&lt; #1]	# ushort/char
170   	movl    R10, RAX	# spill
173   	subl    R10, RDI	# int
176   	movzwl  R10, [R9 + #16 + R10 &lt;&lt; #1]	# ushort/char
17c   	cmpl    R10, R8
17f   	jne,s   B23  P=0.152738 C=6318.000000
17f
181   B21: #	B20 B22 &lt;- B20  Freq: 0.0269685
181   	decl    RDI	# int
183   	cmpl    RDI, #-1
186   	jg,s   B20	# loop end  P=0.500000 C=6677.000000
186
188   B22: #	B23 &lt;- B19 B4 B21  Freq: 0.0842883
188   	movl    RBP, #1	# int
188
18d   B23: #	N299 &lt;- B20 B16 B10 B14 B15 B17 B22 B24  Freq: 0.999995
18d   	movl    RAX, RBP	# spill
18f   	addq	rsp, 32	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
19a   	ret
19a
19b   B24: #	B23 &lt;- B3 B2  Freq: 0.0243367
19b   	xorl    RBP, RBP	# int
19d   	jmp,s   B23
19d
19f   B25: #	N299 &lt;- B8 B5 B6 B7  Freq: 3.74185e-006
19f   	movl    RDX, #-122	# int
1a4   	movl    [rsp + #0], R10	# spill
1a8   	movl    [rsp + #4], R13	# spill
1ad   	movl    [rsp + #8], RDI	# spill
1b1   	movl    [rsp + #12], RBX	# spill
1b5   	nop 	# 2 bytes pad for loops and calls
1b7   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::startsWith @ bci:56  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #4 L[4]=rsp + #8 L[5]=RBP L[6]=rsp + #12 L[7]=rsp + #0
        # OopMap{rbp=NarrowOop [4]=NarrowOop off=444}
1bc   	INT3   ; ShouldNotReachHere
1bc
1bd   B26: #	N299 &lt;- B1  Freq: 1.01328e-006
1bd   	movl    RDX, #-10	# int
1c2   	nop 	# 1 bytes pad for loops and calls
1c3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::startsWith @ bci:14  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # OopMap{off=456}
1c8   	INT3   ; ShouldNotReachHere
1c8

</opto_assembly>
<opto_assembly compile_id='12'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/io/Win32FileSystem&apos;
 - constants:         0x00000000088cffa0constant pool [396] for &apos;java/io/Win32FileSystem&apos;
 - access:            0xc1000001  public 
 - name:              &apos;normalize&apos;
 - signature:         &apos;(Ljava/lang/String;)Ljava/lang/String;&apos;
 - max stack:         5
 - max locals:        8
 - size of params:    2
 - method size:       15
 - vtable index:      18
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f500
 - compiled entry     0x000000000276e475
 - code size:         143
 - code start:        0x000000077af65138
 - code end (excl):   0x000000077af651c7
 - method data:       0x000000077b0a4ed0
 - checked ex length: 0
 - linenumber start:  0x000000077af651c7
 - localvar length:   8
 - localvar start:    0x000000077af651e6
#
#  java/lang/String:exact * ( java/io/Win32FileSystem:NotNull *, java/lang/String:exact * )
#
#r016 rdx:rdx   : parm 0: java/io/Win32FileSystem:NotNull *
#r004 r8:r8   : parm 1: java/lang/String:exact *
# -- Old rsp -- Framesize: 64 --
#r089 rsp+60: pad2, in_preserve
#r088 rsp+56: pad2, in_preserve
#r087 rsp+52: pad2, in_preserve
#r086 rsp+48: pad2, in_preserve
#r085 rsp+44: pad2, in_preserve
#r084 rsp+40: return address
#r083 rsp+36: Fixed slot 1
#r082 rsp+32: Fixed slot 0
#r097 rsp+28: spill
#r096 rsp+24: spill
#r095 rsp+20: spill
#r094 rsp+16: spill
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N605: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B61 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #48	# Create frame
02c   	movq    RAX, R8	# spill
02f   	movl    RBX, [R8 + #20 (8-bit)]	# int ! Field java/lang/String.count
033   	NullCheck R8
033
033   B2: #	B46 B3 &lt;- B1  Freq: 0.999999
033   	movq    R13, RDX	# spill
036   	movzwl  RSI, [RDX + #12 (8-bit)]	# ushort/char ! Field java/io/Win32FileSystem.slash
03b   	testl   RBX, RBX
03d   	jle     B46  P=0.021008 C=6807.000000
03d
043   B3: #	B55 B4 &lt;- B2  Freq: 0.978991
043   	movl    R9, [R8 + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
047   	movzwl  R10, [RDX + #14 (8-bit)]	# ushort/char ! Field java/io/Win32FileSystem.altSlash
04c   	movl    R11, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
051   	NullCheck R9
051
051   B4: #	B55 B5 &lt;- B3  Freq: 0.97899
051   	movl    R8, [R8 + #16 (8-bit)]	# int ! Field java/lang/String.offset
055   	movl    RDI, RBX	# spill
057   	addl    RDI, R8	# int
05a   	decl    RDI	# int
05c   	cmpl    RDI, R11	# unsigned
05f   	jnb,u  B55  P=0.000001 C=-1.000000
05f
065   B5: #	B6 &lt;- B4  Freq: 0.978989
065   	decode_heap_oop_not_null RBP,R9
069   	movl    RCX, #1	# int
06e   	cmpl    RBX, RCX
070   	movl    R11, RBX	# spill
073   	cmovlgt R11, RCX	# min
077   	xorl    RDI, RDI	# int
079   	xorl    RCX, RCX	# int
07b
07b   B6: #	B56 B7 &lt;- B5 B12 	Loop: B6-B12 inner stride: not constant pre of N343 Freq: 1.95037
07b   	testl   RDI, RDI
07d   	jl     B56  P=0.000000 C=7693.000000
07d
083   B7: #	B58 B8 &lt;- B6  Freq: 1.95037
083   	cmpl    RDI, RBX
085   	jge     B58  P=0.000000 C=7693.000000
085
08b   B8: #	B53 B9 &lt;- B7  Freq: 1.95037
08b   	movl    RDX, RDI	# spill
08d   	addl    RDX, R8	# int
090   	movzwl  R9, [RBP + #16 + RDX &lt;&lt; #1]	# ushort/char
096   	cmpl    R9, R10
099   	je     B53  P=0.001651 C=6664.000000
099
09f   B9: #	B38 B10 &lt;- B8  Freq: 1.94715
09f   	cmpl    R9, RSI
0a2   	je     B38  P=0.082068 C=6653.000000
0a2
0a8   B10: #	B48 B11 &lt;- B39 B38 B9  Freq: 1.94715
0a8   	cmpl    R9, #58
0ac   	je     B48  P=0.004509 C=6653.000000
0ac
0b2   B11: #	B13 B12 &lt;- B48 B10  Freq: 1.94276
0b2   	incl    RDI	# int
0b4   	cmpl    RDI, R11
0b7   	jge,s   B13	# loop end  P=0.500000 C=6626.000000
0b7
0b9   B12: #	B6 &lt;- B11  Freq: 0.971378
0b9   	movl    RCX, R9	# spill
0bc   	jmp,s   B6
0bc
0be   B13: #	B19 B14 &lt;- B11  Freq: 0.971378
0be   	movl    R11, #2	# int
0c4   	cmpl    RBX, R11
0c7   	movl    RDX, RBX	# spill
0c9   	cmovlgt RDX, R11	# min
0cd   	subl    RDX, RDI	# int
0cf   	andl    RDX, #-4	# int
0d2   	addl    RDX, RDI	# int
0d4   	cmpl    RDI, RDX
0d6   	jge,s   B19  P=0.000001 C=-1.000000
      	nop 	# 8 bytes pad for loops and calls

0e0   B14: #	B23 B15 &lt;- B13 B18 	Loop: B14-B18 inner stride: not constant main of N147 Freq: 35.3799
0e0   	movl    R11, RDI	# spill
0e3   	addl    R11, R8	# int
0e6   	movzwl  RCX, [RBP + #16 + R11 &lt;&lt; #1]	# ushort/char
0ec   	cmpl    RCX, R10
0ef   	je,s   B23  P=0.001651 C=6664.000000
0ef
0f1   B15: #	B25 B16 &lt;- B14  Freq: 35.3215
0f1   	movslq  R14, R11	# i2l
0f4   	movzwl  R9, [RBP + #18 + R14 &lt;&lt; #1]	# ushort/char
0fa   	cmpl    R9, R10
0fd   	je,s   B25  P=0.001651 C=6664.000000
0fd
0ff   B16: #	B22 B17 &lt;- B15  Freq: 35.2632
0ff   	movzwl  RCX, [RBP + #20 + R14 &lt;&lt; #1]	# ushort/char
105   	cmpl    RCX, R10
108   	je,s   B22  P=0.001651 C=6664.000000
108
10a   B17: #	B24 B18 &lt;- B16  Freq: 35.205
10a   	addl    R11, #2	# int
10e   	movslq  R11, R11	# i2l
111   	movzwl  R9, [RBP + #18 + R11 &lt;&lt; #1]	# ushort/char
117   	cmpl    R9, R10
11a   	je,s   B24  P=0.001651 C=6664.000000
11a
11c   B18: #	B14 B19 &lt;- B17  Freq: 35.1469
11c   	addl    RDI, #4	# int
11f   	cmpl    RDI, RDX
121   	jl,s   B14	# loop end  P=0.978992 C=6626.000000
121
123   B19: #	B29 B20 &lt;- B13 B18  Freq: 0.738359
123   	cmpl    RDI, RBX
125   	jl,s   B29  P=0.500000 C=-1.000000
125
127   B20: #	B36 B21 &lt;- B19  Freq: 0.369179
127   	cmpl    R9, RSI
12a   	je     B36  P=0.000000 C=143.000000
12a
130   B21: #	B27 &lt;- B20  Freq: 0.369179
130   	jmp,s   B27
130
132   B22: #	B23 &lt;- B16  Freq: 0.0582065
132   	addl    RDI, #2	# int
135
135   B23: #	B26 &lt;- B14 B22  Freq: 0.116606
135   	movl    R10, RDI	# spill
138   	decl    R10	# int
13b   	movl    R8, RDI	# spill
13e   	movl    RDI, R10	# spill
141   	movl    RCX, R9	# spill
144   	jmp,s   B26
144
146   B24: #	B25 &lt;- B17  Freq: 0.0581105
146   	addl    RDI, #2	# int
149
149   B25: #	B26 &lt;- B15 B24  Freq: 0.116413
149   	movl    R8, RDI	# spill
14c   	incl    R8	# int
14f
14f   B26: #	B65 B27 &lt;- B54 B53 B23 B25  Freq: 0.237452
14f   	cmpl    RCX, RSI
151   	cmovlne RDI, R8	# signed, int
155   	movq    RDX, R13	# spill
158   	movq    R8, RAX	# spill
15b   	movl    R9, RBX	# spill
15e   	nop 	# 1 bytes pad for loops and calls
15f   	call,static  java.io.Win32FileSystem::normalize
        # java.io.Win32FileSystem::normalize @ bci:61  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{off=356}
164
164   B27: #	N605 &lt;- B26 B45 B52 B37 B35 B21 B47  Freq: 0.999989
164   	addq	rsp, 48	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
16f   	ret
16f
170   B28: #	B29 &lt;- B34  Freq: 0.366309
170   	movl    R9, R11	# spill
170
173   B29: #	B57 B30 &lt;- B19 B28 	Loop: B29-B28 inner stride: not constant post of N343 Freq: 0.735489
173   	testl   RDI, RDI
175   	jl     B57  P=0.000000 C=7693.000000
175
17b   B30: #	B59 B31 &lt;- B29  Freq: 0.735488
17b   	cmpl    RDI, RBX
17d   	jge     B59  P=0.000000 C=7693.000000
17d
183   B31: #	B54 B32 &lt;- B30  Freq: 0.735488
183   	movl    RCX, RDI	# spill
185   	addl    RCX, R8	# int
188   	movzwl  R11, [RBP + #16 + RCX &lt;&lt; #1]	# ushort/char
18e   	cmpl    R11, R10
191   	je     B54  P=0.001651 C=6664.000000
191
197   B32: #	B41 B33 &lt;- B31  Freq: 0.734274
197   	cmpl    R11, RSI
19a   	je,s   B41  P=0.082068 C=6653.000000
19a
19c   B33: #	B50 B34 &lt;- B42 B41 B32  Freq: 0.734274
19c   	cmpl    R11, #58
1a0   	je     B50  P=0.004509 C=6653.000000
1a0
1a6   B34: #	B28 B35 &lt;- B50 B33  Freq: 0.732618
1a6   	incl    RDI	# int
1a8   	cmpl    RDI, RBX
1aa   	jl,s   B28	# loop end  P=0.500000 C=6626.000000
1aa
1ac   B35: #	B27 B36 &lt;- B34  Freq: 0.366309
1ac   	cmpl    R11, RSI
1af   	jne,s   B27  P=1.000000 C=143.000000
1af
1b1   B36: #	B63 B37 &lt;- B35 B20 B46  Freq: 3.60726e-007
1b1   	movl    RDI, RBX	# spill
1b3   	decl    RDI	# int
1b5   	movq    RDX, R13	# spill
1b8   	movq    R8, RAX	# spill
1bb   	movl    R9, RBX	# spill
1be   	nop 	# 1 bytes pad for loops and calls
1bf   	call,static  java.io.Win32FileSystem::normalize
        # java.io.Win32FileSystem::normalize @ bci:137  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{off=452}
1c4
1c4   B37: #	B27 &lt;- B36  Freq: 3.60718e-007
        # Block is sole successor of call
1c4   	jmp,s   B27
1c4
1c6   B38: #	B10 B39 &lt;- B9  Freq: 0.159799
1c6   	cmpl    RCX, RSI
1c8   	jne     B10  P=1.000000 C=546.000000
1c8
1ce   B39: #	B10 B40 &lt;- B38  Freq: 7.6198e-008
1ce   	cmpl    RDI, #1
1d1   	jle     B10  P=0.500000 C=-1.000000
1d1
1d7   B40: #	B44 &lt;- B39  Freq: 3.8099e-008
1d7   	decl    RDI	# int
1d9   	jmp,s   B44
1d9
1db   B41: #	B33 B42 &lt;- B32  Freq: 0.0602606
1db   	cmpl    R9, RSI
1de   	jne,s   B33  P=1.000000 C=546.000000
1de
1e0   B42: #	B33 B43 &lt;- B41  Freq: 2.87345e-008
1e0   	cmpl    RDI, #1
1e3   	jle,s   B33  P=0.500000 C=-1.000000
1e3
1e5   B43: #	B44 &lt;- B42  Freq: 1.43672e-008
1e5   	decl    RDI	# int
1e7
1e7   B44: #	B62 B45 &lt;- B43 B40  Freq: 5.24663e-008
1e7   	movq    RDX, R13	# spill
1ea   	movq    R8, RAX	# spill
1ed   	movl    R9, RBX	# spill
1f0   	nop 	# 3 bytes pad for loops and calls
1f3   	call,static  java.io.Win32FileSystem::normalize
        # java.io.Win32FileSystem::normalize @ bci:90  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{off=504}
1f8
1f8   B45: #	B27 &lt;- B44  Freq: 5.24652e-008
        # Block is sole successor of call
1f8   	jmp     B27
1f8
1fd   B46: #	B36 B47 &lt;- B2  Freq: 0.0210078
1fd   	testl   RSI, RSI
1ff   	je,s   B36  P=0.000000 C=143.000000
1ff
201   B47: #	B27 &lt;- B46  Freq: 0.0210078
201   	jmp     B27
201
206   B48: #	B11 B49 &lt;- B10  Freq: 0.00878021
206   	cmpl    RDI, #1
209   	jle     B11  P=0.500000 C=-1.000000
209
20f   B49: #	B51 &lt;- B48  Freq: 0.0043901
20f   	jmp,s   B51
20f
211   B50: #	B34 B51 &lt;- B33  Freq: 0.00331104
211   	cmpl    RDI, #1
214   	jle     B34  P=0.500000 C=-1.000000
214
21a   B51: #	B64 B52 &lt;- B50 B49  Freq: 0.00604562
21a   	movq    RDX, R13	# spill
21d   	movq    R8, RAX	# spill
220   	movl    R9, RBX	# spill
223   	xorl    RDI, RDI	# int
225   	nop 	# 2 bytes pad for loops and calls
227   	call,static  java.io.Win32FileSystem::normalize
        # java.io.Win32FileSystem::normalize @ bci:111  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_
        # OopMap{off=556}
22c
22c   B52: #	B27 &lt;- B51  Freq: 0.0060455
        # Block is sole successor of call
22c   	jmp     B27
22c
231   B53: #	B26 &lt;- B8  Freq: 0.00321933
231   	movl    R10, RDI	# spill
234   	decl    R10	# int
237   	movl    R8, RDI	# spill
23a   	movl    RDI, R10	# spill
23d   	jmp     B26
23d
242   B54: #	B26 &lt;- B31  Freq: 0.00121402
242   	movl    R10, RDI	# spill
245   	decl    R10	# int
248   	movl    R8, RDI	# spill
24b   	movl    RDI, R10	# spill
24e   	movl    RCX, R9	# spill
251   	jmp     B26
251
256   B55: #	N605 &lt;- B4 B3  Freq: 1.98398e-006
256   	movl    RDX, #-122	# int
25b   	movl    RBP, R10	# spill
25e   	movq    [rsp + #0], R13	# spill
262   	movq    [rsp + #8], RAX	# spill
267   	movl    [rsp + #16], RBX	# spill
26b   	movl    [rsp + #20], RSI	# spill
26f   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.io.Win32FileSystem::normalize @ bci:28  L[0]=rsp + #0 L[1]=rsp + #8 L[2]=rsp + #16 L[3]=rsp + #20 L[4]=RBP L[5]=#0 L[6]=#0 L[7]=_
        # OopMap{[0]=Oop [8]=Oop off=628}
274   	INT3   ; ShouldNotReachHere
274
275   B56: #	B57 &lt;- B6  Freq: 9.75183e-007
275   	movl    R9, RCX	# spill
275
278   B57: #	B60 &lt;- B29 B56  Freq: 1.34293e-006
278   	movl    RBP, RDI	# spill
27a   	jmp,s   B60
27a
27c   B58: #	B59 &lt;- B7  Freq: 9.30007e-007
27c   	movl    R9, RCX	# spill
27c
27f   B59: #	B60 &lt;- B30 B58  Freq: 1.28072e-006
27f   	movl    RBP, RDI	# spill
27f
281   B60: #	N605 &lt;- B59 B57  Freq: 2.62364e-006
281   	movl    RDX, #7	# int
286   	movl    [rsp + #0], R10	# spill
28a   	movl    [rsp + #4], R9	# spill
28f   	movq    [rsp + #8], R13	# spill
294   	movq    [rsp + #16], RAX	# spill
299   	movl    [rsp + #24], RBX	# spill
29d   	movl    [rsp + #28], RSI	# spill
2a1   	nop 	# 2 bytes pad for loops and calls
2a3   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;7&apos;)
        # java.lang.String::charAt @ bci:12  L[0]=_ L[1]=RBP
        # java.io.Win32FileSystem::normalize @ bci:31  L[0]=rsp + #8 L[1]=rsp + #16 L[2]=rsp + #24 L[3]=rsp + #28 L[4]=rsp + #0 L[5]=rsp + #4 L[6]=RBP L[7]=_
        # OopMap{[8]=Oop [16]=Oop off=680}
2a8   	INT3   ; ShouldNotReachHere
2a8
2a9   B61: #	N605 &lt;- B1  Freq: 1.01328e-006
2a9   	movl    RDX, #-10	# int
2ae   	nop 	# 1 bytes pad for loops and calls
2af   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.io.Win32FileSystem::normalize @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ STK[0]=#NULL
        # OopMap{off=692}
2b4   	INT3   ; ShouldNotReachHere
2b4
2b5   B62: #	B66 &lt;- B44  Freq: 5.24663e-013
2b5   	# exception oop is in rax; no code emitted
2b5   	movq    RDX, RAX	# spill
2b8   	jmp,s   B66
2b8
2ba   B63: #	B66 &lt;- B36  Freq: 3.60726e-012
2ba   	# exception oop is in rax; no code emitted
2ba   	movq    RDX, RAX	# spill
2bd   	jmp,s   B66
2bd
2bf   B64: #	B66 &lt;- B51  Freq: 6.04562e-008
2bf   	# exception oop is in rax; no code emitted
2bf   	movq    RDX, RAX	# spill
2c2   	jmp,s   B66
2c2
2c4   B65: #	B66 &lt;- B26  Freq: 2.37452e-006
2c4   	# exception oop is in rax; no code emitted
2c4   	movq    RDX, RAX	# spill
2c4
2c7   B66: #	N605 &lt;- B65 B62 B64 B63  Freq: 2.43498e-006
2c7   	addq	rsp, 48	# Destroy frame
	popq	rbp

2cc   	jmp     rethrow_stub
2cc

</opto_assembly>
<writer thread='3996'/>
<opto_assembly compile_id='11'>
{method} 
 - klass: {other class}
 - method holder:     &apos;sun/net/www/ParseUtil&apos;
 - constants:         0x00000000088cffa0constant pool [585] for &apos;sun/net/www/ParseUtil&apos;
 - access:            0xc1000009  public static 
 - name:              &apos;encodePath&apos;
 - signature:         &apos;(Ljava/lang/String;Z)Ljava/lang/String;&apos;
 - max stack:         5
 - max locals:        10
 - size of params:    2
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         336
 - code start:        0x000000077b031be0
 - code end (excl):   0x000000077b031d30
 - method data:       0x000000077b0fbd58
 - checked ex length: 0
 - linenumber start:  0x000000077b031d30
 - localvar length:   10
 - localvar start:    0x000000077b031d5e
#
#  java/lang/String:exact * ( java/lang/String:exact *, bool )
#
#r016 rdx:rdx   : parm 0: java/lang/String:exact *
#r004 r8   : parm 1: bool
# -- Old rsp -- Framesize: 144 --
#r089 rsp+140: pad2, in_preserve
#r088 rsp+136: pad2, in_preserve
#r087 rsp+132: pad2, in_preserve
#r086 rsp+128: pad2, in_preserve
#r085 rsp+124: pad2, in_preserve
#r084 rsp+120: return address
#r083 rsp+116: Fixed slot 1
#r082 rsp+112: Fixed slot 0
#r117 rsp+108: spill
#r116 rsp+104: spill
#r115 rsp+100: spill
#r114 rsp+96: spill
#r113 rsp+92: spill
#r112 rsp+88: spill
#r111 rsp+84: spill
#r110 rsp+80: spill
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: outgoing argument
#r096 rsp+24: outgoing argument
#r095 rsp+20: outgoing argument
#r094 rsp+16: outgoing argument
#r093 rsp+12: outgoing argument
#r092 rsp+ 8: outgoing argument
#r091 rsp+ 4: outgoing argument
#r090 rsp+ 0: outgoing argument
#
abababab   N1: #	B1 &lt;- B155 B189 B85 B56 B47 B79 B83 B58 B81 B156 B87 B82  Freq: 1
abababab
000   B1: #	B155 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	# stack bang
	pushq   rbp
	subq    rsp, #128	# Create frame
00f   	movl    [rsp + #52], R8	# spill
014   	movq    RBP, RDX	# spill
017   	movl    R10, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
01b   	NullCheck RDX
01b
01b   B2: #	B49 B3 &lt;- B1  Freq: 0.999999
01b   	movl    R9, R10	# spill
01e   	sall    R9, #1
021   	movl    R8, R9	# spill
024   	addl    R8, #16	# int
028   	cmpl    R8, #524288	# unsigned
02f   	jnbe,u  B49  P=0.000001 C=-1.000000
02f
035   B3: #	B49 B4 &lt;- B2  Freq: 0.999998
035   	# TLS is in R15
035   	movq    R11, [R15 + #112 (8-bit)]	# ptr
039   	movslq  RCX, R9	# i2l
03c   	salq    RCX, #1
03f   	addq    RCX, #55	# long
043   	movq    R9, RCX	# spill
046   	andq    R9, #-8	# long
04a   	movq    RBX, R11	# spill
04d   	addq    RBX, R9	# ptr
050   	# TLS is in R15
050   	cmpq    RBX, [R15 + #128 (32-bit)]	# raw ptr
057   	jnb,u  B49  P=0.000100 C=-1.000000
057
05d   B4: #	B5 &lt;- B3  Freq: 0.999898
05d   	# TLS is in R15
05d   	movq    [R15 + #112 (8-bit)], RBX	# ptr
061   	PREFETCHNTA [RBX + #256 (32-bit)]	# Prefetch to non-temporal cache for write
068   	movq    [R11], 0x0000000000000001	# ptr
06f   	PREFETCHNTA [RBX + #320 (32-bit)]	# Prefetch to non-temporal cache for write
076   	movl    [R11 + #8 (8-bit)], narrowoop: precise klass [C: 0x000000000678d778:Constant:exact *	# compressed ptr
07e   	movl    [R11 + #12 (8-bit)], R8	# int
082   	PREFETCHNTA [RBX + #384 (32-bit)]	# Prefetch to non-temporal cache for write
089   	movq    RDI, R11	# spill
08c   	addq    RDI, #16	# ptr
090   	shrq    RCX, #3
094   	addq    RCX, #-2	# long
098   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
09d
09d   B5: #	B51 B6 &lt;- B50 B4  Freq: 0.999999
09d   	
09d   	# checkcastPP of R11
09d   	cmpl    R10, #524288	# unsigned
0a4   	jnbe,u  B51  P=0.000001 C=-1.000000
0a4
0aa   B6: #	B51 B7 &lt;- B5  Freq: 0.999998
0aa   	# TLS is in R15
0aa   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
0ae   	movslq  RCX, R10	# i2l
0b1   	salq    RCX, #1
0b4   	addq    RCX, #23	# long
0b8   	movq    R8, RCX	# spill
0bb   	andq    R8, #-8	# long
0bf   	movq    R9, RBX	# spill
0c2   	addq    R9, R8	# ptr
0c5   	# TLS is in R15
0c5   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
0cc   	jnb,u  B51  P=0.000100 C=-1.000000
0cc
0d2   B7: #	B8 &lt;- B6  Freq: 0.999898
0d2   	# TLS is in R15
0d2   	movq    [R15 + #112 (8-bit)], R9	# ptr
0d6   	PREFETCHNTA [R9 + #256 (32-bit)]	# Prefetch to non-temporal cache for write
0de   	movq    [RBX], 0x0000000000000001	# ptr
0e5   	PREFETCHNTA [R9 + #320 (32-bit)]	# Prefetch to non-temporal cache for write
0ed   	movl    [RBX + #8 (8-bit)], narrowoop: precise klass [C: 0x000000000678d778:Constant:exact *	# compressed ptr
0f4   	movl    [RBX + #12 (8-bit)], R10	# int
0f8   	PREFETCHNTA [R9 + #384 (32-bit)]	# Prefetch to non-temporal cache for write
100   	movq    RDI, RBX	# spill
103   	addq    RDI, #16	# ptr
107   	shrq    RCX, #3
10b   	addq    RCX, #-2	# long
10f   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
114   	movl    [rsp + #48], R10	# spill
119   	movq    [rsp + #56], R11	# spill
119
11e   B8: #	B187 B9 &lt;- B52 B7  Freq: 0.999999
11e   	
11e   	# checkcastPP of RBX
11e   	movq    [rsp + #64], RBX	# spill
123   	movq    RDX, RBP	# spill
126   	xorl    R8, R8	# int
129   	movl    R9, [rsp + #48]	# spill
12e   	movq    RDI, RBX	# spill
131   	xorl    RSI, RSI	# int
133   	call,static  java.lang.String::getChars
        # java.lang.String::toCharArray @ bci:15  L[0]=_ L[1]=rsp + #64
        # sun.net.www.ParseUtil::encodePath @ bci:15  L[0]=RBP L[1]=rsp + #52 L[2]=rsp + #56 L[3]=#0 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [56]=Oop [64]=Oop off=312}
138
138   B9: #	B48 B10 &lt;- B8  Freq: 0.999979
        # Block is sole successor of call
138   	movl    RBP, [RBP + #20 (8-bit)]	# int ! Field java/lang/String.count
13c   	testl   RBP, RBP
13e   	jle     B48  P=0.021148 C=6762.000000
13e
144   B10: #	B88 B11 &lt;- B9  Freq: 0.978832
144   	movl    R11, [rsp + #52]	# spill
149   	testl   R11, R11
14c   	jne     B88  P=0.000000 C=-1.000000
14c
152   B11: #	B32 &lt;- B10  Freq: 0.978831
152   	pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #72]
15a   	xorl    RCX, RCX	# int
15c   	xorl    R14, R14	# int
15f   	jmp     B32
15f
164   B12: #	B25 B13 &lt;- B37 B35  top-of-loop Freq: 4.79652
164   	cmpl    R11, #65
168   	jge     B25  P=0.520408 C=686.000000
168
16e   B13: #	B15 B14 &lt;- B25 B12  Freq: 2.30037
16e   	cmpl    R11, #48
172   	jl,s   B15  P=0.762918 C=329.000000
172
174   B14: #	B26 B15 &lt;- B13  Freq: 0.545378
174   	cmpl    R11, #57
178   	jle     B26  P=1.000000 C=78.000000
178
17e   B15: #	B80 B16 &lt;- B14 B13  Freq: 1.755
17e   	movq    R10, precise klass sun/net/www/ParseUtil: 0x0000000007fb7508:Constant:exact *	# ptr
188   	movl    R9, [R10 + #608 (32-bit)]	# compressed ptr ! Field sun/net/www/ParseUtil.encodedInPath
18f   	testl   R9, R9	# compressed ptr
192   	je     B80  P=0.000001 C=-1.000000
192
198   B16: #	B185 B17 &lt;- B15  Freq: 1.755
198   	movl    [rsp + #84], RBX	# spill
19c   	movl    [rsp + #80], R8	# spill
1a1   	movl    [rsp + #36], R11	# spill
1a6   	movl    [rsp + #40], R14	# spill
1ab   	movl    [rsp + #32], RCX	# spill
1af   	movl    [rsp + #44], RBP	# spill
1b3   	decode_heap_oop_not_null R10,R9
1b7   	movq    [rsp + #88], R10	# spill
1bc   	movl    RBP, R9	# spill
1bf   	movq    RDX, R10	# spill
1c2   	nop 	# 1 bytes pad for loops and calls
1c3   	call,static  java.util.BitSet::checkInvariants
        # java.util.BitSet::get @ bci:32  L[0]=rsp + #88 L[1]=rsp + #36 L[2]=_
        # sun.net.www.ParseUtil::encodePath @ bci:142  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=rsp + #32 L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=rsp + #36 L[8]=_ L[9]=_
        # OopMap{rbp=NarrowOop [56]=Oop [64]=Oop [72]=Oop [88]=Oop off=456}
1c8
1c8   B17: #	B23 B18 &lt;- B16  Freq: 1.75496
        # Block is sole successor of call
1c8   	movl    R8, [R12 + RBP &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field java/util/BitSet.wordsInUse
1cd   	movl    R11, [rsp + #36]	# spill
1d2   	sarl    R11, #6
1d6   	cmpl    R11, R8
1d9   	jge,s   B23  P=0.500000 C=-1.000000
1d9
1db   B18: #	B156 B19 &lt;- B17  Freq: 0.87748
1db   	movl    R10, [R12 + RBP &lt;&lt; 3 + #20] (compressed oop addressing)	# compressed ptr ! Field java/util/BitSet.words
1e0   	movl    R9, [R12 + R10 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
1e5   	NullCheck R10
1e5
1e5   B19: #	B86 B20 &lt;- B18  Freq: 0.877479
1e5   	decode_heap_oop_not_null R8,R10
1e9   	cmpl    R11, R9	# unsigned
1ec   	jnb,u  B86  P=0.000001 C=-1.000000
1ec
1f2   B20: #	B23 B21 &lt;- B19  Freq: 0.877479
1f2   	movl    R10, #1	# long (unsigned 32-bit)
1f8   	movl    RCX, [rsp + #36]	# spill
1fc   	salq    R10, RCX
1ff   	testq   R10, [R8 + #16 + R11 &lt;&lt; #3]
204   	je,s   B23  P=0.100000 C=-1.000000
204
206   B21: #	B183 B22 &lt;- B20  Freq: 0.789731
206   	movq    RDX, [rsp + #72]	# spill
20b   	movl    R8, RCX	# spill
20e   	movl    R9, [rsp + #32]	# spill
213   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:152  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=536}
218
218   B22: #	B28 &lt;- B21  Freq: 0.789715
        # Block is sole successor of call
218   	movl    RBP, [rsp + #44]	# spill
21c   	movq    RDI, [rsp + #72]	# spill
221   	movl    R14, [rsp + #40]	# spill
226   	movl    R8, [rsp + #80]	# spill
22b   	movl    RBX, RAX	# spill
22d   	jmp,s   B28
22d
22f   B23: #	B84 B24 &lt;- B17 B20  Freq: 0.965228
22f   	movl    R11, [rsp + #32]	# spill
234   	cmpl    R11, [RSP + #80 (32-bit)]	# unsigned
239   	jnb,u  B84  P=0.000001 C=-1.000000
239
23f   B24: #	B28 &lt;- B23  Freq: 0.965227
23f   	movq    RDI, [rsp + #72]	# spill
244   	movl    R8, [rsp + #36]	# spill
249   	movw    [RDI + #16 + R11 &lt;&lt; #1], R8	# char/short
24f   	movl    RBP, [rsp + #44]	# spill
253   	movl    R14, [rsp + #40]	# spill
258   	movl    R8, [rsp + #80]	# spill
25d   	movl    RBX, [rsp + #84]	# spill
261   	jmp,s   B28
261
263   B25: #	B13 B26 &lt;- B12  Freq: 2.49615
263   	cmpl    R11, #90
267   	jg     B13  P=0.000000 C=357.000000
      	nop 	# 3 bytes pad for loops and calls

270   B26: #	B57 B27 &lt;- B14 B25 B36  top-of-loop Freq: 40.7703
270   	cmpl    RCX, R8	# unsigned
273   	jnb,u  B57  P=0.000001 C=-1.000000
273
279   B27: #	B28 &lt;- B26  Freq: 40.7702
279   	movw    [RDI + #16 + RCX &lt;&lt; #1], R11	# char/short
279
27f   B28: #	B59 B29 &lt;- B73 B77 B24 B22 B27 B39  Freq: 46.2799
27f   	movl    R11, RBX	# spill
282   	addl    R11, #9	# int
286   	cmpl    R11, R8
289   	jg     B59  P=0.000000 C=6619.000000
289
28f   B29: #	B30 &lt;- B28  Freq: 46.2799
28f   	movq    [rsp + #72], RDI	# spill
28f
294   B30: #	B41 B31 &lt;- B69 B29  Freq: 46.2799
294   	incl    R14	# int
297   	cmpl    R14, RBP
29a   	jge,s   B41	# loop end  P=0.021148 C=6619.000000
29a
29c   B31: #	B32 &lt;- B30  Freq: 45.3012
29c   	pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #56]
2a4   	movl    RCX, RBX	# spill
2a4
2a6   B32: #	B55 B33 &lt;- B11 B31 	Loop: B32-B31 inner stride: not constant  Freq: 46.2801
2a6   	cmpl    R14, [RSP + #48 (32-bit)]	# unsigned
2ab   	jnb,u  B55  P=0.000001 C=-1.000000
2ab
2b1   B33: #	B38 B34 &lt;- B32  Freq: 46.28
2b1   	movq    R10, [rsp + #64]	# spill
2b6   	movzwl  R11, [R10 + #16 + R14 &lt;&lt; #1]	# ushort/char
2bc   	movq    RDI, [rsp + #72]	# spill
2c1   	movl    R8, [RDI + #12 (8-bit)]	# range
2c5   	movl    RBX, RCX	# spill
2c7   	incl    RBX	# int
2c9   	cmpl    R11, #47
2cd   	je,s   B38  P=0.081130 C=6619.000000
2cd
2cf   B34: #	B70 B35 &lt;- B33  Freq: 42.5253
2cf   	cmpl    R11, #127
2d3   	jg     B70  P=0.000000 C=6082.000000
2d3
2d9   B35: #	B12 B36 &lt;- B34  Freq: 42.5253
2d9   	cmpl    R11, #97
2dd   	jl     B12  P=0.112792 C=6082.000000
2dd
2e3   B36: #	B26 B37 &lt;- B35  Freq: 37.7288
2e3   	cmpl    R11, #122
2e7   	jle     B26  P=1.000000 C=5396.000000
2e7
2ed   B37: #	B12 &lt;- B36  Freq: 1.79905e-005
2ed   	jmp     B12
2ed
2f2   B38: #	B78 B39 &lt;- B33  Freq: 3.7547
2f2   	cmpl    RCX, R8	# unsigned
2f5   	jnb,u  B78  P=0.000001 C=-1.000000
2f5
2fb   B39: #	B28 &lt;- B38  Freq: 3.7547
2fb   	movl    R11, #47	# int
301   	movw    [RDI + #16 + RCX &lt;&lt; #1], R11	# char/short
307   	jmp     B28
307
30c   B40: #	B41 &lt;- B107  Freq: 4.89355e-007
30c   	movq    [rsp + #72], RBX	# spill
311   	movl    RBX, R13	# spill
311
314   B41: #	B42 &lt;- B30 B40  Freq: 0.97871
314   	movl    [rsp + #32], RBX	# spill
314
318   B42: #	B53 B43 &lt;- B41 B48  Freq: 0.999857
318   	# TLS is in R15
318   	movq    RAX, [R15 + #112 (8-bit)]	# ptr
31c   	movq    R10, RAX	# spill
31f   	addq    R10, #32	# ptr
323   	# TLS is in R15
323   	cmpq    R10, [R15 + #128 (32-bit)]	# raw ptr
32a   	jnb,u  B53  P=0.000100 C=-1.000000
32a
330   B43: #	B44 &lt;- B42  Freq: 0.999757
330   	# TLS is in R15
330   	movq    [R15 + #112 (8-bit)], R10	# ptr
334   	PREFETCHNTA [R10 + #256 (32-bit)]	# Prefetch to non-temporal cache for write
33c   	movl    R11, narrowoop: precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# compressed ptr
342   	movq    R10, [R12 + R11 &lt;&lt; 3 + #176] (compressed oop addressing)	# ptr
34a   	movq    [RAX], R10	# ptr
34d   	movl    [RAX + #8 (8-bit)], narrowoop: precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# compressed ptr
354   	movl    [RAX + #12 (8-bit)], R12	# int (R12_heapbase==0)
358   	movq    [RAX + #16 (8-bit)], R12	# long (R12_heapbase==0)
35c   	movq    [RAX + #24 (8-bit)], R12	# long (R12_heapbase==0)
35c
360   B44: #	B82 B45 &lt;- B54 B43  Freq: 0.999857
360   	
360   	movq    RBP, RAX	# spill
363   	# checkcastPP of RBP
363   	movl    R11, [rsp + #32]	# spill
368   	testl   R11, R11
36b   	jl     B82  P=0.000001 C=-1.000000
36b
371   B45: #	B83 B46 &lt;- B44  Freq: 0.999856
371   	movq    R10, [rsp + #72]	# spill
376   	movl    R11, [R10 + #12 (8-bit)]	# range
37a   	subl    R11, [RSP + #32 (32-bit)]	# int
37f   	testl   R11, R11
382   	jl     B83  P=0.000001 C=-1.000000
382
388   B46: #	B188 B47 &lt;- B45  Freq: 0.999855
388   	movl    R11, [rsp + #32]	# spill
38d   	movl    [RBP + #20 (8-bit)], R11	# int ! Field java/lang/String.count
391   	movq    RDX, [rsp + #72]	# spill
396   	xorl    R8, R8	# int
399   	movl    R9, [rsp + #32]	# spill
39e   	nop 	# 1 bytes pad for loops and calls
39f   	call,static  java.util.Arrays::copyOfRange
        # java.lang.String::&lt;init&gt; @ bci:65  L[0]=_ L[1]=_ L[2]=_ L[3]=_ STK[0]=RBP
        # sun.net.www.ParseUtil::encodePath @ bci:332  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=Oop off=932}
3a4
3a4   B47: #	N1 &lt;- B46  Freq: 0.999835
        # Block is sole successor of call
3a4   	movq    R10, RBP	# ptr -&gt; long
3a7   	encode_heap_oop R11,RAX
3ae   	movl    [RBP + #12 (8-bit)], R11	# compressed ptr ! Field java/lang/String.value
3b2   	shrq    R10, #9
3b6   	movl    R11, 0x0000000001b89000	# ptr (positive 32-bit)
3bc   	movb    [R11 + R10], R12	# short/char (R12_heapbase==0)
3c0   	MEMBAR-release ! (empty encoding)
3c0   	movq    RAX, RBP	# spill
3c3   	addq	rsp, 128	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
3d1   	ret
3d1
3d2   B48: #	B42 &lt;- B9  Freq: 0.0211471
3d2   	pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #72]
3da   	xorl    R11, R11	# int
3dd   	movl    [rsp + #32], R11	# spill
3e2   	jmp     B42
3e2
3e7   B49: #	B181 B50 &lt;- B2 B3  Freq: 0.00010103
3e7   	movl    [rsp + #32], R10	# spill
3ec   	movq    RDX, precise klass [C: 0x000000000678d778:Constant:exact *	# ptr
3f6   	nop 	# 1 bytes pad for loops and calls
3f7   	call,static  wrapper for: _new_array_Java
        # sun.net.www.ParseUtil::encodePath @ bci:9  L[0]=RBP L[1]=rsp + #52 L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop off=1020}
3fc
3fc   B50: #	B5 &lt;- B49  Freq: 0.000101028
        # Block is sole successor of call
3fc   	movl    R10, [rsp + #32]	# spill
401   	movq    R11, RAX	# spill
404   	jmp     B5
404
409   B51: #	B182 B52 &lt;- B5 B6  Freq: 0.00010103
409   	movq    RDX, precise klass [C: 0x000000000678d778:Constant:exact *	# ptr
413   	movl    R8, R10	# spill
416   	movl    [rsp + #48], R10	# spill
41b   	movq    [rsp + #56], R11	# spill
420   	nop 	# 3 bytes pad for loops and calls
423   	call,static  wrapper for: _new_array_Java
        # java.lang.String::toCharArray @ bci:4  L[0]=RBP L[1]=_
        # sun.net.www.ParseUtil::encodePath @ bci:15  L[0]=RBP L[1]=rsp + #52 L[2]=rsp + #56 L[3]=#0 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{rbp=Oop [56]=Oop off=1064}
428
428   B52: #	B8 &lt;- B51  Freq: 0.000101028
        # Block is sole successor of call
428   	movq    RBX, RAX	# spill
42b   	jmp     B8
42b
430   B53: #	B180 B54 &lt;- B42  Freq: 0.000100002
430   	movq    RDX, precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# ptr
43a   	nop 	# 1 bytes pad for loops and calls
43b   	call,static  wrapper for: _new_instance_Java
        # sun.net.www.ParseUtil::encodePath @ bci:325  L[0]=_ L[1]=_ L[2]=rsp + #72 L[3]=rsp + #32 L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{[72]=Oop off=1088}
440
440   B54: #	B44 &lt;- B53  Freq: 0.0001
        # Block is sole successor of call
440   	jmp     B44
440
445   B55: #	B56 &lt;- B32  Freq: 4.68946e-005
445   	movl    [rsp + #40], RCX	# spill
449   	pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #32]
449
451   B56: #	N1 &lt;- B55 B120  Freq: 4.68946e-005
451   	movl    RDX, #-28	# int
456   	movl    [rsp + #48], R14	# spill
45b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:40  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #32 L[3]=rsp + #40 L[4]=rsp + #64 L[5]=RBP L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #64 STK[1]=rsp + #48
        # OopMap{[32]=Oop [64]=Oop off=1120}
460   	INT3   ; ShouldNotReachHere
460
461   B57: #	B58 &lt;- B26  Freq: 4.13117e-005
461   	movl    [rsp + #44], R11	# spill
466   	movl    [rsp + #40], RCX	# spill
46a   	pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #32]
472   	movl    R13, RBX	# spill
472
475   B58: #	N1 &lt;- B57 B125  Freq: 4.13117e-005
475   	movl    RDX, #-28	# int
47a   	movl    [rsp + #48], R14	# spill
47f   	movl    [rsp + #56], R13	# spill
484   	nop 	# 3 bytes pad for loops and calls
487   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:133  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #32 L[3]=rsp + #56 L[4]=rsp + #64 L[5]=RBP L[6]=rsp + #48 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #40 STK[2]=rsp + #44
        # OopMap{[32]=Oop [64]=Oop off=1164}
48c   	INT3   ; ShouldNotReachHere
48c
48d   B59: #	B61 B60 &lt;- B28  Freq: 2.2068e-005
48d   	movl    R10, R8	# spill
490   	sall    R10, #1
493   	addl    R10, #16	# int
497   	testl   R10, R10
49a   	jge,s   B61  P=0.500000 C=-1.000000
49a
49c   B60: #	B61 &lt;- B59  Freq: 1.1034e-005
49c   	movl    R10, #2147483647	# int
49c
4a2   B61: #	B118 B62 &lt;- B60 B59  Freq: 2.2068e-005
4a2   	movslq  R11, R10	# i2l
4a5   	salq    R11, #1
4a8   	addq    R11, #23	# long
4ac   	movq    RSI, R11	# spill
4af   	andq    RSI, #-8	# long
4b3   	cmpl    R10, #524288	# unsigned
4ba   	jnbe,u  B118  P=0.000001 C=-1.000000
4ba
4c0   B62: #	B118 B63 &lt;- B61  Freq: 2.2068e-005
4c0   	# TLS is in R15
4c0   	movq    R13, [R15 + #112 (8-bit)]	# ptr
4c4   	movq    R9, R13	# spill
4c7   	addq    R9, RSI	# ptr
4ca   	# TLS is in R15
4ca   	cmpq    R9, [R15 + #128 (32-bit)]	# raw ptr
4d1   	jnb,u  B118  P=0.000100 C=-1.000000
4d1
4d7   B63: #	B64 &lt;- B62  Freq: 2.20657e-005
4d7   	# TLS is in R15
4d7   	movq    [R15 + #112 (8-bit)], R9	# ptr
4db   	PREFETCHNTA [R9 + #256 (32-bit)]	# Prefetch to non-temporal cache for write
4e3   	movq    [R13], 0x0000000000000001	# ptr
4eb   	PREFETCHNTA [R9 + #320 (32-bit)]	# Prefetch to non-temporal cache for write
4f3   	movl    [R13 + #8 (8-bit)], narrowoop: precise klass [C: 0x000000000678d778:Constant:exact *	# compressed ptr
4fb   	movl    [R13 + #12 (8-bit)], R10	# int
4ff   	PREFETCHNTA [R9 + #384 (32-bit)]	# Prefetch to non-temporal cache for write
4ff
507   B64: #	B121 B65 &lt;- B119 B63  Freq: 2.2068e-005
507   	
507   	# checkcastPP of R13
507   	movq    R9, R13	# spill
50a   	addq    R9, #16	# ptr
50e   	shrq    R11, #3
512   	movq    RCX, R11	# spill
515   	addq    RCX, #-2	# long
519   	cmpl    R8, RBX	# unsigned
51c   	jb,u  B121  P=0.000001 C=-1.000000
51c
522   B65: #	B121 B66 &lt;- B64  Freq: 2.2068e-005
522   	cmpl    R10, RBX	# unsigned
525   	jb,u  B121  P=0.000001 C=-1.000000
525
52b   B66: #	B123 B67 &lt;- B65  Freq: 2.20679e-005
52b   	testl   RBX, RBX
52d   	jle     B123  P=0.000001 C=-1.000000
52d
533   B67: #	B117 B68 &lt;- B66  Freq: 2.20679e-005
533   	movq    RDX, RDI	# spill
536   	addq    RDX, #16	# ptr
53a   	cmpl    RBX, R10
53d   	jl     B117  P=0.001000 C=-1.000000
53d
543   B68: #	B69 &lt;- B67  Freq: 2.20458e-005
543   	addq    RSI, #-16	# long
547   	shrq    RSI, #3
54b   	movq    RCX, RDX	# spill
54e   	movq    RDX, R9	# spill
551   	movq    R8, RSI	# spill
554   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
561
561   B69: #	B30 &lt;- B117 B68 B122 B124  Freq: 2.2068e-005
561   	
561   	movq    [rsp + #72], R13	# spill
566   	jmp     B30
566
56b   B70: #	B74 B71 &lt;- B34  Freq: 2.02776e-005
56b   	movl    R10, R11	# spill
56e   	shrl    R10, #6
572   	movl    RBX, R11	# spill
575   	andl    RBX, #63	# int
578   	orl     RBX, #128	# int
57e   	cmpl    R11, #2047
585   	jg,s   B74  P=0.500000 C=-1.000000
585
587   B71: #	B178 B72 &lt;- B70  Freq: 1.01388e-005
587   	movl    [rsp + #92], RBX	# spill
58b   	movl    [rsp + #88], R8	# spill
590   	movl    [rsp + #84], R11	# spill
595   	movl    [rsp + #80], R14	# spill
59a   	movl    [rsp + #36], RBP	# spill
59e   	andl    R10, #31	# int
5a2   	orl     R10, #192	# int
5a9   	movq    RDX, [rsp + #72]	# spill
5ae   	movl    R8, R10	# spill
5b1   	movl    R9, RCX	# spill
5b4   	nop 	# 3 bytes pad for loops and calls
5b7   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:252  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=rsp + #84 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=1468}
5bc
5bc   B72: #	B174 B73 &lt;- B71  Freq: 1.01386e-005
        # Block is sole successor of call
5bc   	movq    RDX, [rsp + #72]	# spill
5c1   	movl    R8, [rsp + #92]	# spill
5c6   	movl    R9, RAX	# spill
5c9   	nop 	# 2 bytes pad for loops and calls
5cb   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:270  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=1488}
5d0
5d0   B73: #	B28 &lt;- B72  Freq: 1.01384e-005
        # Block is sole successor of call
5d0   	movl    RBP, [rsp + #36]	# spill
5d4   	movq    RDI, [rsp + #72]	# spill
5d9   	movl    R14, [rsp + #80]	# spill
5de   	movl    R8, [rsp + #88]	# spill
5e3   	movl    RBX, RAX	# spill
5e5   	jmp     B28
5e5
5ea   B74: #	B176 B75 &lt;- B70  Freq: 1.01388e-005
5ea   	movl    [rsp + #92], RBX	# spill
5ee   	movl    [rsp + #88], R10	# spill
5f3   	movl    [rsp + #84], R8	# spill
5f8   	movl    [rsp + #80], R14	# spill
5fd   	movl    [rsp + #36], RBP	# spill
601   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
613   	movl    R8, R11	# spill
616   	movl    [rsp + #48], R11	# spill
61b   	shrl    R8, #12
61f   	orl     R8, #224	# int
626   	movq    RDX, [rsp + #72]	# spill
62b   	movl    R9, RCX	# spill
62e   	nop 	# 1 bytes pad for loops and calls
62f   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:193  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=rsp + #48 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=1588}
634
634   B75: #	B172 B76 &lt;- B74  Freq: 1.01386e-005
        # Block is sole successor of call
634   	movl    R11, [rsp + #88]	# spill
639   	andl    R11, #63	# int
63d   	orl     R11, #128	# int
644   	movq    RDX, [rsp + #72]	# spill
649   	movl    R8, R11	# spill
64c   	movl    R9, RAX	# spill
64f   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:212  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=rsp + #48 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=1620}
654
654   B76: #	B170 B77 &lt;- B75  Freq: 1.01384e-005
        # Block is sole successor of call
654   	movq    RDX, [rsp + #72]	# spill
659   	movl    R8, [rsp + #92]	# spill
65e   	movl    R9, RAX	# spill
661   	nop 	# 2 bytes pad for loops and calls
663   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:230  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=1640}
668
668   B77: #	B28 &lt;- B76  Freq: 1.01382e-005
        # Block is sole successor of call
668   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
67a   	movl    RBP, [rsp + #36]	# spill
67e   	movq    RDI, [rsp + #72]	# spill
683   	movl    R14, [rsp + #80]	# spill
688   	movl    R8, [rsp + #84]	# spill
68d   	movl    RBX, RAX	# spill
68f   	jmp     B28
68f
694   B78: #	B79 &lt;- B38  Freq: 3.80456e-006
694   	movl    [rsp + #40], RCX	# spill
698   	pushq   [rsp + #72]	# 64-bit mem-mem spill
	popq    [rsp + #32]
6a0   	movl    R13, RBX	# spill
6a0
6a3   B79: #	N1 &lt;- B78 B144  Freq: 3.80456e-006
6a3   	movl    RDX, #-28	# int
6a8   	movl    [rsp + #44], R14	# spill
6ad   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #52]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
6bf   	movl    [rsp + #52], R13	# spill
6c4   	nop 	# 3 bytes pad for loops and calls
6c7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:73  L[0]=_ L[1]=rsp + #48 L[2]=rsp + #32 L[3]=rsp + #52 L[4]=rsp + #64 L[5]=RBP L[6]=rsp + #44 L[7]=_ L[8]=_ L[9]=_ STK[0]=rsp + #32 STK[1]=rsp + #40 STK[2]=#47
        # OopMap{[32]=Oop [64]=Oop off=1740}
6cc   	INT3   ; ShouldNotReachHere
6cc
6cd   B80: #	B81 &lt;- B15  Freq: 1.7783e-006
6cd   	movl    RBP, R11	# spill
6cd
6d0   B81: #	N1 &lt;- B80 B145  Freq: 1.7783e-006
6d0   	movl    RDX, #-10	# int
6d5   	nop 	# 2 bytes pad for loops and calls
6d7   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:142  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL STK[1]=RBP
        # OopMap{off=1756}
6dc   	INT3   ; ShouldNotReachHere
6dc
6dd   B82: #	N1 &lt;- B44  Freq: 9.99857e-007
6dd   	movl    RDX, #7	# int
6e2   	nop 	# 1 bytes pad for loops and calls
6e3   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;7&apos;)
        # java.lang.String::&lt;init&gt; @ bci:21  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #32
        # sun.net.www.ParseUtil::encodePath @ bci:332  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=Oop off=1768}
6e8   	INT3   ; ShouldNotReachHere
6e8
6e9   B83: #	N1 &lt;- B45  Freq: 9.99856e-007
6e9   	movl    RDX, #7	# int
6ee   	nop 	# 1 bytes pad for loops and calls
6ef   	call,static  wrapper for: uncommon_trap(reason=&apos;unloaded&apos; action=&apos;reinterpret&apos; index=&apos;7&apos;)
        # java.lang.String::&lt;init&gt; @ bci:38  L[0]=_ L[1]=_ L[2]=#0 L[3]=rsp + #32
        # sun.net.www.ParseUtil::encodePath @ bci:332  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP
        # OopMap{rbp=Oop off=1780}
6f4   	INT3   ; ShouldNotReachHere
6f4
6f5   B84: #	B85 &lt;- B23  Freq: 9.78046e-007
6f5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #84]
	movl    [rsp + #92], rax
	movq    rax, [rsp - #8]
707   	movq    RBP, [rsp + #72]	# spill
707
70c   B85: #	N1 &lt;- B84 B146  Freq: 9.78046e-007
70c   	movl    RDX, #-28	# int
711   	nop 	# 2 bytes pad for loops and calls
713   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:166  L[0]=_ L[1]=rsp + #52 L[2]=RBP L[3]=rsp + #92 L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_ STK[0]=RBP STK[1]=rsp + #32 STK[2]=rsp + #36
        # OopMap{rbp=Oop [64]=Oop off=1816}
718   	INT3   ; ShouldNotReachHere
718
719   B86: #	B87 &lt;- B19  Freq: 8.89131e-007
719   	movq    RBP, [rsp + #72]	# spill
719
71e   B87: #	N1 &lt;- B86 B147  Freq: 8.89132e-007
71e   	movl    RDX, #-28	# int
723   	movq    [rsp + #56], R8	# spill
728   	movl    [rsp + #48], R11	# spill
72d   	nop 	# 2 bytes pad for loops and calls
72f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # java.util.BitSet::get @ bci:53  L[0]=_ L[1]=rsp + #36 L[2]=_ STK[0]=rsp + #56 STK[1]=rsp + #48
        # sun.net.www.ParseUtil::encodePath @ bci:142  L[0]=_ L[1]=rsp + #52 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=rsp + #36 L[8]=_ L[9]=_
        # OopMap{rbp=Oop [56]=Oop [64]=Oop off=1844}
734   	INT3   ; ShouldNotReachHere
734
735   B88: #	B109 &lt;- B10  Freq: 4.89416e-007
735   	movq    R10, [rsp + #56]	# spill
73a   	xorl    R14, R14	# int
73d   	xorl    RBX, RBX	# int
73f   	jmp     B109
73f
744   B89: #	B102 B90 &lt;- B114 B112  top-of-loop Freq: 2.34901e-006
744   	cmpl    R11, #65
748   	jge     B102  P=0.520408 C=686.000000
748
74e   B90: #	B92 B91 &lt;- B102 B89  Freq: 1.12657e-006
74e   	cmpl    R11, #48
752   	jl,s   B92  P=0.762918 C=329.000000
752
754   B91: #	B103 B92 &lt;- B90  Freq: 2.67089e-007
754   	cmpl    R11, #57
758   	jle     B103  P=1.000000 C=78.000000
758
75e   B92: #	B145 B93 &lt;- B91 B90  Freq: 8.59479e-007
75e   	movq    R10, precise klass sun/net/www/ParseUtil: 0x0000000007fb7508:Constant:exact *	# ptr
768   	movl    R10, [R10 + #608 (32-bit)]	# compressed ptr ! Field sun/net/www/ParseUtil.encodedInPath
76f   	testl   R10, R10	# compressed ptr
772   	je     B145  P=0.000001 C=-1.000000
772
778   B93: #	B169 B94 &lt;- B92  Freq: 8.59478e-007
778   	movl    [rsp + #92], R13	# spill
77d   	movl    [rsp + #88], RDI	# spill
781   	movl    [rsp + #84], R11	# spill
786   	movl    [rsp + #80], RBX	# spill
78a   	movq    [rsp + #72], R9	# spill
78f   	movl    [rsp + #40], R14	# spill
794   	movl    [rsp + #44], RBP	# spill
798   	pushq   [rsp + #56]	# 64-bit mem-mem spill
	popq    [rsp + #32]
7a0   	movl    RBP, [rsp + #48]	# spill
7a4   	decode_heap_oop_not_null R11,R10
7a8   	movq    [rsp + #56], R11	# spill
7ad   	movl    [rsp + #48], R10	# spill
7b2   	movq    RDX, R11	# spill
7b5   	nop 	# 2 bytes pad for loops and calls
7b7   	call,static  java.util.BitSet::checkInvariants
        # java.util.BitSet::get @ bci:32  L[0]=rsp + #56 L[1]=rsp + #84 L[2]=_
        # sun.net.www.ParseUtil::encodePath @ bci:142  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=rsp + #80 L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=rsp + #84 L[8]=_ L[9]=_
        # OopMap{[32]=Oop [48]=NarrowOop [56]=Oop [64]=Oop [72]=Oop off=1980}
7bc
7bc   B94: #	B100 B95 &lt;- B93  Freq: 8.59461e-007
        # Block is sole successor of call
7bc   	movl    R9, [rsp + #48]	# spill
7c1   	movl    R8, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# int ! Field java/util/BitSet.wordsInUse
7c6   	movl    R11, [rsp + #84]	# spill
7cb   	sarl    R11, #6
7cf   	cmpl    R11, R8
7d2   	jge,s   B100  P=0.500000 C=-1.000000
7d2
7d4   B95: #	B156 B96 &lt;- B94  Freq: 4.29731e-007
7d4   	movl    R8, [R12 + R9 &lt;&lt; 3 + #20] (compressed oop addressing)	# compressed ptr ! Field java/util/BitSet.words
7d9   	movl    R10, [R12 + R8 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
7de   	NullCheck R8
7de
7de   B96: #	B147 B97 &lt;- B95  Freq: 4.2973e-007
7de   	decode_heap_oop_not_null R8,R8
7e2   	cmpl    R11, R10	# unsigned
7e5   	jnb,u  B147  P=0.000001 C=-1.000000
7e5
7eb   B97: #	B100 B98 &lt;- B96  Freq: 4.2973e-007
7eb   	movl    R10, #1	# long (unsigned 32-bit)
7f1   	movl    RCX, [rsp + #84]	# spill
7f5   	salq    R10, RCX
7f8   	testq   R10, [R8 + #16 + R11 &lt;&lt; #3]
7fd   	je,s   B100  P=0.100000 C=-1.000000
7fd
7ff   B98: #	B168 B99 &lt;- B97  Freq: 3.86757e-007
7ff   	movq    RDX, [rsp + #72]	# spill
804   	movl    R8, RCX	# spill
807   	movl    R9, [rsp + #80]	# spill
80c   	nop 	# 3 bytes pad for loops and calls
80f   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:152  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #44 L[6]=rsp + #40 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[32]=Oop [64]=Oop [72]=Oop off=2068}
814
814   B99: #	B105 &lt;- B98  Freq: 3.86749e-007
        # Block is sole successor of call
814   	movl    [rsp + #48], RBP	# spill
818   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #56]
820   	movl    RBP, [rsp + #44]	# spill
824   	movl    R14, [rsp + #40]	# spill
829   	movq    R9, [rsp + #72]	# spill
82e   	movl    RDI, [rsp + #88]	# spill
832   	movl    R13, RAX	# spill
835   	jmp,s   B105
835
837   B100: #	B146 B101 &lt;- B94 B97  Freq: 4.72704e-007
837   	movl    R10, [rsp + #80]	# spill
83c   	cmpl    R10, [RSP + #88 (32-bit)]	# unsigned
841   	jnb,u  B146  P=0.000001 C=-1.000000
841
847   B101: #	B105 &lt;- B100  Freq: 4.72703e-007
847   	movq    R9, [rsp + #72]	# spill
84c   	movl    R8, [rsp + #84]	# spill
851   	movw    [R9 + #16 + R10 &lt;&lt; #1], R8	# char/short
857   	movl    [rsp + #48], RBP	# spill
85b   	pushq   [rsp + #32]	# 64-bit mem-mem spill
	popq    [rsp + #56]
863   	movl    RBP, [rsp + #44]	# spill
867   	movl    R14, [rsp + #40]	# spill
86c   	movl    RDI, [rsp + #88]	# spill
870   	movl    R13, [rsp + #92]	# spill
875   	jmp,s   B105
875
877   B102: #	B90 B103 &lt;- B89  Freq: 1.22245e-006
877   	cmpl    R11, #90
87b   	jg     B90  P=0.000000 C=357.000000
87b
881   B103: #	B125 B104 &lt;- B91 B102 B113  top-of-loop Freq: 1.99665e-005
881   	cmpl    RBX, RDI	# unsigned
883   	jnb,u  B125  P=0.000001 C=-1.000000
883
889   B104: #	B105 &lt;- B103  Freq: 1.99665e-005
889   	movw    [R9 + #16 + RBX &lt;&lt; #1], R11	# char/short
889
88f   B105: #	B126 B106 &lt;- B139 B143 B101 B99 B104 B116  Freq: 2.314e-005
88f   	movl    R10, R13	# spill
892   	addl    R10, #9	# int
896   	cmpl    R10, RDI
899   	jg     B126  P=0.000000 C=6619.000000
899
89f   B106: #	B107 &lt;- B105  Freq: 2.314e-005
89f   	movq    RBX, R9	# spill
89f
8a2   B107: #	B40 B108 &lt;- B148 B135 B152 B154 B106  Freq: 2.314e-005
8a2   	incl    R14	# int
8a5   	cmpl    R14, RBP
8a8   	jge     B40	# loop end  P=0.021148 C=6619.000000
8a8
8ae   B108: #	B109 &lt;- B107  Freq: 2.26506e-005
8ae   	movq    R10, RBX	# spill
8b1   	movq    [rsp + #56], RBX	# spill
8b6   	movl    RBX, R13	# spill
8b6
8b9   B109: #	B120 B110 &lt;- B88 B108 	Loop: B109-B108 inner stride: not constant  Freq: 2.314e-005
8b9   	cmpl    R14, [RSP + #48 (32-bit)]	# unsigned
8be   	jnb,u  B120  P=0.000001 C=-1.000000
8be
8c4   B110: #	B115 B111 &lt;- B109  Freq: 2.314e-005
8c4   	movq    R11, [rsp + #64]	# spill
8c9   	movzwl  R11, [R11 + #16 + R14 &lt;&lt; #1]	# ushort/char
8cf   	movq    R9, R10	# spill
8d2   	movl    RDI, [R10 + #12 (8-bit)]	# range
8d6   	movl    R13, RBX	# spill
8d9   	incl    R13	# int
8dc   	cmpl    R11, #92
8e0   	je,s   B115  P=0.100000 C=-1.000000
8e0
8e2   B111: #	B136 B112 &lt;- B110  Freq: 2.0826e-005
8e2   	cmpl    R11, #127
8e6   	jg     B136  P=0.000000 C=6082.000000
8e6
8ec   B112: #	B89 B113 &lt;- B111  Freq: 2.0826e-005
8ec   	cmpl    R11, #97
8f0   	jl     B89  P=0.112792 C=6082.000000
8f0
8f6   B113: #	B103 B114 &lt;- B112  Freq: 1.8477e-005
8f6   	cmpl    R11, #122
8fa   	jle     B103  P=1.000000 C=5396.000000
8fa
900   B114: #	B89 &lt;- B113  Freq: 8.81052e-012
900   	jmp     B89
900
905   B115: #	B144 B116 &lt;- B110  Freq: 2.314e-006
905   	cmpl    RBX, RDI	# unsigned
907   	jnb,u  B144  P=0.000001 C=-1.000000
907
90d   B116: #	B105 &lt;- B115  Freq: 2.314e-006
90d   	movl    R10, #47	# int
913   	movw    [R9 + #16 + RBX &lt;&lt; #1], R10	# char/short
919   	jmp     B105
919
91e   B117: #	B69 &lt;- B67  Freq: 2.20679e-008
91e   	movslq  R8, RBX	# i2l
921   	movq    R10, R8	# spill
924   	salq    R10, #1
927   	addq    R10, #16	# long
92b   	movq    RCX, R10	# spill
92e   	andq    RCX, #-7	# long
932   	movq    RDI, R13	# spill
935   	addq    RDI, RCX	# ptr
938   	shrq    R10, #3
93c   	subq    R11, R10	# long
93f   	movq    RCX, R11	# spill
942   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
947   	movq    RCX, RDX	# spill
94a   	movq    RDX, R9	# spill
94d   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
95a   	jmp     B69
95a
95f   B118: #	B166 B119 &lt;- B61 B62  Freq: 2.22952e-009
95f   	movq    [rsp + #104], RSI	# spill
964   	movq    [rsp + #96], R11	# spill
969   	movl    [rsp + #92], R10	# spill
96e   	movl    [rsp + #88], RBX	# spill
972   	movl    [rsp + #84], R8	# spill
977   	movl    [rsp + #80], R14	# spill
97c   	movq    [rsp + #72], RDI	# spill
981   	movl    [rsp + #36], RBP	# spill
985   	movq    RDX, precise klass [C: 0x000000000678d778:Constant:exact *	# ptr
98f   	movl    R8, R10	# spill
992   	nop 	# 1 bytes pad for loops and calls
993   	call,static  wrapper for: _new_array_Java
        # sun.net.www.ParseUtil::encodePath @ bci:303  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #72 L[3]=rsp + #88 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #80 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [72]=Oop off=2456}
998
998   B119: #	B64 &lt;- B118  Freq: 2.22948e-009
        # Block is sole successor of call
998   	movl    RBP, [rsp + #36]	# spill
99c   	movq    RDI, [rsp + #72]	# spill
9a1   	movl    R14, [rsp + #80]	# spill
9a6   	movl    R8, [rsp + #84]	# spill
9ab   	movl    RBX, [rsp + #88]	# spill
9af   	movl    R10, [rsp + #92]	# spill
9b4   	movq    R11, [rsp + #96]	# spill
9b9   	movq    RSI, [rsp + #104]	# spill
9be   	movq    R13, RAX	# spill
9c1   	jmp     B64
9c1
9c6   B120: #	B56 &lt;- B109  Freq: 2.34473e-011
9c6   	movl    [rsp + #40], RBX	# spill
9ca   	movq    [rsp + #32], R10	# spill
9cf   	jmp     B56
9cf
9d4   B121: #	B164 B122 &lt;- B64 B65 B123  Freq: 4.4136e-011
9d4   	movq    [rsp + #80], R13	# spill
9d9   	movl    [rsp + #76], RBX	# spill
9dd   	movl    [rsp + #72], R14	# spill
9e2   	movl    [rsp + #36], RBP	# spill
9e6   	movq    RDI, R9	# spill
9e9   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
9ee   	movq    RDX, [rsp + #56]	# spill
9f3   	xorl    R8, R8	# int
9f6   	movq    R9, R13	# spill
9f9   	xorl    RDI, RDI	# int
9fb   	movl    RSI, RBX	# spill
9fd   	nop 	# 2 bytes pad for loops and calls
9ff   	call,static  wrapper for: slow_arraycopy
        # sun.net.www.ParseUtil::encodePath @ bci:313  L[0]=_ L[1]=rsp + #52 L[2]=_ L[3]=rsp + #76 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap{[64]=Oop [80]=Oop off=2564}
a04
a04   B122: #	B69 &lt;- B121  Freq: 4.41351e-011
        # Block is sole successor of call
a04   	movl    RBP, [rsp + #36]	# spill
a08   	movl    R14, [rsp + #72]	# spill
a0d   	movl    RBX, [rsp + #76]	# spill
a11   	movq    R13, [rsp + #80]	# spill
a16   	jmp     B69
a16
a1b   B123: #	B121 B124 &lt;- B66  Freq: 2.20679e-011
a1b   	testl   RBX, RBX
a1d   	jl,s   B121  P=0.000001 C=-1.000000
a1d
a1f   B124: #	B69 &lt;- B123  Freq: 2.20679e-011
a1f   	movq    RDI, R9	# spill
a22   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
a27   	
a27   	jmp     B69
a27
a2c   B125: #	B58 &lt;- B103  Freq: 2.02317e-011
a2c   	movl    [rsp + #44], R11	# spill
a31   	movl    [rsp + #40], RBX	# spill
a35   	movq    [rsp + #32], R9	# spill
a3a   	jmp     B58
a3a
a3f   B126: #	B128 B127 &lt;- B105  Freq: 1.1034e-011
a3f   	movl    R10, RDI	# spill
a42   	sall    R10, #1
a45   	addl    R10, #16	# int
a49   	testl   R10, R10
a4c   	jge,s   B128  P=0.500000 C=-1.000000
a4c
a4e   B127: #	B128 &lt;- B126  Freq: 5.517e-012
a4e   	movl    R10, #2147483647	# int
a4e
a54   B128: #	B149 B129 &lt;- B127 B126  Freq: 1.1034e-011
a54   	movslq  R11, R10	# i2l
a57   	salq    R11, #1
a5a   	addq    R11, #23	# long
a5e   	movq    R8, R11	# spill
a61   	andq    R8, #-8	# long
a65   	cmpl    R10, #524288	# unsigned
a6c   	jnbe,u  B149  P=0.000001 C=-1.000000
a6c
a72   B129: #	B149 B130 &lt;- B128  Freq: 1.1034e-011
a72   	# TLS is in R15
a72   	movq    RBX, [R15 + #112 (8-bit)]	# ptr
a76   	movq    RCX, RBX	# spill
a79   	addq    RCX, R8	# ptr
a7c   	# TLS is in R15
a7c   	cmpq    RCX, [R15 + #128 (32-bit)]	# raw ptr
a83   	jnb,u  B149  P=0.000100 C=-1.000000
a83
a89   B130: #	B131 &lt;- B129  Freq: 1.10329e-011
a89   	# TLS is in R15
a89   	movq    [R15 + #112 (8-bit)], RCX	# ptr
a8d   	PREFETCHNTA [RCX + #256 (32-bit)]	# Prefetch to non-temporal cache for write
a94   	movq    [RBX], 0x0000000000000001	# ptr
a9b   	PREFETCHNTA [RCX + #320 (32-bit)]	# Prefetch to non-temporal cache for write
aa2   	movl    [RBX + #8 (8-bit)], narrowoop: precise klass [C: 0x000000000678d778:Constant:exact *	# compressed ptr
aa9   	movl    [RBX + #12 (8-bit)], R10	# int
aad   	PREFETCHNTA [RCX + #384 (32-bit)]	# Prefetch to non-temporal cache for write
aad
ab4   B131: #	B151 B132 &lt;- B150 B130  Freq: 1.1034e-011
ab4   	
ab4   	# checkcastPP of RBX
ab4   	movq    RDX, RBX	# spill
ab7   	addq    RDX, #16	# ptr
abb   	shrq    R11, #3
abf   	movq    RCX, R11	# spill
ac2   	addq    RCX, #-2	# long
ac6   	cmpl    RDI, R13	# unsigned
ac9   	jb,u  B151  P=0.000001 C=-1.000000
ac9
acf   B132: #	B151 B133 &lt;- B131  Freq: 1.1034e-011
acf   	cmpl    R10, R13	# unsigned
ad2   	jb,u  B151  P=0.000001 C=-1.000000
ad2
ad8   B133: #	B153 B134 &lt;- B132  Freq: 1.1034e-011
ad8   	testl   R13, R13
adb   	jle     B153  P=0.000001 C=-1.000000
adb
ae1   B134: #	B148 B135 &lt;- B133  Freq: 1.1034e-011
ae1   	movq    RSI, R9	# spill
ae4   	addq    RSI, #16	# ptr
ae8   	cmpl    R13, R10
aeb   	jl     B148  P=0.001000 C=-1.000000
aeb
af1   B135: #	B107 &lt;- B134  Freq: 1.10229e-011
af1   	addq    R8, #-16	# long
af5   	shrq    R8, #3
af9   	movq    RCX, RSI	# spill
afc   	call_leaf_nofp,runtime  jlong_disjoint_arraycopy
        No JVM State Info
        # 
b09   	jmp     B107
b09
b0e   B136: #	B140 B137 &lt;- B111  Freq: 9.93062e-012
b0e   	movl    R10, R11	# spill
b11   	shrl    R10, #6
b15   	movl    R8, R11	# spill
b18   	andl    R8, #63	# int
b1c   	orl     R8, #128	# int
b23   	cmpl    R11, #2047
b2a   	jg,s   B140  P=0.500000 C=-1.000000
b2a
b2c   B137: #	B162 B138 &lt;- B136  Freq: 4.96531e-012
b2c   	movl    [rsp + #92], R8	# spill
b31   	movl    [rsp + #88], RDI	# spill
b35   	movl    [rsp + #76], R11	# spill
b3a   	movq    [rsp + #80], R9	# spill
b3f   	movl    [rsp + #72], R14	# spill
b44   	movl    [rsp + #36], RBP	# spill
b48   	andl    R10, #31	# int
b4c   	orl     R10, #192	# int
b53   	movq    RDX, R9	# spill
b56   	movl    R8, R10	# spill
b59   	movl    R9, RBX	# spill
b5c   	nop 	# 3 bytes pad for loops and calls
b5f   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:252  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=rsp + #76 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=2916}
b64
b64   B138: #	B160 B139 &lt;- B137  Freq: 4.96521e-012
        # Block is sole successor of call
b64   	movq    RDX, [rsp + #80]	# spill
b69   	movl    R8, [rsp + #92]	# spill
b6e   	movl    R9, RAX	# spill
b71   	nop 	# 2 bytes pad for loops and calls
b73   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:270  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=2936}
b78
b78   B139: #	B105 &lt;- B138  Freq: 4.96511e-012
        # Block is sole successor of call
b78   	movl    RBP, [rsp + #36]	# spill
b7c   	movl    R14, [rsp + #72]	# spill
b81   	movq    R9, [rsp + #80]	# spill
b86   	movl    RDI, [rsp + #88]	# spill
b8a   	movl    R13, RAX	# spill
b8d   	jmp     B105
b8d
b92   B140: #	B163 B141 &lt;- B136  Freq: 4.96531e-012
b92   	movl    [rsp + #92], R8	# spill
b97   	movl    [rsp + #88], R10	# spill
b9c   	movl    [rsp + #76], RDI	# spill
ba0   	movq    [rsp + #80], R9	# spill
ba5   	movl    [rsp + #72], R14	# spill
baa   	movl    [rsp + #36], RBP	# spill
bae   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #48]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
bc0   	movl    R8, R11	# spill
bc3   	movl    [rsp + #48], R11	# spill
bc8   	shrl    R8, #12
bcc   	orl     R8, #224	# int
bd3   	movq    RDX, R9	# spill
bd6   	movl    R9, RBX	# spill
bd9   	nop 	# 2 bytes pad for loops and calls
bdb   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:193  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=rsp + #48 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=3040}
be0
be0   B141: #	B161 B142 &lt;- B140  Freq: 4.96521e-012
        # Block is sole successor of call
be0   	movl    R10, [rsp + #88]	# spill
be5   	andl    R10, #63	# int
be9   	orl     R10, #128	# int
bf0   	movq    RDX, [rsp + #80]	# spill
bf5   	movl    R8, R10	# spill
bf8   	movl    R9, RAX	# spill
bfb   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:212  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=rsp + #48 L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=3072}
c00
c00   B142: #	B159 B143 &lt;- B141  Freq: 4.96511e-012
        # Block is sole successor of call
c00   	movq    RDX, [rsp + #80]	# spill
c05   	movl    R8, [rsp + #92]	# spill
c0a   	movl    R9, RAX	# spill
c0d   	nop 	# 2 bytes pad for loops and calls
c0f   	call,static  sun.net.www.ParseUtil::escape
        # sun.net.www.ParseUtil::encodePath @ bci:230  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=_ L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=3092}
c14
c14   B143: #	B105 &lt;- B142  Freq: 4.96501e-012
        # Block is sole successor of call
c14   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #32]
	movl    [rsp + #48], rax
	movq    rax, [rsp - #8]
c26   	movl    RBP, [rsp + #36]	# spill
c2a   	movl    R14, [rsp + #72]	# spill
c2f   	movq    R9, [rsp + #80]	# spill
c34   	movl    RDI, [rsp + #76]	# spill
c38   	movl    R13, RAX	# spill
c3b   	jmp     B105
c3b
c40   B144: #	B79 &lt;- B115  Freq: 2.34473e-012
c40   	movl    [rsp + #40], RBX	# spill
c44   	movq    [rsp + #32], R9	# spill
c49   	jmp     B79
c49
c4e   B145: #	B81 &lt;- B92  Freq: 8.70892e-013
c4e   	movl    RBP, R11	# spill
c51   	jmp     B81
c51
c56   B146: #	B85 &lt;- B100  Freq: 4.78981e-013
c56   	movl    R8, [rsp + #84]	# spill
c5b   	movl    [rsp + #36], R8	# spill
c60   	movl    [rsp + #32], R10	# spill
c65   	movq    RBP, [rsp + #72]	# spill
c6a   	jmp     B85
c6a
c6f   B147: #	B87 &lt;- B96  Freq: 4.35436e-013
c6f   	movl    R10, [rsp + #84]	# spill
c74   	movl    [rsp + #36], R10	# spill
c79   	movl    R9, [rsp + #80]	# spill
c7e   	movl    [rsp + #32], R9	# spill
c83   	movq    RBP, [rsp + #72]	# spill
c88   	jmp     B87
c88
c8d   B148: #	B107 &lt;- B134  Freq: 1.1034e-014
c8d   	movslq  R8, R13	# i2l
c90   	movq    R10, R8	# spill
c93   	salq    R10, #1
c96   	addq    R10, #16	# long
c9a   	movq    R9, R10	# spill
c9d   	andq    R9, #-7	# long
ca1   	movq    RDI, RBX	# spill
ca4   	addq    RDI, R9	# ptr
ca7   	shrq    R10, #3
cab   	subq    R11, R10	# long
cae   	movq    RCX, R11	# spill
cb1   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
cb6   	movq    RCX, RSI	# spill
cb9   	call_leaf_nofp,runtime  arrayof_jshort_disjoint_arraycopy
        No JVM State Info
        # 
cc6   	jmp     B107
cc6
ccb   B149: #	B158 B150 &lt;- B128 B129  Freq: 1.11476e-015
ccb   	movq    [rsp + #104], R8	# spill
cd0   	movq    [rsp + #96], R11	# spill
cd5   	movl    [rsp + #92], R10	# spill
cda   	movl    [rsp + #88], R13	# spill
cdf   	movl    [rsp + #76], RDI	# spill
ce3   	movq    [rsp + #80], R9	# spill
ce8   	movl    [rsp + #72], R14	# spill
ced   	movl    [rsp + #36], RBP	# spill
cf1   	movq    RDX, precise klass [C: 0x000000000678d778:Constant:exact *	# ptr
cfb   	movl    R8, R10	# spill
cfe   	nop 	# 1 bytes pad for loops and calls
cff   	call,static  wrapper for: _new_array_Java
        # sun.net.www.ParseUtil::encodePath @ bci:303  L[0]=_ L[1]=rsp + #52 L[2]=rsp + #80 L[3]=rsp + #88 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=_
        # OopMap{[56]=Oop [64]=Oop [80]=Oop off=3332}
d04
d04   B150: #	B131 &lt;- B149  Freq: 1.11474e-015
        # Block is sole successor of call
d04   	movl    RBP, [rsp + #36]	# spill
d08   	movl    R14, [rsp + #72]	# spill
d0d   	movq    R9, [rsp + #80]	# spill
d12   	movl    RDI, [rsp + #76]	# spill
d16   	movl    R13, [rsp + #88]	# spill
d1b   	movl    R10, [rsp + #92]	# spill
d20   	movq    R11, [rsp + #96]	# spill
d25   	movq    R8, [rsp + #104]	# spill
d2a   	movq    RBX, RAX	# spill
d2d   	jmp     B131
d2d
d32   B151: #	B157 B152 &lt;- B131 B132 B153  Freq: 2.2068e-017
d32   	movq    [rsp + #80], RBX	# spill
d37   	movl    [rsp + #76], R13	# spill
d3c   	movl    [rsp + #72], R14	# spill
d41   	movl    [rsp + #36], RBP	# spill
d45   	movq    RDI, RDX	# spill
d48   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
d4d   	movq    RDX, [rsp + #56]	# spill
d52   	xorl    R8, R8	# int
d55   	movq    R9, RBX	# spill
d58   	xorl    RDI, RDI	# int
d5a   	movl    RSI, R13	# spill
d5d   	nop 	# 2 bytes pad for loops and calls
d5f   	call,static  wrapper for: slow_arraycopy
        # sun.net.www.ParseUtil::encodePath @ bci:313  L[0]=_ L[1]=rsp + #52 L[2]=_ L[3]=rsp + #76 L[4]=rsp + #64 L[5]=rsp + #36 L[6]=rsp + #72 L[7]=_ L[8]=_ L[9]=rsp + #80
        # OopMap{[64]=Oop [80]=Oop off=3428}
d64
d64   B152: #	B107 &lt;- B151  Freq: 2.20676e-017
        # Block is sole successor of call
d64   	movl    RBP, [rsp + #36]	# spill
d68   	movl    R14, [rsp + #72]	# spill
d6d   	movl    R13, [rsp + #76]	# spill
d72   	movq    RBX, [rsp + #80]	# spill
d77   	jmp     B107
d77
d7c   B153: #	B151 B154 &lt;- B133  Freq: 1.1034e-017
d7c   	testl   R13, R13
d7f   	jl,s   B151  P=0.000001 C=-1.000000
d7f
d81   B154: #	B107 &lt;- B153  Freq: 1.1034e-017
d81   	movq    RDI, RDX	# spill
d84   	xorl    rax, rax	# ClearArray:
	rep stosq	# Store rax to *rdi++ while rcx--
d89   	
d89   	jmp     B107
d89
d8e   B155: #	N1 &lt;- B1  Freq: 1.01328e-006
d8e   	movl    RDX, #-10	# int
d93   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # sun.net.www.ParseUtil::encodePath @ bci:1  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_ STK[0]=#NULL
        # OopMap{off=3480}
d98   	INT3   ; ShouldNotReachHere
d98
d99   B156: #	N1 &lt;- B18 B95  Freq: 8.89133e-007
d99   	movl    RDX, #-10	# int
d9e   	movl    RBP, R11	# spill
da1   	nop 	# 2 bytes pad for loops and calls
da3   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # java.util.BitSet::get @ bci:53  L[0]=_ L[1]=_ L[2]=_ STK[0]=#NULL STK[1]=RBP
        # sun.net.www.ParseUtil::encodePath @ bci:142  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ L[6]=_ L[7]=_ L[8]=_ L[9]=_
        # OopMap{off=3496}
da8   	INT3   ; ShouldNotReachHere
da8
da9   B157: #	B165 &lt;- B151  Freq: 2.2068e-022
da9   	# exception oop is in rax; no code emitted
da9   	jmp,s   B165
da9
dab   B158: #	B167 &lt;- B149  Freq: 1.11476e-020
dab   	# exception oop is in rax; no code emitted
dab   	jmp,s   B167
dab
dad   B159: #	B171 &lt;- B142  Freq: 4.96511e-017
dad   	# exception oop is in rax; no code emitted
dad   	jmp,s   B171
dad
daf   B160: #	B175 &lt;- B138  Freq: 4.96521e-017
daf   	# exception oop is in rax; no code emitted
daf   	jmp,s   B175
daf
db1   B161: #	B173 &lt;- B141  Freq: 4.96521e-017
db1   	# exception oop is in rax; no code emitted
db1   	jmp,s   B173
db1
db3   B162: #	B179 &lt;- B137  Freq: 4.96531e-017
db3   	# exception oop is in rax; no code emitted
db3   	jmp,s   B179
db3
db5   B163: #	B177 &lt;- B140  Freq: 4.96531e-017
db5   	# exception oop is in rax; no code emitted
db5   	jmp,s   B177
db5
db7   B164: #	B165 &lt;- B121  Freq: 4.4136e-016
db7   	# exception oop is in rax; no code emitted
db7
db7   B165: #	B189 &lt;- B164 B157  Freq: 4.4136e-016
db7   	movq    RDX, RAX	# spill
dba   	jmp,s   B189
dba
dbc   B166: #	B167 &lt;- B118  Freq: 2.22952e-014
dbc   	# exception oop is in rax; no code emitted
dbc
dbc   B167: #	B189 &lt;- B166 B158  Freq: 2.22952e-014
dbc   	movq    RDX, RAX	# spill
dbf   	jmp,s   B189
dbf
dc1   B168: #	B184 &lt;- B98  Freq: 3.86757e-012
dc1   	# exception oop is in rax; no code emitted
dc1   	jmp,s   B184
dc1
dc3   B169: #	B186 &lt;- B93  Freq: 8.59478e-012
dc3   	# exception oop is in rax; no code emitted
dc3   	jmp,s   B186
dc3
dc5   B170: #	B171 &lt;- B76  Freq: 1.01384e-010
dc5   	# exception oop is in rax; no code emitted
dc5
dc5   B171: #	B189 &lt;- B170 B159  Freq: 1.01384e-010
dc5   	movq    RDX, RAX	# spill
dc8   	jmp,s   B189
dc8
dca   B172: #	B173 &lt;- B75  Freq: 1.01386e-010
dca   	# exception oop is in rax; no code emitted
dca
dca   B173: #	B189 &lt;- B172 B161  Freq: 1.01386e-010
dca   	movq    RDX, RAX	# spill
dcd   	jmp,s   B189
dcd
dcf   B174: #	B175 &lt;- B72  Freq: 1.01386e-010
dcf   	# exception oop is in rax; no code emitted
dcf
dcf   B175: #	B189 &lt;- B174 B160  Freq: 1.01386e-010
dcf   	movq    RDX, RAX	# spill
dd2   	jmp,s   B189
dd2
dd4   B176: #	B177 &lt;- B74  Freq: 1.01388e-010
dd4   	# exception oop is in rax; no code emitted
dd4
dd4   B177: #	B189 &lt;- B176 B163  Freq: 1.01388e-010
dd4   	movq    RDX, RAX	# spill
dd7   	jmp,s   B189
dd7
dd9   B178: #	B179 &lt;- B71  Freq: 1.01388e-010
dd9   	# exception oop is in rax; no code emitted
dd9
dd9   B179: #	B189 &lt;- B178 B162  Freq: 1.01388e-010
dd9   	movq    RDX, RAX	# spill
ddc   	jmp,s   B189
ddc
dde   B180: #	B189 &lt;- B53  Freq: 1.00002e-009
dde   	# exception oop is in rax; no code emitted
dde   	movq    RDX, RAX	# spill
de1   	jmp,s   B189
de1
de3   B181: #	B189 &lt;- B49  Freq: 1.0103e-009
de3   	# exception oop is in rax; no code emitted
de3   	movq    RDX, RAX	# spill
de6   	jmp,s   B189
de6
de8   B182: #	B189 &lt;- B51  Freq: 1.0103e-009
de8   	# exception oop is in rax; no code emitted
de8   	movq    RDX, RAX	# spill
deb   	jmp,s   B189
deb
ded   B183: #	B184 &lt;- B21  Freq: 7.89731e-006
ded   	# exception oop is in rax; no code emitted
ded
ded   B184: #	B189 &lt;- B183 B168  Freq: 7.89731e-006
ded   	movq    RDX, RAX	# spill
df0   	jmp,s   B189
df0
df2   B185: #	B186 &lt;- B16  Freq: 1.755e-005
df2   	# exception oop is in rax; no code emitted
df2
df2   B186: #	B189 &lt;- B185 B169  Freq: 1.755e-005
df2   	movq    RDX, RAX	# spill
df5   	jmp,s   B189
df5
df7   B187: #	B189 &lt;- B8  Freq: 9.99999e-006
df7   	# exception oop is in rax; no code emitted
df7   	movq    RDX, RAX	# spill
dfa   	jmp,s   B189
dfa
dfc   B188: #	B189 &lt;- B46  Freq: 9.99855e-006
dfc   	# exception oop is in rax; no code emitted
dfc   	movq    RDX, RAX	# spill
dfc
dff   B189: #	N1 &lt;- B187 B186 B184 B177 B173 B171 B179 B175 B165 B188 B181 B182 B167 B180  Freq: 4.54493e-005
dff   	addq	rsp, 128	# Destroy frame
	popq	rbp

e07   	jmp     rethrow_stub
e07

</opto_assembly>
<writer thread='3068'/>
<opto_assembly compile_id='13'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/Object&apos;
 - constants:         0x00000000088cffa0constant pool [87] for &apos;java/lang/Object&apos;
 - access:            0x81000001  public 
 - name:              &apos;&lt;init&gt;&apos;
 - signature:         &apos;()V&apos;
 - max stack:         0
 - max locals:        1
 - size of params:    1
 - method size:       15
 - vtable index:      -2
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f450
 - compiled entry     0x000000000276e831
 - code size:         1
 - code start:        0x000000077ae07e90
 - code end (excl):   0x000000077ae07e91
 - method data:       0x000000077b11ebd8
 - checked ex length: 0
 - linenumber start:  0x000000077ae07e91
 - localvar length:   1
 - localvar start:    0x000000077ae07e9a
#
#  void ( java/lang/Object:NotNull * )
#
#r016 rdx:rdx   : parm 0: java/lang/Object:NotNull *
# -- Old rsp -- Framesize: 32 --
#r089 rsp+28: pad2, in_preserve
#r088 rsp+24: pad2, in_preserve
#r087 rsp+20: pad2, in_preserve
#r086 rsp+16: pad2, in_preserve
#r085 rsp+12: pad2, in_preserve
#r084 rsp+ 8: return address
#r083 rsp+ 4: Fixed slot 1
#r082 rsp+ 0: Fixed slot 0
#
000   N45: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #16	# Create frame
02c   	movl    R10, [RDX + #8 (8-bit)]	# compressed klass ptr
030   	movl    R8, #1073741824	# int
036   	testl   R8, [R12 + R10 &lt;&lt; 3 + #156] (compressed oop addressing)
03e   	je,s   B3  P=0.000001 C=-1.000000
03e
040   B2: #	B4 B3 &lt;- B1  Freq: 0.999999
040   	movq    RBP, RDX	# spill
043   	call,static  wrapper for: _register_finalizer_Java
        # java.lang.Object::&lt;init&gt; @ bci:0  L[0]=RBP
        # OopMap{rbp=Oop off=72}
048
048   B3: #	N45 &lt;- B1 B2  Freq: 0.99998
048   	addq	rsp, 16	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
053   	ret
053
054   B4: #	N45 &lt;- B2  Freq: 9.99999e-006
054   	# exception oop is in rax; no code emitted
054   	movq    RDX, RAX	# spill
057   	addq	rsp, 16	# Destroy frame
	popq	rbp

05c   	jmp     rethrow_stub
05c

</opto_assembly>
<opto_assembly compile_id='14'>
{method} 
 - klass: {other class}
 - method holder:     &apos;java/lang/String&apos;
 - constants:         0x00000000088cffa0constant pool [621] for &apos;java/lang/String&apos;
 - access:            0xc1000001  public 
 - name:              &apos;equals&apos;
 - signature:         &apos;(Ljava/lang/Object;)Z&apos;
 - max stack:         3
 - max locals:        8
 - size of params:    2
 - method size:       15
 - vtable index:      1
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f500
 - compiled entry     0x000000000276e475
 - code size:         88
 - code start:        0x000000077ae0fee0
 - code end (excl):   0x000000077ae0ff38
 - method data:       0x000000077b13a790
 - checked ex length: 0
 - linenumber start:  0x000000077ae0ff38
 - localvar length:   8
 - localvar start:    0x000000077ae0ff4e
#
#  bool ( java/lang/String:NotNull:exact *, java/lang/Object * )
#
#r016 rdx:rdx   : parm 0: java/lang/String:NotNull:exact *
#r004 r8:r8   : parm 1: java/lang/Object *
# -- Old rsp -- Framesize: 48 --
#r089 rsp+44: pad2, in_preserve
#r088 rsp+40: pad2, in_preserve
#r087 rsp+36: pad2, in_preserve
#r086 rsp+32: pad2, in_preserve
#r085 rsp+28: pad2, in_preserve
#r084 rsp+24: return address
#r083 rsp+20: Fixed slot 1
#r082 rsp+16: Fixed slot 0
#r093 rsp+12: spill
#r092 rsp+ 8: spill
#r091 rsp+ 4: spill
#r090 rsp+ 0: spill
#
000   N283: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	movl    rscratch1, [j_rarg0 + oopDesc::klass_offset_in_bytes() #8]	
leaq    rscratch1, [r12_heapbase, r, Address::times_8, 0]
cmpq    rax, rscratch1	 # Inline cache check
	jne     SharedRuntime::_ic_miss_stub
	nop
	nop

      	nop 	# 12 bytes pad for loops and calls

020   B1: #	B3 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
020   	# stack bang
	pushq   rbp
	subq    rsp, #32	# Create frame
02c   	cmpq    RDX, R8	# ptr
02f   	jne,us  B3  P=0.740696 C=833.000000
02f
031   B2: #	B25 &lt;- B1  Freq: 0.259304
031   	movl    RAX, #1	# int
036   	jmp     B25
036
03b   B3: #	B25 B4 &lt;- B1  Freq: 0.740696
03b   	xorl    RAX, RAX	# int
03d   	testq   R8, R8	# ptr
040   	je     B25  P=0.001000 C=-1.000000
040
046   B4: #	B25 B5 &lt;- B3  Freq: 0.739956
046   	movl    R10, [R8 + #8 (8-bit)]	# compressed klass ptr
04a   	cmpl    R10, narrowoop: precise klass java/lang/String: 0x00000000002c5688:Constant:exact *	# compressed ptr
051   	jne,u  B25  P=0.100000 C=-1.000000
051
057   B5: #	B25 B6 &lt;- B4  Freq: 0.66596
057   	# checkcastPP of R8
057   	movl    R9, [RDX + #20 (8-bit)]	# int ! Field java/lang/String.count
05b   	movl    R10, [R8 + #20 (8-bit)]	# int ! Field java/lang/String.count
05f   	cmpl    R9, R10
062   	jne     B25  P=0.499190 C=617.000000
062
068   B6: #	B24 B7 &lt;- B5  Freq: 0.33352
068   	testl   R9, R9
06b   	je     B24  P=0.049031 C=6241.000000
06b
071   B7: #	B26 B8 &lt;- B6  Freq: 0.317167
071   	movl    RDI, [R8 + #16 (8-bit)]	# int ! Field java/lang/String.offset
075   	movl    RBX, [R8 + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
079   	movl    R13, [RDX + #12 (8-bit)]	# compressed ptr ! Field java/lang/String.value
07d   	movl    RBP, [RDX + #16 (8-bit)]	# int ! Field java/lang/String.offset
081   	movl    RCX, R9	# spill
084   	decl    RCX	# int
086   	movl    R10, [R12 + R13 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
08b   	NullCheck R13
08b
08b   B8: #	B26 B9 &lt;- B7  Freq: 0.317167
08b   	movl    R8, #1	# int
091   	subl    R8, R9	# int
094   	movl    RDX, RBP	# spill
096   	subl    RDX, R8	# int
099   	cmpl    RDX, R10	# unsigned
09c   	jnb,u  B26  P=0.000001 C=-1.000000
09c
0a2   B9: #	B26 B10 &lt;- B8  Freq: 0.317166
0a2   	movl    R11, [R12 + RBX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
0a7   	NullCheck RBX
0a7
0a7   B10: #	B26 B11 &lt;- B9  Freq: 0.317166
0a7   	movl    RSI, RDI	# spill
0a9   	subl    RSI, R8	# int
0ac   	cmpl    RSI, R11	# unsigned
0af   	jnb,u  B26  P=0.000001 C=-1.000000
0af
0b5   B11: #	B12 &lt;- B10  Freq: 0.317166
0b5   	decode_heap_oop_not_null R8,RBX
0b9   	addl    R9, #-2	# int
0bd   	decode_heap_oop_not_null RBX,R13
0bd
0c1   B12: #	B25 B13 &lt;- B11 B14 	Loop: B12-B14 inner stride: not constant pre of N281 Freq: 0.634118
0c1   	movl    R11, RSI	# spill
0c4   	subl    R11, RCX	# int
0c7   	movzwl  R11, [R8 + #16 + R11 &lt;&lt; #1]	# ushort/char
0cd   	movl    R10, RDX	# spill
0d0   	subl    R10, RCX	# int
0d3   	movzwl  R10, [RBX + #16 + R10 &lt;&lt; #1]	# ushort/char
0d9   	cmpl    R10, R11
0dc   	jne     B25  P=0.000337 C=5934.000000
0dc
0e2   B13: #	B15 B14 &lt;- B12  Freq: 0.633904
0e2   	movl    RDI, RCX	# spill
0e4   	decl    RDI	# int
0e6   	cmpl    RDI, R9
0e9   	jle,s   B15	# loop end  P=0.500000 C=6241.000000
0e9
0eb   B14: #	B12 &lt;- B13  Freq: 0.316952
0eb   	movl    RCX, RDI	# spill
0ed   	jmp,s   B12
0ed
0ef   B15: #	B21 B16 &lt;- B13  Freq: 0.316952
0ef   	andl    RCX, #-2	# int
0f2   	movl    R11, RCX	# spill
0f5   	negl    R11	# int
0f8   	sarl    R11, #31
0fc   	shrl    R11, #31
100   	subl    R11, RCX	# int
103   	sarl    R11, #1
106   	negl    R11	# int
109   	andl    R11, #-2	# int
10d   	sall    R11, #1
110   	movl    RBP, RDI	# spill
112   	subl    RBP, R11	# int
115   	cmpl    RDI, RBP
117   	jle     B21  P=0.000001 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

120   B16: #	B25 B17 &lt;- B15 B20 	Loop: B16-B20 inner stride: not constant main of N124 Freq: 6.29971
120   	movl    R10, RSI	# spill
123   	subl    R10, RDI	# int
126   	movzwl  R11, [R8 + #16 + R10 &lt;&lt; #1]	# ushort/char
12c   	movl    R9, RDX	# spill
12f   	subl    R9, RDI	# int
132   	movzwl  RCX, [RBX + #16 + R9 &lt;&lt; #1]	# ushort/char
138   	cmpl    RCX, R11
13b   	jne     B25  P=0.000337 C=5934.000000
13b
141   B17: #	B25 B18 &lt;- B16  Freq: 6.29759
141   	movslq  R10, R10	# i2l
144   	movzwl  RCX, [R8 + #18 + R10 &lt;&lt; #1]	# ushort/char
14a   	movslq  R13, R9	# i2l
14d   	movzwl  R11, [RBX + #18 + R13 &lt;&lt; #1]	# ushort/char
153   	cmpl    R11, RCX
156   	jne,s   B25  P=0.000337 C=5934.000000
156
158   B18: #	B25 B19 &lt;- B17  Freq: 6.29546
158   	movzwl  R9, [R8 + #20 + R10 &lt;&lt; #1]	# ushort/char
15e   	movzwl  R11, [RBX + #20 + R13 &lt;&lt; #1]	# ushort/char
164   	cmpl    R11, R9
167   	jne,s   B25  P=0.000337 C=5934.000000
167
169   B19: #	B25 B20 &lt;- B18  Freq: 6.29334
169   	movzwl  R11, [R8 + #22 + R10 &lt;&lt; #1]	# ushort/char
16f   	movzwl  R10, [RBX + #22 + R13 &lt;&lt; #1]	# ushort/char
175   	cmpl    R10, R11
178   	jne,s   B25  P=0.000337 C=5934.000000
178
17a   B20: #	B16 B21 &lt;- B19  Freq: 6.29122
17a   	addl    RDI, #-4	# int
17d   	cmpl    RDI, RBP
17f   	jg,s   B16	# loop end  P=0.950969 C=6241.000000
17f
181   B21: #	B24 B22 &lt;- B15 B20  Freq: 0.308463
181   	cmpl    RDI, #-1
184   	je,s   B24  P=0.500000 C=-1.000000
      	nop 	# 2 bytes pad for loops and calls

188   B22: #	B25 B23 &lt;- B21 B23 	Loop: B22-B23 inner stride: not constant post of N281 Freq: 0.308359
188   	movl    R11, RSI	# spill
18b   	subl    R11, RDI	# int
18e   	movzwl  R11, [R8 + #16 + R11 &lt;&lt; #1]	# ushort/char
194   	movl    R10, RDX	# spill
197   	subl    R10, RDI	# int
19a   	movzwl  R10, [RBX + #16 + R10 &lt;&lt; #1]	# ushort/char
1a0   	cmpl    R10, R11
1a3   	jne,s   B25  P=0.000337 C=5934.000000
1a3
1a5   B23: #	B22 B24 &lt;- B22  Freq: 0.308255
1a5   	decl    RDI	# int
1a7   	cmpl    RDI, #-1
1aa   	jne,s   B22	# loop end  P=0.500000 C=6241.000000
1aa
1ac   B24: #	B25 &lt;- B21 B6 B23  Freq: 0.324711
1ac   	movl    RAX, #1	# int
1ac
1b1   B25: #	N283 &lt;- B2 B22 B18 B12 B16 B17 B19 B24 B5 B3 B4  Freq: 0.999999
1b1   	addq	rsp, 32	# Destroy frame
	popq	rbp
	testl	rax, [rip + #offset_to_poll_page]	# Safepoint: poll for GC
	
1bc   	ret
1bc
1bd   B26: #	N283 &lt;- B10 B7 B8 B9  Freq: 1.28551e-006
1bd   	movl    RDX, #-122	# int
1c2   	movl    [rsp + #0], RCX	# spill
1c5   	movl    [rsp + #4], R13	# spill
1ca   	movl    [rsp + #8], RBX	# spill
1ce   	movl    [rsp + #12], RDI	# spill
1d2   	nop 	# 1 bytes pad for loops and calls
1d3   	call,static  wrapper for: uncommon_trap(reason=&apos;predicate&apos; action=&apos;maybe_recompile&apos;)
        # java.lang.String::equals @ bci:63  L[0]=_ L[1]=_ L[2]=_ L[3]=rsp + #0 L[4]=rsp + #4 L[5]=rsp + #8 L[6]=RBP L[7]=rsp + #12
        # OopMap{[4]=NarrowOop [8]=NarrowOop off=472}
1d8   	INT3   ; ShouldNotReachHere
1d8

</opto_assembly>
<opto_assembly compile_id='1' compile_kind='osr'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - constants:         0x00000000088cffa0constant pool [67] for &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - access:            0xc1000001  public 
 - name:              &apos;timeBoolean&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    2
 - method size:       15
 - vtable index:      18
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         100
 - code start:        0x000000077b0a4ab8
 - code end (excl):   0x000000077b0a4b1c
 - method data:       0x000000077b2c6f78
 - checked ex length: 0
 - linenumber start:  0x000000077b0a4b1c
 - localvar length:   8
 - localvar start:    0x000000077b0a4b36
#
#  int ( rawptr:BotPTR )
#
#r016 rdx:rdx   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r089 rsp+108: pad2, in_preserve
#r088 rsp+104: pad2, in_preserve
#r087 rsp+100: pad2, in_preserve
#r086 rsp+96: pad2, in_preserve
#r085 rsp+92: pad2, in_preserve
#r084 rsp+88: return address
#r083 rsp+84: Fixed slot 1
#r082 rsp+80: Fixed slot 0
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: outgoing argument
#r096 rsp+24: outgoing argument
#r095 rsp+20: outgoing argument
#r094 rsp+16: outgoing argument
#r093 rsp+12: outgoing argument
#r092 rsp+ 8: outgoing argument
#r091 rsp+ 4: outgoing argument
#r090 rsp+ 0: outgoing argument
#
000   N542: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	nop 	# 15 bytes pad for loops and calls

010   B1: #	B43 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp
	subq    rsp, #96	# Create frame
01c   	movl    R10, [RDX]	# int
01f   	movl    [rsp + #40], R10	# spill
024   	movq    R10, [RDX + #40 (8-bit)]	# ptr
028   	movq    [rsp + #32], R10	# spill
02d   	movl    R11, [RDX + #32 (8-bit)]	# int
031   	movl    [rsp + #44], R11	# spill
036   	movl    R13, [RDX + #8 (8-bit)]	# int
03a   	movl    R10, [RDX + #16 (8-bit)]	# int
03e   	movl    [rsp + #48], R10	# spill
043   	movl    R11, [RDX + #24 (8-bit)]	# int
047   	movl    [rsp + #52], R11	# spill
04c   	movq    RCX, RDX	# spill
04f   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
05c   	movq    R10, [rsp + #32]	# spill
061   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
065   	NullCheck R10
065
065   B2: #	B42 B3 &lt;- B1  Freq: 0.999999
065   	cmpl    R11, narrowoop: precise klass com/carrotsearch/hppc/caliper/BenchmarkBooleanByte: 0x0000000007d56018:Constant:exact *	# compressed ptr
06c   	jne,u  B42  P=0.000001 C=-1.000000
06c
072   B3: #	B44 B4 &lt;- B2  Freq: 0.999998
072   	movq    R8, R10	# spill
075   	# checkcastPP of R8
075   	movl    R9, [R8 + #28 (8-bit)]	# compressed ptr ! Field com/carrotsearch/hppc/caliper/BenchmarkBooleanByte.booleanArray
079   	movl    R11, [rsp + #52]	# spill
07e   	decl    R11	# int
081   	addl    R13, #30727	# int
088   	andl    R13, R11	# int
08b   	movl    RBP, R13	# spill
08e   	incl    RBP	# int
090   	movl    RBX, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
095   	NullCheck R9
095
095   B4: #	B40 B5 &lt;- B3  Freq: 0.999997
095   	cmpl    RBP, RBX	# unsigned
097   	jnb,u  B40  P=0.000001 C=-1.000000
097
09d   B5: #	B41 B6 &lt;- B4  Freq: 0.999996
09d   	decode_heap_oop_not_null RDX,R9
0a1   	movslq  R10, R13	# i2l
0a4   	movsbl  RBP, [RDX + #17 + R10]	# byte
0aa   	cmpl    R13, RBX	# unsigned
0ad   	jnb,u  B41  P=0.000001 C=-1.000000
0ad
0b3   B6: #	B25 B7 &lt;- B5  Freq: 0.999995
0b3   	movl    [rsp + #64], R9	# spill
0b8   	movq    [rsp + #56], R8	# spill
0bd   	movl    R9, [rsp + #40]	# spill
0c2   	incl    R9	# int
0c5   	movl    RDI, [rsp + #52]	# spill
0c9   	sall    RDI, #1
0cb   	movslq  R10, R13	# i2l
0ce   	movb    [RDX + #16 + R10], RBP	# byte
0d3   	cmpl    R9, RDI
0d6   	jge     B25  P=0.000000 C=12251.000000
0d6
0dc   B7: #	B8 &lt;- B6  Freq: 0.999994
0dc   	movl    R10, [rsp + #40]	# spill
0e1   	addl    R10, #2	# int
0e5
0e5   B8: #	B32 B9 &lt;- B7 B10 	Loop: B8-B10 inner stride: not constant pre of N397 Freq: 1.99998
0e5   	addl    R13, #30727	# int
0ec   	andl    R13, R11	# int
0ef   	movl    R8, R13	# spill
0f2   	incl    R8	# int
0f5   	cmpl    R8, RBX	# unsigned
0f8   	jnb,u  B32  P=0.000001 C=-1.000000
0f8
0fe   B9: #	B39 B10 &lt;- B8  Freq: 1.99998
0fe   	movslq  R8, R13	# i2l
101   	movsbl  R8, [RDX + #17 + R8]	# byte
107   	cmpl    R13, RBX	# unsigned
10a   	jnb,u  B39  P=0.000001 C=-1.000000
10a
110   B10: #	B8 B11 &lt;- B9  Freq: 1.99998
110   	movslq  RCX, R13	# i2l
113   	movb    [RDX + #16 + RCX], R8	# byte
118   	incl    R9	# int
11b   	cmpl    R9, R10
11e   	jl,s   B8	# loop end  P=0.500000 C=12251.000000
11e
120   B11: #	B21 B12 &lt;- B10  Freq: 0.99999
120   	movl    R10, RDI	# spill
123   	subl    R10, R9	# int
126   	andl    R10, #-4	# int
12a   	addl    R10, R9	# int
12d   	cmpl    R9, R10
130   	jge     B21  P=0.000001 C=-1.000000
      	nop 	# 10 bytes pad for loops and calls

140   B12: #	B26 B13 &lt;- B11 B20 	Loop: B12-B20 inner stride: not constant main of N165 Freq: 116508
140   	addl    R13, #30727	# int
147   	andl    R13, R11	# int
14a   	movl    R8, R13	# spill
14d   	incl    R8	# int
150   	cmpl    R8, RBX	# unsigned
153   	jnb,u  B26  P=0.000001 C=-1.000000
153
159   B13: #	B33 B14 &lt;- B12  Freq: 116508
159   	movslq  R8, R13	# i2l
15c   	movsbl  R8, [RDX + #17 + R8]	# byte
162   	cmpl    R13, RBX	# unsigned
165   	jnb,u  B33  P=0.000001 C=-1.000000
165
16b   B14: #	B29 B15 &lt;- B13  Freq: 116507
16b   	movl    RCX, R13	# spill
16e   	addl    RCX, #30727	# int
174   	andl    RCX, R11	# int
177   	movslq  RSI, R13	# i2l
17a   	movb    [RDX + #16 + RSI], R8	# byte
17f   	movl    R8, RCX	# spill
182   	incl    R8	# int
185   	cmpl    R8, RBX	# unsigned
188   	jnb,u  B29  P=0.000001 C=-1.000000
188
18e   B15: #	B36 B16 &lt;- B14  Freq: 116507
18e   	movslq  R8, RCX	# i2l
191   	movsbl  R8, [RDX + #17 + R8]	# byte
197   	cmpl    RCX, RBX	# unsigned
199   	jnb,u  B36  P=0.000001 C=-1.000000
199
19f   B16: #	B27 B17 &lt;- B15  Freq: 116507
19f   	movl    RSI, RCX	# spill
1a1   	addl    RSI, #30727	# int
1a7   	andl    RSI, R11	# int
1aa   	movslq  RCX, RCX	# i2l
1ad   	movb    [RDX + #16 + RCX], R8	# byte
1b2   	movl    R8, RSI	# spill
1b5   	incl    R8	# int
1b8   	cmpl    R8, RBX	# unsigned
1bb   	jnb,u  B27  P=0.000001 C=-1.000000
1bb
1c1   B17: #	B34 B18 &lt;- B16  Freq: 116507
1c1   	movslq  R8, RSI	# i2l
1c4   	movsbl  R8, [RDX + #17 + R8]	# byte
1ca   	cmpl    RSI, RBX	# unsigned
1cc   	jnb,u  B34  P=0.000001 C=-1.000000
1cc
1d2   B18: #	B30 B19 &lt;- B17  Freq: 116507
1d2   	movl    R13, RSI	# spill
1d5   	addl    R13, #30727	# int
1dc   	andl    R13, R11	# int
1df   	movslq  RCX, RSI	# i2l
1e2   	movb    [RDX + #16 + RCX], R8	# byte
1e7   	movl    R8, R13	# spill
1ea   	incl    R8	# int
1ed   	cmpl    R8, RBX	# unsigned
1f0   	jnb,u  B30  P=0.000001 C=-1.000000
1f0
1f6   B19: #	B37 B20 &lt;- B18  Freq: 116507
1f6   	movslq  R8, R13	# i2l
1f9   	movsbl  R8, [RDX + #17 + R8]	# byte
1ff   	cmpl    R13, RBX	# unsigned
202   	jnb,u  B37  P=0.000001 C=-1.000000
202
208   B20: #	B12 B21 &lt;- B19  Freq: 116507
208   	movslq  RCX, R13	# i2l
20b   	movb    [RDX + #16 + RCX], R8	# byte
210   	addl    R9, #4	# int
214   	cmpl    R9, R10
217   	jl     B12	# loop end  P=1.000000 C=12251.000000
217
21d   B21: #	B25 B22 &lt;- B11 B20  Freq: 0.0555557
21d   	cmpl    R9, RDI
220   	jge,s   B25  P=0.000001 C=-1.000000
      	nop 	# 2 bytes pad for loops and calls

224   B22: #	B32 B23 &lt;- B21 B24 	Loop: B22-B24 inner stride: not constant post of N397 Freq: 18275.9
224   	addl    R13, #30727	# int
22b   	andl    R13, R11	# int
22e   	movl    R8, R13	# spill
231   	incl    R8	# int
234   	cmpl    R8, RBX	# unsigned
237   	jnb,us  B32  P=0.000001 C=-1.000000
237
239   B23: #	B39 B24 &lt;- B22  Freq: 18275.9
239   	movslq  R10, R13	# i2l
23c   	movsbl  R8, [RDX + #17 + R10]	# byte
242   	cmpl    R13, RBX	# unsigned
245   	jnb,u  B39  P=0.000001 C=-1.000000
245
24b   B24: #	B22 B25 &lt;- B23  Freq: 18275.9
24b   	movslq  R10, R13	# i2l
24e   	movb    [RDX + #16 + R10], R8	# byte
253   	incl    R9	# int
256   	cmpl    R9, RDI
259   	jl,s   B22	# loop end  P=0.999999 C=12251.000000
259
25b   B25: #	N542 &lt;- B6 B24 B21  Freq: 0.0185191
25b   	movl    R11, [rsp + #48]	# spill
260   	incl    R11	# int
263   	movl    RDX, #-83	# int
268   	movl    RBP, R13	# spill
26b   	movl    [rsp + #36], R11	# spill
270   	nop 	# 3 bytes pad for loops and calls
273   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:63  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #36 L[4]=RBP L[5]=_ STK[0]=rsp + #36 STK[1]=rsp + #44
        # OopMap{[56]=Oop off=632}
278   	INT3   ; ShouldNotReachHere
278
279   B26: #	B28 &lt;- B12  Freq: 0.118055
279   	movl    RSI, R13	# spill
27c   	jmp,s   B28
27c
27e   B27: #	B28 &lt;- B16  Freq: 0.118054
27e   	addl    R9, #2	# int
282
282   B28: #	B32 &lt;- B26 B27  Freq: 0.236109
282   	movl    R13, RSI	# spill
285   	jmp,s   B32
285
287   B29: #	B31 &lt;- B14  Freq: 0.118055
287   	movl    R13, RCX	# spill
28a   	jmp,s   B31
28a
28c   B30: #	B31 &lt;- B18  Freq: 0.118054
28c   	addl    R9, #2	# int
290
290   B31: #	B32 &lt;- B29 B30  Freq: 0.236109
290   	incl    R9	# int
293
293   B32: #	N542 &lt;- B22 B8 B28 B31  Freq: 0.490738
293   	movl    RDX, #-28	# int
298   	movl    [rsp + #32], R9	# spill
29d   	movl    [rsp + #36], R13	# spill
2a2   	movl    [rsp + #40], R8	# spill
2a7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=rsp + #36 L[5]=rsp + #32 STK[0]=rsp + #64 STK[1]=rsp + #36 STK[2]=rsp + #64 STK[3]=rsp + #40
        # OopMap{[56]=Oop [64]=NarrowOop off=684}
2ac   	INT3   ; ShouldNotReachHere
2ac
2ad   B33: #	B35 &lt;- B13  Freq: 0.118055
2ad   	movl    RSI, R13	# spill
2b0   	jmp,s   B35
2b0
2b2   B34: #	B35 &lt;- B17  Freq: 0.118054
2b2   	addl    R9, #2	# int
2b6
2b6   B35: #	B39 &lt;- B33 B34  Freq: 0.236109
2b6   	movl    R13, RSI	# spill
2b9   	jmp,s   B39
2b9
2bb   B36: #	B38 &lt;- B15  Freq: 0.118054
2bb   	movl    R13, RCX	# spill
2be   	jmp,s   B38
2be
2c0   B37: #	B38 &lt;- B19  Freq: 0.118054
2c0   	addl    R9, #2	# int
2c4
2c4   B38: #	B39 &lt;- B36 B37  Freq: 0.236108
2c4   	incl    R9	# int
2c7
2c7   B39: #	N542 &lt;- B23 B9 B35 B38  Freq: 0.490738
2c7   	movl    RDX, #-28	# int
2cc   	movl    [rsp + #32], R9	# spill
2d1   	movl    [rsp + #36], R13	# spill
2d6   	movl    [rsp + #40], R8	# spill
2db   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:46  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=rsp + #36 L[5]=rsp + #32 STK[0]=rsp + #64 STK[1]=rsp + #36 STK[2]=rsp + #40
        # OopMap{[56]=Oop [64]=NarrowOop off=736}
2e0   	INT3   ; ShouldNotReachHere
2e0
2e1   B40: #	N542 &lt;- B4  Freq: 1.01328e-006
2e1   	movl    RDX, #-28	# int
2e6   	movl    [rsp + #36], R13	# spill
2eb   	movq    [rsp + #56], R8	# spill
2f0   	movl    [rsp + #68], R9	# spill
2f5   	nop 	# 2 bytes pad for loops and calls
2f7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=rsp + #36 L[5]=rsp + #40 STK[0]=rsp + #68 STK[1]=rsp + #36 STK[2]=rsp + #68 STK[3]=RBP
        # OopMap{[56]=Oop [68]=NarrowOop off=764}
2fc   	INT3   ; ShouldNotReachHere
2fc
2fd   B41: #	N542 &lt;- B5  Freq: 1.01327e-006
2fd   	movl    RDX, #-28	# int
302   	movl    [rsp + #36], R13	# spill
307   	movq    [rsp + #56], R8	# spill
30c   	movl    [rsp + #64], R9	# spill
311   	nop 	# 2 bytes pad for loops and calls
313   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:46  L[0]=rsp + #56 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=rsp + #36 L[5]=rsp + #40 STK[0]=rsp + #64 STK[1]=rsp + #36 STK[2]=RBP
        # OopMap{[56]=Oop [64]=NarrowOop off=792}
318   	INT3   ; ShouldNotReachHere
318
319   B42: #	N542 &lt;- B2  Freq: 9.99999e-007
319   	movl    RDX, #-83	# int
31e   	movl    RBP, R13	# spill
321   	nop 	# 2 bytes pad for loops and calls
323   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:19  L[0]=rsp + #32 L[1]=rsp + #44 L[2]=rsp + #52 L[3]=rsp + #48 L[4]=RBP L[5]=rsp + #40
        # OopMap{[32]=Oop off=808}
328   	INT3   ; ShouldNotReachHere
328
329   B43: #	N542 &lt;- B1  Freq: 1.01328e-006
329   	movl    RDX, #-10	# int
32e   	nop 	# 1 bytes pad for loops and calls
32f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=820}
334   	INT3   ; ShouldNotReachHere
334
335   B44: #	N542 &lt;- B3  Freq: 1.01328e-006
335   	movl    RDX, #-10	# int
33a   	nop 	# 1 bytes pad for loops and calls
33b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=832}
340   	INT3   ; ShouldNotReachHere
340

</opto_assembly>
<opto_assembly compile_id='2' compile_kind='osr'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - constants:         0x00000000088cffa0constant pool [67] for &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - access:            0xc1000001  public 
 - name:              &apos;timeBoolean&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    2
 - method size:       15
 - vtable index:      18
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         100
 - code start:        0x000000077b0a4ab8
 - code end (excl):   0x000000077b0a4b1c
 - method data:       0x000000077b2c6f78
 - checked ex length: 0
 - linenumber start:  0x000000077b0a4b1c
 - localvar length:   8
 - localvar start:    0x000000077b0a4b36
#
#  int ( rawptr:BotPTR )
#
#r016 rdx:rdx   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r089 rsp+108: pad2, in_preserve
#r088 rsp+104: pad2, in_preserve
#r087 rsp+100: pad2, in_preserve
#r086 rsp+96: pad2, in_preserve
#r085 rsp+92: pad2, in_preserve
#r084 rsp+88: return address
#r083 rsp+84: Fixed slot 1
#r082 rsp+80: Fixed slot 0
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: outgoing argument
#r096 rsp+24: outgoing argument
#r095 rsp+20: outgoing argument
#r094 rsp+16: outgoing argument
#r093 rsp+12: outgoing argument
#r092 rsp+ 8: outgoing argument
#r091 rsp+ 4: outgoing argument
#r090 rsp+ 0: outgoing argument
#
000   N574: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	nop 	# 15 bytes pad for loops and calls

010   B1: #	B51 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp
	subq    rsp, #96	# Create frame
01c   	movl    R13, [RDX]	# int
01f   	movq    R10, [RDX + #40 (8-bit)]	# ptr
023   	movq    [rsp + #40], R10	# spill
028   	movl    R11, [RDX + #32 (8-bit)]	# int
02c   	movl    [rsp + #48], R11	# spill
031   	movl    RBX, [RDX + #8 (8-bit)]	# int
034   	movl    R14, [RDX + #16 (8-bit)]	# int
038   	movl    R10, [RDX + #24 (8-bit)]	# int
03c   	movl    [rsp + #52], R10	# spill
041   	movq    RCX, RDX	# spill
044   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
051   	movq    R10, [rsp + #40]	# spill
056   	movl    R10, [R10 + #8 (8-bit)]	# compressed klass ptr
05a   	NullCheck R10
05a
05a   B2: #	B47 B3 &lt;- B1  Freq: 0.999999
05a   	cmpl    R10, narrowoop: precise klass com/carrotsearch/hppc/caliper/BenchmarkBooleanByte: 0x0000000007e623c8:Constant:exact *	# compressed ptr
061   	jne,u  B47  P=0.000001 C=-1.000000
061
067   B3: #	B52 B4 &lt;- B2  Freq: 0.999998
067   	movq    R8, [rsp + #40]	# spill
06c   	# checkcastPP of R8
06c   	movl    R9, [R8 + #28 (8-bit)]	# compressed ptr ! Field com/carrotsearch/hppc/caliper/BenchmarkBooleanByte.booleanArray
070   	movl    RDX, [rsp + #52]	# spill
074   	decl    RDX	# int
076   	addl    RBX, #30727	# int
07c   	andl    RBX, RDX	# int
07e   	movl    RBP, RBX	# spill
080   	incl    RBP	# int
082   	movl    RDI, [R12 + R9 &lt;&lt; 3 + #12] (compressed oop addressing)	# range
087   	NullCheck R9
087
087   B4: #	B45 B5 &lt;- B3  Freq: 0.999997
087   	cmpl    RBP, RDI	# unsigned
089   	jnb,u  B45  P=0.000001 C=-1.000000
089
08f   B5: #	B46 B6 &lt;- B4  Freq: 0.999996
08f   	decode_heap_oop_not_null RSI,R9
093   	movslq  R10, RBX	# i2l
096   	movsbl  RBP, [RSI + #17 + R10]	# byte
09c   	cmpl    RBX, RDI	# unsigned
09e   	jnb,u  B46  P=0.000001 C=-1.000000
09e
0a4   B6: #	B7 &lt;- B5  Freq: 0.999995
0a4   	incl    R13	# int
0a7   	movl    RAX, [rsp + #52]	# spill
0ab   	sall    RAX, #1
0ad   	movslq  R10, RBX	# i2l
0b0   	movb    [RSI + #16 + R10], RBP	# byte
0b0
0b5   B7: #	B27 B8 &lt;- B6 B28 	Loop: B7-B28 stride: not constant  Freq: 1.05882
0b5   	cmpl    R13, RAX
0b8   	jge     B27  P=0.000000 C=141839.000000
0b8
0be   B8: #	B9 &lt;- B7  Freq: 1.05882
0be   	movl    R10, R13	# spill
0c1   	incl    R10	# int
0c4
0c4   B9: #	B36 B10 &lt;- B8 B11 	Loop: B9-B11 inner stride: not constant pre of N425 Freq: 2.11763
0c4   	addl    RBX, #30727	# int
0ca   	andl    RBX, RDX	# int
0cc   	movl    R11, RBX	# spill
0cf   	incl    R11	# int
0d2   	cmpl    R11, RDI	# unsigned
0d5   	jnb,u  B36  P=0.000001 C=-1.000000
0d5
0db   B10: #	B44 B11 &lt;- B9  Freq: 2.11763
0db   	movslq  R11, RBX	# i2l
0de   	movsbl  RCX, [RSI + #17 + R11]	# byte
0e4   	cmpl    RBX, RDI	# unsigned
0e6   	jnb,u  B44  P=0.000001 C=-1.000000
0e6
0ec   B11: #	B9 B12 &lt;- B10  Freq: 2.11763
0ec   	movl    [rsp + #32], R9	# spill
0f1   	movq    RBP, R8	# spill
0f4   	movslq  R11, RBX	# i2l
0f7   	movb    [RSI + #16 + R11], RCX	# byte
0fc   	incl    R13	# int
0ff   	cmpl    R13, R10
102   	jl,s   B9	# loop end  P=0.500000 C=141839.000000
102
104   B12: #	B22 B13 &lt;- B11  Freq: 1.05881
104   	movl    R10, RAX	# spill
107   	subl    R10, R13	# int
10a   	andl    R10, #-4	# int
10e   	addl    R10, R13	# int
111   	cmpl    R13, R10
114   	jge     B22  P=0.000001 C=-1.000000
      	nop 	# 6 bytes pad for loops and calls

120   B13: #	B29 B14 &lt;- B12 B21 	Loop: B13-B21 inner stride: not constant main of N162 Freq: 123361
120   	addl    RBX, #30727	# int
126   	andl    RBX, RDX	# int
128   	movl    R11, RBX	# spill
12b   	incl    R11	# int
12e   	cmpl    R11, RDI	# unsigned
131   	jnb,u  B29  P=0.000001 C=-1.000000
131
137   B14: #	B37 B15 &lt;- B13  Freq: 123361
137   	movslq  R11, RBX	# i2l
13a   	movsbl  RCX, [RSI + #17 + R11]	# byte
140   	cmpl    RBX, RDI	# unsigned
142   	jnb,u  B37  P=0.000001 C=-1.000000
142
148   B15: #	B32 B16 &lt;- B14  Freq: 123361
148   	movl    R9, RBX	# spill
14b   	addl    R9, #30727	# int
152   	andl    R9, RDX	# int
155   	movslq  R11, RBX	# i2l
158   	movb    [RSI + #16 + R11], RCX	# byte
15d   	movl    R11, R9	# spill
160   	incl    R11	# int
163   	cmpl    R11, RDI	# unsigned
166   	jnb,u  B32  P=0.000001 C=-1.000000
166
16c   B16: #	B40 B17 &lt;- B15  Freq: 123361
16c   	movslq  R11, R9	# i2l
16f   	movsbl  RCX, [RSI + #17 + R11]	# byte
175   	cmpl    R9, RDI	# unsigned
178   	jnb,u  B40  P=0.000001 C=-1.000000
178
17e   B17: #	B30 B18 &lt;- B16  Freq: 123361
17e   	movl    R8, R9	# spill
181   	addl    R8, #30727	# int
188   	andl    R8, RDX	# int
18b   	movslq  R11, R9	# i2l
18e   	movb    [RSI + #16 + R11], RCX	# byte
193   	movl    R11, R8	# spill
196   	incl    R11	# int
199   	cmpl    R11, RDI	# unsigned
19c   	jnb,u  B30  P=0.000001 C=-1.000000
19c
1a2   B18: #	B38 B19 &lt;- B17  Freq: 123361
1a2   	movslq  R11, R8	# i2l
1a5   	movsbl  RCX, [RSI + #17 + R11]	# byte
1ab   	cmpl    R8, RDI	# unsigned
1ae   	jnb,u  B38  P=0.000001 C=-1.000000
1ae
1b4   B19: #	B33 B20 &lt;- B18  Freq: 123360
1b4   	movl    RBX, R8	# spill
1b7   	addl    RBX, #30727	# int
1bd   	andl    RBX, RDX	# int
1bf   	movslq  R11, R8	# i2l
1c2   	movb    [RSI + #16 + R11], RCX	# byte
1c7   	movl    R11, RBX	# spill
1ca   	incl    R11	# int
1cd   	cmpl    R11, RDI	# unsigned
1d0   	jnb,u  B33  P=0.000001 C=-1.000000
1d0
1d6   B20: #	B41 B21 &lt;- B19  Freq: 123360
1d6   	movslq  R11, RBX	# i2l
1d9   	movsbl  RCX, [RSI + #17 + R11]	# byte
1df   	cmpl    RBX, RDI	# unsigned
1e1   	jnb,u  B41  P=0.000001 C=-1.000000
1e1
1e7   B21: #	B13 B22 &lt;- B20  Freq: 123360
1e7   	movslq  R11, RBX	# i2l
1ea   	movb    [RSI + #16 + R11], RCX	# byte
1ef   	addl    R13, #4	# int
1f3   	cmpl    R13, R10
1f6   	jl     B13	# loop end  P=1.000000 C=141839.000000
1f6
1fc   B22: #	B26 B23 &lt;- B12 B21  Freq: 0.0588238
1fc   	cmpl    R13, RAX
1ff   	jge,s   B26  P=0.500000 C=-1.000000
      	nop 	# 3 bytes pad for loops and calls

204   B23: #	B49 B24 &lt;- B22 B25 	Loop: B23-B25 inner stride: not constant post of N425 Freq: 0.0588237
204   	addl    RBX, #30727	# int
20a   	andl    RBX, RDX	# int
20c   	movl    R11, RBX	# spill
20f   	incl    R11	# int
212   	cmpl    R11, RDI	# unsigned
215   	jnb,u  B49  P=0.000001 C=-1.000000
215
21b   B24: #	B50 B25 &lt;- B23  Freq: 0.0588236
21b   	movslq  R10, RBX	# i2l
21e   	movsbl  RCX, [RSI + #17 + R10]	# byte
224   	cmpl    RBX, RDI	# unsigned
226   	jnb,u  B50  P=0.000001 C=-1.000000
226
22c   B25: #	B23 B26 &lt;- B24  Freq: 0.0588235
22c   	movslq  R10, RBX	# i2l
22f   	movb    [RSI + #16 + R10], RCX	# byte
234   	incl    R13	# int
237   	cmpl    R13, RAX
23a   	jl,s   B23	# loop end  P=0.500000 C=141839.000000
23a
23c   B26: #	B27 &lt;- B25 B22  Freq: 0.0588237
23c   	movq    R8, RBP	# spill
23f   	movl    R9, [rsp + #32]	# spill
23f
244   B27: #	B48 B28 &lt;- B7 B26  Freq: 0.0588242
244   	incl    R14	# int
247   	cmpl    R14, [RSP + #48 (32-bit)]
24c   	jge     B48	# loop end  P=0.000001 C=-1.000000
24c
252   B28: #	B7 &lt;- B27  Freq: 0.0588241
252   	xorl    R13, R13	# int
255   	jmp     B7
255
25a   B29: #	B31 &lt;- B13  Freq: 0.124999
25a   	movl    R8, RBX	# spill
25d   	jmp,s   B31
25d
25f   B30: #	B31 &lt;- B17  Freq: 0.124999
25f   	addl    R13, #2	# int
263
263   B31: #	B35 &lt;- B29 B30  Freq: 0.249998
263   	movl    RBX, R8	# spill
266   	jmp,s   B35
266
268   B32: #	B34 &lt;- B15  Freq: 0.124999
268   	movl    RBX, R9	# spill
26b   	jmp,s   B34
26b
26d   B33: #	B34 &lt;- B19  Freq: 0.124998
26d   	addl    R13, #2	# int
271
271   B34: #	B35 &lt;- B32 B33  Freq: 0.249997
271   	incl    R13	# int
274
274   B35: #	B36 &lt;- B31 B34  Freq: 0.499995
274   	movq    R8, RBP	# spill
277   	movl    R9, [rsp + #32]	# spill
277
27c   B36: #	N574 &lt;- B49 B9 B35  Freq: 0.499998
27c   	movl    RDX, #-28	# int
281   	movl    RBP, R14	# spill
284   	movl    [rsp + #36], R13	# spill
289   	movl    [rsp + #40], RBX	# spill
28d   	movl    [rsp + #44], R11	# spill
292   	movq    [rsp + #56], R8	# spill
297   	movl    [rsp + #68], R9	# spill
29c   	nop 	# 3 bytes pad for loops and calls
29f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=rsp + #56 L[1]=rsp + #48 L[2]=rsp + #52 L[3]=RBP L[4]=rsp + #40 L[5]=rsp + #36 STK[0]=rsp + #68 STK[1]=rsp + #40 STK[2]=rsp + #68 STK[3]=rsp + #44
        # OopMap{[56]=Oop [68]=NarrowOop off=676}
2a4   	INT3   ; ShouldNotReachHere
2a4
2a5   B37: #	B39 &lt;- B14  Freq: 0.124999
2a5   	movl    R8, RBX	# spill
2a8   	jmp,s   B39
2a8
2aa   B38: #	B39 &lt;- B18  Freq: 0.124999
2aa   	addl    R13, #2	# int
2ae
2ae   B39: #	B43 &lt;- B37 B38  Freq: 0.249998
2ae   	movl    RBX, R8	# spill
2b1   	jmp,s   B43
2b1
2b3   B40: #	B42 &lt;- B16  Freq: 0.124999
2b3   	movl    RBX, R9	# spill
2b6   	jmp,s   B42
2b6
2b8   B41: #	B42 &lt;- B20  Freq: 0.124998
2b8   	addl    R13, #2	# int
2bc
2bc   B42: #	B43 &lt;- B40 B41  Freq: 0.249997
2bc   	incl    R13	# int
2bf
2bf   B43: #	B44 &lt;- B39 B42  Freq: 0.499995
2bf   	movq    R8, RBP	# spill
2c2   	movl    R9, [rsp + #32]	# spill
2c2
2c7   B44: #	N574 &lt;- B50 B10 B43  Freq: 0.499997
2c7   	movl    RDX, #-28	# int
2cc   	movl    RBP, R14	# spill
2cf   	movl    [rsp + #36], R13	# spill
2d4   	movl    [rsp + #40], RBX	# spill
2d8   	movl    [rsp + #44], RCX	# spill
2dc   	movq    [rsp + #56], R8	# spill
2e1   	movl    [rsp + #64], R9	# spill
2e6   	nop 	# 1 bytes pad for loops and calls
2e7   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:46  L[0]=rsp + #56 L[1]=rsp + #48 L[2]=rsp + #52 L[3]=RBP L[4]=rsp + #40 L[5]=rsp + #36 STK[0]=rsp + #64 STK[1]=rsp + #40 STK[2]=rsp + #44
        # OopMap{[56]=Oop [64]=NarrowOop off=748}
2ec   	INT3   ; ShouldNotReachHere
2ec
2ed   B45: #	N574 &lt;- B4  Freq: 1.01328e-006
2ed   	movl    RDX, #-28	# int
2f2   	movl    [rsp + #32], R14	# spill
2f7   	movl    [rsp + #40], R13	# spill
2fc   	movl    [rsp + #44], RBX	# spill
300   	movq    [rsp + #56], R8	# spill
305   	movl    [rsp + #68], R9	# spill
30a   	nop 	# 1 bytes pad for loops and calls
30b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=rsp + #56 L[1]=rsp + #48 L[2]=rsp + #52 L[3]=rsp + #32 L[4]=rsp + #44 L[5]=rsp + #40 STK[0]=rsp + #68 STK[1]=rsp + #44 STK[2]=rsp + #68 STK[3]=RBP
        # OopMap{[56]=Oop [68]=NarrowOop off=784}
310   	INT3   ; ShouldNotReachHere
310
311   B46: #	N574 &lt;- B5  Freq: 1.01327e-006
311   	movl    RDX, #-28	# int
316   	movl    [rsp + #32], R14	# spill
31b   	movl    [rsp + #40], R13	# spill
320   	movl    [rsp + #44], RBX	# spill
324   	movq    [rsp + #56], R8	# spill
329   	movl    [rsp + #64], R9	# spill
32e   	nop 	# 1 bytes pad for loops and calls
32f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:46  L[0]=rsp + #56 L[1]=rsp + #48 L[2]=rsp + #52 L[3]=rsp + #32 L[4]=rsp + #44 L[5]=rsp + #40 STK[0]=rsp + #64 STK[1]=rsp + #44 STK[2]=RBP
        # OopMap{[56]=Oop [64]=NarrowOop off=820}
334   	INT3   ; ShouldNotReachHere
334
335   B47: #	N574 &lt;- B2  Freq: 9.99999e-007
335   	movl    RDX, #-83	# int
33a   	movl    RBP, R14	# spill
33d   	movl    [rsp + #32], RBX	# spill
341   	movl    [rsp + #36], R13	# spill
346   	nop 	# 1 bytes pad for loops and calls
347   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:19  L[0]=rsp + #40 L[1]=rsp + #48 L[2]=rsp + #52 L[3]=RBP L[4]=rsp + #32 L[5]=rsp + #36
        # OopMap{[40]=Oop off=844}
34c   	INT3   ; ShouldNotReachHere
34c
34d   B48: #	N574 &lt;- B27  Freq: 5.96053e-008
34d   	movl    RDX, #-83	# int
352   	movq    RBP, R8	# spill
355   	nop 	# 2 bytes pad for loops and calls
357   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:95  L[0]=RBP L[1]=_ L[2]=_ L[3]=#10 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=#10
        # OopMap{rbp=Oop off=860}
35c   	INT3   ; ShouldNotReachHere
35c
35d   B49: #	B36 &lt;- B23  Freq: 5.96048e-008
35d   	movq    R8, RBP	# spill
360   	movl    R9, [rsp + #32]	# spill
365   	jmp     B36
365
36a   B50: #	B44 &lt;- B24  Freq: 5.96047e-008
36a   	movq    R8, RBP	# spill
36d   	movl    R9, [rsp + #32]	# spill
372   	jmp     B44
372
377   B51: #	N574 &lt;- B1  Freq: 1.01328e-006
377   	movl    RDX, #-10	# int
37c   	nop 	# 3 bytes pad for loops and calls
37f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:32  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=900}
384   	INT3   ; ShouldNotReachHere
384
385   B52: #	N574 &lt;- B3  Freq: 1.01328e-006
385   	movl    RDX, #-10	# int
38a   	nop 	# 1 bytes pad for loops and calls
38b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeBoolean @ bci:45  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=912}
390   	INT3   ; ShouldNotReachHere
390

</opto_assembly>
<opto_assembly compile_id='3' compile_kind='osr'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - constants:         0x00000000088cffa0constant pool [67] for &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - access:            0xc1000001  public 
 - name:              &apos;timeByte&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    2
 - method size:       15
 - vtable index:      19
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         98
 - code start:        0x000000077b0a4c80
 - code end (excl):   0x000000077b0a4ce2
 - method data:       0x000000077b2c7f30
 - checked ex length: 0
 - linenumber start:  0x000000077b0a4ce2
 - localvar length:   8
 - localvar start:    0x000000077b0a4cfe
#
#  int ( rawptr:BotPTR )
#
#r016 rdx:rdx   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r089 rsp+108: pad2, in_preserve
#r088 rsp+104: pad2, in_preserve
#r087 rsp+100: pad2, in_preserve
#r086 rsp+96: pad2, in_preserve
#r085 rsp+92: pad2, in_preserve
#r084 rsp+88: return address
#r083 rsp+84: Fixed slot 1
#r082 rsp+80: Fixed slot 0
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: outgoing argument
#r096 rsp+24: outgoing argument
#r095 rsp+20: outgoing argument
#r094 rsp+16: outgoing argument
#r093 rsp+12: outgoing argument
#r092 rsp+ 8: outgoing argument
#r091 rsp+ 4: outgoing argument
#r090 rsp+ 0: outgoing argument
#
000   N537: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	nop 	# 15 bytes pad for loops and calls

010   B1: #	B43 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp
	subq    rsp, #96	# Create frame
01c   	movl    R11, [RDX]	# int
01f   	movl    [rsp + #44], R11	# spill
024   	movq    R10, [RDX + #40 (8-bit)]	# ptr
028   	movq    [rsp + #48], R10	# spill
02d   	movl    R10, [RDX + #32 (8-bit)]	# int
031   	movl    [rsp + #56], R10	# spill
036   	movl    RBX, [RDX + #8 (8-bit)]	# int
039   	movl    R11, [RDX + #16 (8-bit)]	# int
03d   	movl    [rsp + #60], R11	# spill
042   	movl    R14, [RDX + #24 (8-bit)]	# int
046   	movq    RCX, RDX	# spill
049   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
056   	movq    R10, [rsp + #48]	# spill
05b   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
05f   	NullCheck R10
05f
05f   B2: #	B42 B3 &lt;- B1  Freq: 0.999999
05f   	cmpl    R11, narrowoop: precise klass com/carrotsearch/hppc/caliper/BenchmarkBooleanByte: 0x0000000007c3c1d8:Constant:exact *	# compressed ptr
066   	jne,u  B42  P=0.000001 C=-1.000000
066
06c   B3: #	B44 B4 &lt;- B2  Freq: 0.999998
06c   	movq    R11, R10	# spill
06f   	# checkcastPP of R11
06f   	movl    RCX, [R11 + #24 (8-bit)]	# compressed ptr ! Field com/carrotsearch/hppc/caliper/BenchmarkBooleanByte.byteArray
073   	addl    RBX, #30727	# int
079   	andl    RBX, R14	# int
07c   	movl    RBP, RBX	# spill
07e   	incl    RBP	# int
080   	movl    RDI, [R12 + RCX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
085   	NullCheck RCX
085
085   B4: #	B40 B5 &lt;- B3  Freq: 0.999997
085   	cmpl    RBP, RDI	# unsigned
087   	jnb,u  B40  P=0.000001 C=-1.000000
087
08d   B5: #	B41 B6 &lt;- B4  Freq: 0.999996
08d   	decode_heap_oop_not_null RDX,RCX
091   	movslq  R10, RBX	# i2l
094   	movsbl  RBP, [RDX + #17 + R10]	# byte
09a   	cmpl    RBX, RDI	# unsigned
09c   	jnb,u  B41  P=0.000001 C=-1.000000
09c
0a2   B6: #	B25 B7 &lt;- B5  Freq: 0.999995
0a2   	movl    RSI, [rsp + #44]	# spill
0a6   	incl    RSI	# int
0a8   	movl    R13, R14	# spill
0ab   	sall    R13, #1
0ae   	movslq  R10, RBX	# i2l
0b1   	movb    [RDX + #16 + R10], RBP	# byte
0b6   	cmpl    RSI, R13
0b9   	jge     B25  P=0.000000 C=13088.000000
0b9
0bf   B7: #	B8 &lt;- B6  Freq: 0.999994
0bf   	movl    R8, [rsp + #44]	# spill
0c4   	addl    R8, #2	# int
0c8
0c8   B8: #	B32 B9 &lt;- B7 B10 	Loop: B8-B10 inner stride: not constant pre of N392 Freq: 1.99998
0c8   	addl    RBX, #30727	# int
0ce   	andl    RBX, R14	# int
0d1   	movl    R10, RBX	# spill
0d4   	incl    R10	# int
0d7   	cmpl    R10, RDI	# unsigned
0da   	jnb,u  B32  P=0.000001 C=-1.000000
0da
0e0   B9: #	B39 B10 &lt;- B8  Freq: 1.99998
0e0   	movslq  R10, RBX	# i2l
0e3   	movsbl  R10, [RDX + #17 + R10]	# byte
0e9   	cmpl    RBX, RDI	# unsigned
0eb   	jnb,u  B39  P=0.000001 C=-1.000000
0eb
0f1   B10: #	B8 B11 &lt;- B9  Freq: 1.99998
0f1   	movslq  R9, RBX	# i2l
0f4   	movb    [RDX + #16 + R9], R10	# byte
0f9   	incl    RSI	# int
0fb   	cmpl    RSI, R8
0fe   	jl,s   B8	# loop end  P=0.500000 C=13088.000000
0fe
100   B11: #	B21 B12 &lt;- B10  Freq: 0.99999
100   	movl    R8, R13	# spill
103   	subl    R8, RSI	# int
106   	andl    R8, #-4	# int
10a   	addl    R8, RSI	# int
10d   	cmpl    RSI, R8
110   	jge     B21  P=0.000001 C=-1.000000
      	nop 	# 10 bytes pad for loops and calls

120   B12: #	B26 B13 &lt;- B11 B20 	Loop: B12-B20 inner stride: not constant main of N163 Freq: 116508
120   	addl    RBX, #30727	# int
126   	andl    RBX, R14	# int
129   	movl    R10, RBX	# spill
12c   	incl    R10	# int
12f   	cmpl    R10, RDI	# unsigned
132   	jnb,u  B26  P=0.000001 C=-1.000000
132
138   B13: #	B33 B14 &lt;- B12  Freq: 116508
138   	movslq  R10, RBX	# i2l
13b   	movsbl  R10, [RDX + #17 + R10]	# byte
141   	cmpl    RBX, RDI	# unsigned
143   	jnb,u  B33  P=0.000001 C=-1.000000
143
149   B14: #	B29 B15 &lt;- B13  Freq: 116507
149   	movl    R9, RBX	# spill
14c   	addl    R9, #30727	# int
153   	andl    R9, R14	# int
156   	movslq  RBX, RBX	# i2l
159   	movb    [RDX + #16 + RBX], R10	# byte
15e   	movl    R10, R9	# spill
161   	incl    R10	# int
164   	cmpl    R10, RDI	# unsigned
167   	jnb,u  B29  P=0.000001 C=-1.000000
167
16d   B15: #	B36 B16 &lt;- B14  Freq: 116507
16d   	movslq  R10, R9	# i2l
170   	movsbl  R10, [RDX + #17 + R10]	# byte
176   	cmpl    R9, RDI	# unsigned
179   	jnb,u  B36  P=0.000001 C=-1.000000
179
17f   B16: #	B27 B17 &lt;- B15  Freq: 116507
17f   	movl    RBP, R9	# spill
182   	addl    RBP, #30727	# int
188   	andl    RBP, R14	# int
18b   	movslq  R9, R9	# i2l
18e   	movb    [RDX + #16 + R9], R10	# byte
193   	movl    R10, RBP	# spill
196   	incl    R10	# int
199   	cmpl    R10, RDI	# unsigned
19c   	jnb,u  B27  P=0.000001 C=-1.000000
19c
1a2   B17: #	B34 B18 &lt;- B16  Freq: 116507
1a2   	movslq  R10, RBP	# i2l
1a5   	movsbl  R10, [RDX + #17 + R10]	# byte
1ab   	cmpl    RBP, RDI	# unsigned
1ad   	jnb,u  B34  P=0.000001 C=-1.000000
1ad
1b3   B18: #	B30 B19 &lt;- B17  Freq: 116507
1b3   	movl    RBX, RBP	# spill
1b5   	addl    RBX, #30727	# int
1bb   	andl    RBX, R14	# int
1be   	movslq  R9, RBP	# i2l
1c1   	movb    [RDX + #16 + R9], R10	# byte
1c6   	movl    R10, RBX	# spill
1c9   	incl    R10	# int
1cc   	cmpl    R10, RDI	# unsigned
1cf   	jnb,u  B30  P=0.000001 C=-1.000000
1cf
1d5   B19: #	B37 B20 &lt;- B18  Freq: 116507
1d5   	movslq  R10, RBX	# i2l
1d8   	movsbl  R10, [RDX + #17 + R10]	# byte
1de   	cmpl    RBX, RDI	# unsigned
1e0   	jnb,u  B37  P=0.000001 C=-1.000000
1e0
1e6   B20: #	B12 B21 &lt;- B19  Freq: 116507
1e6   	movslq  R9, RBX	# i2l
1e9   	movb    [RDX + #16 + R9], R10	# byte
1ee   	addl    RSI, #4	# int
1f1   	cmpl    RSI, R8
1f4   	jl     B12	# loop end  P=1.000000 C=13088.000000
1f4
1fa   B21: #	B25 B22 &lt;- B11 B20  Freq: 0.0555557
1fa   	cmpl    RSI, R13
1fd   	jge,s   B25  P=0.000001 C=-1.000000
      	nop 	# 1 bytes pad for loops and calls

200   B22: #	B32 B23 &lt;- B21 B24 	Loop: B22-B24 inner stride: not constant post of N392 Freq: 18275.9
200   	addl    RBX, #30727	# int
206   	andl    RBX, R14	# int
209   	movl    R10, RBX	# spill
20c   	incl    R10	# int
20f   	cmpl    R10, RDI	# unsigned
212   	jnb,us  B32  P=0.000001 C=-1.000000
212
214   B23: #	B39 B24 &lt;- B22  Freq: 18275.9
214   	movslq  R10, RBX	# i2l
217   	movsbl  R10, [RDX + #17 + R10]	# byte
21d   	cmpl    RBX, RDI	# unsigned
21f   	jnb,u  B39  P=0.000001 C=-1.000000
21f
225   B24: #	B22 B25 &lt;- B23  Freq: 18275.9
225   	movslq  R8, RBX	# i2l
228   	movb    [RDX + #16 + R8], R10	# byte
22d   	incl    RSI	# int
22f   	cmpl    RSI, R13
232   	jl,s   B22	# loop end  P=0.999999 C=13088.000000
232
234   B25: #	N537 &lt;- B6 B24 B21  Freq: 0.0185191
234   	movl    R10, [rsp + #60]	# spill
239   	incl    R10	# int
23c   	movl    RDX, #-83	# int
241   	movl    RBP, R14	# spill
244   	movl    [rsp + #32], RBX	# spill
248   	movq    [rsp + #40], R11	# spill
24d   	movl    [rsp + #48], R10	# spill
252   	nop 	# 1 bytes pad for loops and calls
253   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:61  L[0]=rsp + #40 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #48 L[4]=rsp + #32 L[5]=_ STK[0]=rsp + #48 STK[1]=rsp + #56
        # OopMap{[40]=Oop off=600}
258   	INT3   ; ShouldNotReachHere
258
259   B26: #	B28 &lt;- B12  Freq: 0.118055
259   	movl    RBP, RBX	# spill
25b   	jmp,s   B28
25b
25d   B27: #	B28 &lt;- B16  Freq: 0.118054
25d   	addl    RSI, #2	# int
260
260   B28: #	B32 &lt;- B26 B27  Freq: 0.236109
260   	movl    RBX, RBP	# spill
262   	jmp,s   B32
262
264   B29: #	B31 &lt;- B14  Freq: 0.118055
264   	movl    RBX, R9	# spill
267   	jmp,s   B31
267
269   B30: #	B31 &lt;- B18  Freq: 0.118054
269   	addl    RSI, #2	# int
26c
26c   B31: #	B32 &lt;- B29 B30  Freq: 0.236109
26c   	incl    RSI	# int
26e
26e   B32: #	N537 &lt;- B22 B8 B28 B31  Freq: 0.490738
26e   	movl    RDX, #-28	# int
273   	movl    RBP, R14	# spill
276   	movl    [rsp + #36], RSI	# spill
27a   	movl    [rsp + #40], RBX	# spill
27e   	movl    [rsp + #44], R10	# spill
283   	movq    [rsp + #48], R11	# spill
288   	movl    [rsp + #68], RCX	# spill
28c   	nop 	# 3 bytes pad for loops and calls
28f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #60 L[4]=rsp + #40 L[5]=rsp + #36 STK[0]=rsp + #68 STK[1]=rsp + #40 STK[2]=rsp + #68 STK[3]=rsp + #44
        # OopMap{[48]=Oop [68]=NarrowOop off=660}
294   	INT3   ; ShouldNotReachHere
294
295   B33: #	B35 &lt;- B13  Freq: 0.118055
295   	movl    RBP, RBX	# spill
297   	jmp,s   B35
297
299   B34: #	B35 &lt;- B17  Freq: 0.118054
299   	addl    RSI, #2	# int
29c
29c   B35: #	B39 &lt;- B33 B34  Freq: 0.236109
29c   	movl    RBX, RBP	# spill
29e   	jmp,s   B39
29e
2a0   B36: #	B38 &lt;- B15  Freq: 0.118054
2a0   	movl    RBX, R9	# spill
2a3   	jmp,s   B38
2a3
2a5   B37: #	B38 &lt;- B19  Freq: 0.118054
2a5   	addl    RSI, #2	# int
2a8
2a8   B38: #	B39 &lt;- B36 B37  Freq: 0.236108
2a8   	incl    RSI	# int
2aa
2aa   B39: #	N537 &lt;- B23 B9 B35 B38  Freq: 0.490738
2aa   	movl    RDX, #-28	# int
2af   	movl    RBP, R14	# spill
2b2   	movl    [rsp + #36], RSI	# spill
2b6   	movl    [rsp + #40], RBX	# spill
2ba   	movl    [rsp + #44], R10	# spill
2bf   	movq    [rsp + #48], R11	# spill
2c4   	movl    [rsp + #64], RCX	# spill
2c8   	nop 	# 3 bytes pad for loops and calls
2cb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:44  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #60 L[4]=rsp + #40 L[5]=rsp + #36 STK[0]=rsp + #64 STK[1]=rsp + #40 STK[2]=rsp + #44
        # OopMap{[48]=Oop [64]=NarrowOop off=720}
2d0   	INT3   ; ShouldNotReachHere
2d0
2d1   B40: #	N537 &lt;- B4  Freq: 1.01328e-006
2d1   	movl    RDX, #-28	# int
2d6   	movl    [rsp + #32], R14	# spill
2db   	movl    [rsp + #40], RBX	# spill
2df   	movq    [rsp + #48], R11	# spill
2e4   	movl    [rsp + #68], RCX	# spill
2e8   	nop 	# 3 bytes pad for loops and calls
2eb   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #60 L[4]=rsp + #40 L[5]=rsp + #44 STK[0]=rsp + #68 STK[1]=rsp + #40 STK[2]=rsp + #68 STK[3]=RBP
        # OopMap{[48]=Oop [68]=NarrowOop off=752}
2f0   	INT3   ; ShouldNotReachHere
2f0
2f1   B41: #	N537 &lt;- B5  Freq: 1.01327e-006
2f1   	movl    RDX, #-28	# int
2f6   	movl    [rsp + #32], R14	# spill
2fb   	movl    [rsp + #40], RBX	# spill
2ff   	movq    [rsp + #48], R11	# spill
304   	movl    [rsp + #64], RCX	# spill
308   	nop 	# 3 bytes pad for loops and calls
30b   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:44  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #60 L[4]=rsp + #40 L[5]=rsp + #44 STK[0]=rsp + #64 STK[1]=rsp + #40 STK[2]=RBP
        # OopMap{[48]=Oop [64]=NarrowOop off=784}
310   	INT3   ; ShouldNotReachHere
310
311   B42: #	N537 &lt;- B2  Freq: 9.99999e-007
311   	movl    RDX, #-83	# int
316   	movl    RBP, R14	# spill
319   	movl    [rsp + #32], RBX	# spill
31d   	nop 	# 2 bytes pad for loops and calls
31f   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:19  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #60 L[4]=rsp + #32 L[5]=rsp + #44
        # OopMap{[48]=Oop off=804}
324   	INT3   ; ShouldNotReachHere
324
325   B43: #	N537 &lt;- B1  Freq: 1.01328e-006
325   	movl    RDX, #-10	# int
32a   	nop 	# 1 bytes pad for loops and calls
32b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:30  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=816}
330   	INT3   ; ShouldNotReachHere
330
331   B44: #	N537 &lt;- B3  Freq: 1.01328e-006
331   	movl    RDX, #-10	# int
336   	nop 	# 1 bytes pad for loops and calls
337   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=828}
33c   	INT3   ; ShouldNotReachHere
33c

</opto_assembly>
<opto_assembly compile_id='4' compile_kind='osr'>
{method} 
 - klass: {other class}
 - method holder:     &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - constants:         0x00000000088cffa0constant pool [67] for &apos;com/carrotsearch/hppc/caliper/BenchmarkBooleanByte&apos;
 - access:            0xc1000001  public 
 - name:              &apos;timeByte&apos;
 - signature:         &apos;(I)I&apos;
 - max stack:         5
 - max locals:        6
 - size of params:    2
 - method size:       15
 - vtable index:      19
 - i2i entry:         0x00000000026b97c0
 - adapter:           0x000000000670f608
 - compiled entry     0x00000000027757f5
 - code size:         98
 - code start:        0x000000077b0a4c80
 - code end (excl):   0x000000077b0a4ce2
 - method data:       0x000000077b2c7f30
 - checked ex length: 0
 - linenumber start:  0x000000077b0a4ce2
 - localvar length:   8
 - localvar start:    0x000000077b0a4cfe
#
#  int ( rawptr:BotPTR )
#
#r016 rdx:rdx   : parm 0: rawptr:BotPTR
# -- Old rsp -- Framesize: 112 --
#r089 rsp+108: pad2, in_preserve
#r088 rsp+104: pad2, in_preserve
#r087 rsp+100: pad2, in_preserve
#r086 rsp+96: pad2, in_preserve
#r085 rsp+92: pad2, in_preserve
#r084 rsp+88: return address
#r083 rsp+84: Fixed slot 1
#r082 rsp+80: Fixed slot 0
#r109 rsp+76: spill
#r108 rsp+72: spill
#r107 rsp+68: spill
#r106 rsp+64: spill
#r105 rsp+60: spill
#r104 rsp+56: spill
#r103 rsp+52: spill
#r102 rsp+48: spill
#r101 rsp+44: spill
#r100 rsp+40: spill
#r099 rsp+36: spill
#r098 rsp+32: spill
#r097 rsp+28: outgoing argument
#r096 rsp+24: outgoing argument
#r095 rsp+20: outgoing argument
#r094 rsp+16: outgoing argument
#r093 rsp+12: outgoing argument
#r092 rsp+ 8: outgoing argument
#r091 rsp+ 4: outgoing argument
#r090 rsp+ 0: outgoing argument
#
000   N564: #	B1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000   	INT3
      	nop 	# 15 bytes pad for loops and calls

010   B1: #	B46 B2 &lt;- BLOCK HEAD IS JUNK   Freq: 1
010   	# stack bang
	pushq   rbp
	subq    rsp, #96	# Create frame
01c   	movl    R13, [RDX]	# int
01f   	movq    R10, [RDX + #40 (8-bit)]	# ptr
023   	movq    [rsp + #48], R10	# spill
028   	movl    R11, [RDX + #32 (8-bit)]	# int
02c   	movl    [rsp + #56], R11	# spill
031   	movl    RBX, [RDX + #8 (8-bit)]	# int
034   	movl    R10, [RDX + #16 (8-bit)]	# int
038   	movl    [rsp + #36], R10	# spill
03d   	movl    R14, [RDX + #24 (8-bit)]	# int
041   	movq    RCX, RDX	# spill
044   	call_leaf,runtime  OSR_migration_end
        No JVM State Info
        # 
051   	movq    R10, [rsp + #48]	# spill
056   	movl    R11, [R10 + #8 (8-bit)]	# compressed klass ptr
05a   	NullCheck R10
05a
05a   B2: #	B44 B3 &lt;- B1  Freq: 0.999999
05a   	cmpl    R11, narrowoop: precise klass com/carrotsearch/hppc/caliper/BenchmarkBooleanByte: 0x00000000002b2d18:Constant:exact *	# compressed ptr
061   	jne,u  B44  P=0.000001 C=-1.000000
061
067   B3: #	B47 B4 &lt;- B2  Freq: 0.999998
067   	movq    R8, R10	# spill
06a   	# checkcastPP of R8
06a   	movl    RAX, [R8 + #24 (8-bit)]	# compressed ptr ! Field com/carrotsearch/hppc/caliper/BenchmarkBooleanByte.byteArray
06e   	addl    RBX, #30727	# int
074   	andl    RBX, R14	# int
077   	movl    RBP, RBX	# spill
079   	incl    RBP	# int
07b   	movl    RCX, [R12 + RAX &lt;&lt; 3 + #12] (compressed oop addressing)	# range
080   	NullCheck RAX
080
080   B4: #	B42 B5 &lt;- B3  Freq: 0.999997
080   	cmpl    RBP, RCX	# unsigned
082   	jnb,u  B42  P=0.000001 C=-1.000000
082
088   B5: #	B43 B6 &lt;- B4  Freq: 0.999996
088   	decode_heap_oop_not_null RSI,RAX
08c   	movslq  R10, RBX	# i2l
08f   	movsbl  RBP, [RSI + #17 + R10]	# byte
095   	cmpl    RBX, RCX	# unsigned
097   	jnb,u  B43  P=0.000001 C=-1.000000
097
09d   B6: #	B7 &lt;- B5  Freq: 0.999995
09d   	incl    R13	# int
0a0   	movl    RDI, R14	# spill
0a3   	sall    RDI, #1
0a5   	movslq  R10, RBX	# i2l
0a8   	movb    [RSI + #16 + R10], RBP	# byte
0a8
0ad   B7: #	B26 B8 &lt;- B6 B27 	Loop: B7-B27 stride: not constant  Freq: 1.05882
0ad   	cmpl    R13, RDI
0b0   	jge     B26  P=0.000000 C=328076.000000
0b0
0b6   B8: #	B9 &lt;- B7  Freq: 1.05882
0b6   	movl    R9, R13	# spill
0b9   	incl    R9	# int
0bc
0bc   B9: #	B34 B10 &lt;- B8 B11 	Loop: B9-B11 inner stride: not constant pre of N421 Freq: 2.11763
0bc   	addl    RBX, #30727	# int
0c2   	andl    RBX, R14	# int
0c5   	movl    R10, RBX	# spill
0c8   	incl    R10	# int
0cb   	cmpl    R10, RCX	# unsigned
0ce   	jnb,u  B34  P=0.000001 C=-1.000000
0ce
0d4   B10: #	B41 B11 &lt;- B9  Freq: 2.11763
0d4   	movslq  R10, RBX	# i2l
0d7   	movsbl  R10, [RSI + #17 + R10]	# byte
0dd   	cmpl    RBX, RCX	# unsigned
0df   	jnb,u  B41  P=0.000001 C=-1.000000
0df
0e5   B11: #	B9 B12 &lt;- B10  Freq: 2.11763
0e5   	movslq  R11, RBX	# i2l
0e8   	movb    [RSI + #16 + R11], R10	# byte
0ed   	incl    R13	# int
0f0   	cmpl    R13, R9
0f3   	jl,s   B9	# loop end  P=0.500000 C=328076.000000
0f3
0f5   B12: #	B22 B13 &lt;- B11  Freq: 1.05881
0f5   	movl    R11, RDI	# spill
0f8   	subl    R11, R13	# int
0fb   	andl    R11, #-4	# int
0ff   	addl    R11, R13	# int
102   	cmpl    R13, R11
105   	jge     B22  P=0.000001 C=-1.000000
      	nop 	# 5 bytes pad for loops and calls

110   B13: #	B28 B14 &lt;- B12 B21 	Loop: B13-B21 inner stride: not constant main of N160 Freq: 123361
110   	addl    RBX, #30727	# int
116   	andl    RBX, R14	# int
119   	movl    R10, RBX	# spill
11c   	incl    R10	# int
11f   	cmpl    R10, RCX	# unsigned
122   	jnb,u  B28  P=0.000001 C=-1.000000
122
128   B14: #	B35 B15 &lt;- B13  Freq: 123361
128   	movslq  R10, RBX	# i2l
12b   	movsbl  R10, [RSI + #17 + R10]	# byte
131   	cmpl    RBX, RCX	# unsigned
133   	jnb,u  B35  P=0.000001 C=-1.000000
133
139   B15: #	B31 B16 &lt;- B14  Freq: 123361
139   	movl    R9, RBX	# spill
13c   	addl    R9, #30727	# int
143   	andl    R9, R14	# int
146   	movslq  RBX, RBX	# i2l
149   	movb    [RSI + #16 + RBX], R10	# byte
14e   	movl    R10, R9	# spill
151   	incl    R10	# int
154   	cmpl    R10, RCX	# unsigned
157   	jnb,u  B31  P=0.000001 C=-1.000000
157
15d   B16: #	B38 B17 &lt;- B15  Freq: 123361
15d   	movslq  R10, R9	# i2l
160   	movsbl  R10, [RSI + #17 + R10]	# byte
166   	cmpl    R9, RCX	# unsigned
169   	jnb,u  B38  P=0.000001 C=-1.000000
169
16f   B17: #	B29 B18 &lt;- B16  Freq: 123361
16f   	movl    RDX, R9	# spill
172   	addl    RDX, #30727	# int
178   	andl    RDX, R14	# int
17b   	movslq  R9, R9	# i2l
17e   	movb    [RSI + #16 + R9], R10	# byte
183   	movl    R10, RDX	# spill
186   	incl    R10	# int
189   	cmpl    R10, RCX	# unsigned
18c   	jnb,u  B29  P=0.000001 C=-1.000000
18c
192   B18: #	B36 B19 &lt;- B17  Freq: 123361
192   	movslq  R10, RDX	# i2l
195   	movsbl  R10, [RSI + #17 + R10]	# byte
19b   	cmpl    RDX, RCX	# unsigned
19d   	jnb,u  B36  P=0.000001 C=-1.000000
19d
1a3   B19: #	B32 B20 &lt;- B18  Freq: 123360
1a3   	movl    RBX, RDX	# spill
1a5   	addl    RBX, #30727	# int
1ab   	andl    RBX, R14	# int
1ae   	movslq  R9, RDX	# i2l
1b1   	movb    [RSI + #16 + R9], R10	# byte
1b6   	movl    R10, RBX	# spill
1b9   	incl    R10	# int
1bc   	cmpl    R10, RCX	# unsigned
1bf   	jnb,u  B32  P=0.000001 C=-1.000000
1bf
1c5   B20: #	B39 B21 &lt;- B19  Freq: 123360
1c5   	movslq  R10, RBX	# i2l
1c8   	movsbl  R10, [RSI + #17 + R10]	# byte
1ce   	cmpl    RBX, RCX	# unsigned
1d0   	jnb,u  B39  P=0.000001 C=-1.000000
1d0
1d6   B21: #	B13 B22 &lt;- B20  Freq: 123360
1d6   	movslq  R9, RBX	# i2l
1d9   	movb    [RSI + #16 + R9], R10	# byte
1de   	addl    R13, #4	# int
1e2   	cmpl    R13, R11
1e5   	jl     B13	# loop end  P=1.000000 C=328076.000000
1e5
1eb   B22: #	B26 B23 &lt;- B12 B21  Freq: 0.0588238
1eb   	cmpl    R13, RDI
1ee   	jge,s   B26  P=0.500000 C=-1.000000
1ee
1f0   B23: #	B34 B24 &lt;- B22 B25 	Loop: B23-B25 inner stride: not constant post of N421 Freq: 0.0588237
1f0   	addl    RBX, #30727	# int
1f6   	andl    RBX, R14	# int
1f9   	movl    R10, RBX	# spill
1fc   	incl    R10	# int
1ff   	cmpl    R10, RCX	# unsigned
202   	jnb,us  B34  P=0.000001 C=-1.000000
202
204   B24: #	B41 B25 &lt;- B23  Freq: 0.0588236
204   	movslq  R10, RBX	# i2l
207   	movsbl  R10, [RSI + #17 + R10]	# byte
20d   	cmpl    RBX, RCX	# unsigned
20f   	jnb,u  B41  P=0.000001 C=-1.000000
20f
215   B25: #	B23 B26 &lt;- B24  Freq: 0.0588235
215   	movslq  R11, RBX	# i2l
218   	movb    [RSI + #16 + R11], R10	# byte
21d   	incl    R13	# int
220   	cmpl    R13, RDI
223   	jl,s   B23	# loop end  P=0.500000 C=328076.000000
223
225   B26: #	B45 B27 &lt;- B7 B25 B22  Freq: 0.0588242
225   	movl    R10, [rsp + #36]	# spill
22a   	incl    R10	# int
22d   	movl    [rsp + #36], R10	# spill
232   	cmpl    R10, [RSP + #56 (32-bit)]
237   	jge     B45	# loop end  P=0.000001 C=-1.000000
237
23d   B27: #	B7 &lt;- B26  Freq: 0.0588241
23d   	xorl    R13, R13	# int
240   	jmp     B7
240
245   B28: #	B30 &lt;- B13  Freq: 0.124999
245   	movl    RDX, RBX	# spill
247   	jmp,s   B30
247
249   B29: #	B30 &lt;- B17  Freq: 0.124999
249   	addl    R13, #2	# int
24d
24d   B30: #	B34 &lt;- B28 B29  Freq: 0.249998
24d   	movl    RBX, RDX	# spill
24f   	jmp,s   B34
24f
251   B31: #	B33 &lt;- B15  Freq: 0.124999
251   	movl    RBX, R9	# spill
254   	jmp,s   B33
254
256   B32: #	B33 &lt;- B19  Freq: 0.124998
256   	addl    R13, #2	# int
25a
25a   B33: #	B34 &lt;- B31 B32  Freq: 0.249997
25a   	incl    R13	# int
25d
25d   B34: #	N564 &lt;- B23 B9 B30 B33  Freq: 0.499998
25d   	movl    RDX, #-28	# int
262   	movl    RBP, R14	# spill
265   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
277   	movl    [rsp + #40], R13	# spill
27c   	movl    [rsp + #44], RBX	# spill
280   	movl    [rsp + #48], R10	# spill
285   	movq    [rsp + #64], R8	# spill
28a   	movl    [rsp + #60], RAX	# spill
28e   	nop 	# 1 bytes pad for loops and calls
28f   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=rsp + #64 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #44 L[5]=rsp + #40 STK[0]=rsp + #60 STK[1]=rsp + #44 STK[2]=rsp + #60 STK[3]=rsp + #48
        # OopMap{[60]=NarrowOop [64]=Oop off=660}
294   	INT3   ; ShouldNotReachHere
294
295   B35: #	B37 &lt;- B14  Freq: 0.124999
295   	movl    RDX, RBX	# spill
297   	jmp,s   B37
297
299   B36: #	B37 &lt;- B18  Freq: 0.124999
299   	addl    R13, #2	# int
29d
29d   B37: #	B41 &lt;- B35 B36  Freq: 0.249998
29d   	movl    RBX, RDX	# spill
29f   	jmp,s   B41
29f
2a1   B38: #	B40 &lt;- B16  Freq: 0.124999
2a1   	movl    RBX, R9	# spill
2a4   	jmp,s   B40
2a4
2a6   B39: #	B40 &lt;- B20  Freq: 0.124998
2a6   	addl    R13, #2	# int
2aa
2aa   B40: #	B41 &lt;- B38 B39  Freq: 0.249997
2aa   	incl    R13	# int
2ad
2ad   B41: #	N564 &lt;- B24 B10 B37 B40  Freq: 0.499997
2ad   	movl    RDX, #-28	# int
2b2   	movl    RBP, R14	# spill
2b5   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
2c7   	movl    [rsp + #40], R13	# spill
2cc   	movl    [rsp + #44], RBX	# spill
2d0   	movl    [rsp + #48], R10	# spill
2d5   	movq    [rsp + #64], R8	# spill
2da   	movl    [rsp + #52], RAX	# spill
2de   	nop 	# 1 bytes pad for loops and calls
2df   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:44  L[0]=rsp + #64 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #44 L[5]=rsp + #40 STK[0]=rsp + #52 STK[1]=rsp + #44 STK[2]=rsp + #48
        # OopMap{[52]=NarrowOop [64]=Oop off=740}
2e4   	INT3   ; ShouldNotReachHere
2e4
2e5   B42: #	N564 &lt;- B4  Freq: 1.01328e-006
2e5   	movl    RDX, #-28	# int
2ea   	movl    [rsp + #32], R14	# spill
2ef   	movl    [rsp + #44], R13	# spill
2f4   	movl    [rsp + #48], RBX	# spill
2f8   	movq    [rsp + #64], R8	# spill
2fd   	movl    [rsp + #60], RAX	# spill
301   	nop 	# 2 bytes pad for loops and calls
303   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=rsp + #64 L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #36 L[4]=rsp + #48 L[5]=rsp + #44 STK[0]=rsp + #60 STK[1]=rsp + #48 STK[2]=rsp + #60 STK[3]=RBP
        # OopMap{[60]=NarrowOop [64]=Oop off=776}
308   	INT3   ; ShouldNotReachHere
308
309   B43: #	N564 &lt;- B5  Freq: 1.01327e-006
309   	movl    RDX, #-28	# int
30e   	movl    [rsp + #32], R14	# spill
313   	movl    [rsp + #44], R13	# spill
318   	movl    [rsp + #48], RBX	# spill
31c   	movq    [rsp + #64], R8	# spill
321   	movl    [rsp + #52], RAX	# spill
325   	nop 	# 2 bytes pad for loops and calls
327   	call,static  wrapper for: uncommon_trap(reason=&apos;range_check&apos; action=&apos;make_not_entrant&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:44  L[0]=rsp + #64 L[1]=rsp + #56 L[2]=rsp + #32 L[3]=rsp + #36 L[4]=rsp + #48 L[5]=rsp + #44 STK[0]=rsp + #52 STK[1]=rsp + #48 STK[2]=RBP
        # OopMap{[52]=NarrowOop [64]=Oop off=812}
32c   	INT3   ; ShouldNotReachHere
32c
32d   B44: #	N564 &lt;- B2  Freq: 9.99999e-007
32d   	movl    RDX, #-83	# int
332   	movl    RBP, R14	# spill
335   	movq    [rsp - #8], rax	# 32-bit mem-mem spill
	movl    rax, [rsp + #36]
	movl    [rsp + #32], rax
	movq    rax, [rsp - #8]
347   	movl    [rsp + #36], RBX	# spill
34b   	movl    [rsp + #40], R13	# spill
350   	nop 	# 3 bytes pad for loops and calls
353   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:19  L[0]=rsp + #48 L[1]=rsp + #56 L[2]=RBP L[3]=rsp + #32 L[4]=rsp + #36 L[5]=rsp + #40
        # OopMap{[48]=Oop off=856}
358   	INT3   ; ShouldNotReachHere
358
359   B45: #	N564 &lt;- B26  Freq: 5.96053e-008
359   	movl    RDX, #-83	# int
35e   	movq    RBP, R8	# spill
361   	nop 	# 2 bytes pad for loops and calls
363   	call,static  wrapper for: uncommon_trap(reason=&apos;unreached&apos; action=&apos;reinterpret&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:93  L[0]=RBP L[1]=_ L[2]=_ L[3]=#10 L[4]=#0 L[5]=_ STK[0]=#0 STK[1]=#10
        # OopMap{rbp=Oop off=872}
368   	INT3   ; ShouldNotReachHere
368
369   B46: #	N564 &lt;- B1  Freq: 1.01328e-006
369   	movl    RDX, #-10	# int
36e   	nop 	# 1 bytes pad for loops and calls
36f   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:30  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=#NULL
        # OopMap{off=884}
374   	INT3   ; ShouldNotReachHere
374
375   B47: #	N564 &lt;- B3  Freq: 1.01328e-006
375   	movl    RDX, #-10	# int
37a   	nop 	# 1 bytes pad for loops and calls
37b   	call,static  wrapper for: uncommon_trap(reason=&apos;null_check&apos; action=&apos;maybe_recompile&apos;)
        # com.carrotsearch.hppc.caliper.BenchmarkBooleanByte::timeByte @ bci:43  L[0]=_ L[1]=_ L[2]=_ L[3]=_ L[4]=_ L[5]=_ STK[0]=_ STK[1]=_ STK[2]=#NULL STK[3]=RBP
        # OopMap{off=896}
380   	INT3   ; ShouldNotReachHere
380

</opto_assembly>
<writer thread='3640'/>
<statistics type='opto'>
--- Compiler Statistics ---
Methods seen: 44  Methods parsed: 44  Nodes created: 28581
Blocks parsed: 293  Blocks seen: 322
225 original NULL checks - 166 elided (73%); optimizer leaves 58,
38 made implicit (65%)
CCP: 18  constants found: 0
Total frameslots = 416, Max frameslots = 40
Inserted 0 spill loads, 0 spill stores, 0 mem-mem moves and 0 copies.
Total load cost=      0, store cost =      0, mem-mem cost =  0.00, copy cost =     0.
Adjusted spill cost =       0.
Conservatively coalesced 83 copies, 0 pairs, 362 post alloc.
Used cisc instruction  23,  remained in register 575
Average allocation trips 1.375000
High Pressure Blocks = 0, Low Pressure Blocks = 0
Nops added 0 bytes to total of 17939 bytes, for 0.00%
Peephole: peephole rules applied: 0
PhaseIdealLoop=107, sum _unique=68552
</statistics>
<statistics type='intrinsic'>
Compiler intrinsic usage:
     1 (50.0%) _min (worked)
     1 (50.0%) _arraycopy (worked)
     2 (100.0%) total (worked)
</statistics>
<statistics type='deoptimization'>
Deoptimization traps recorded:
     4 (100.0%) total
           unreached/reinterpret/if_icmplt: 4 (100.0%)
</statistics>
<statistics type='nmethod'>
Statistics for 1 native nmethods:
 N. total size  = 1080
 N. relocation  = 112
 N. main code   = 680
Statistics for 18 bytecoded nmethods:
 total in heap  = 50376
 relocation     = 1088
 main code      = 16480
 stub code      = 1050
 constants      = 86
 scopes data    = 6664
 scopes pcs     = 17792
 dependencies   = 152
 handler table  = 912
 nul chk table  = 440
 oops           = 368
Debug Data Chunks: 1457, shared 214+458, non-SP&apos;s elided 7
PcDesc Statistics:  23 queries, 9.26 comparisons per query
  caches=18 queries=23/0, hits=0+9, tests=63+150, adds=14
</statistics>
<statistics type='SharedRuntime'>
    1 new array requires GC
    0 inline cache miss in compiled
    0 wrong method
    1 unresolved static call site
    0 unresolved virtual call site
    5 unresolved opt virtual call site
  273 slow partial subtype
   12 byte array copies
   12 short array copies
   12 int array copies
   12 long array copies
AdapterHandlerTable: empty 176 longest 3 total 136 average 1.162393
AdapterHandlerTable: lookups 6876 buckets 7161 equals 6743 hits 6740 compact 6740
</statistics>
<tty_done stamp='11.216'/>
</tty>
<hotspot_log_done stamp='11.216'/>
</hotspot_log>
